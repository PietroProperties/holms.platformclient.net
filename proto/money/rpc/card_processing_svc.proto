syntax = "proto3";

package holms.types.money.rpc;
option csharp_namespace = "HOLMS.Types.Money.RPC";

import "google/protobuf/empty.proto";
import "primitive/pb_inclusive_calendar_date_range.proto";
import "money/cards/transactions/payment_card_sale_capture.proto";
import "money/cards/transactions/payment_card_sale_capture_indicator.proto";
import "money/cards/transactions/processor_transaction_result.proto";
import "money/cards/transactions/merchant_batch.proto";
import "money/cards/raw_payment_card_indicator.proto";
import "money/cards/not_present_payment_card.proto";
import "money/cards/card_merchant_indicator.proto";
import "crm/guests/guest_indicator.proto";
import "tenancy_config/indicators/property_indicator.proto";


message CardProcessingSvcCaptureEnumResponse {
	repeated holms.types.money.cards.transactions.PaymentCardSaleCapture captures = 1;
}

message MerchantBatchEnumResponse {
	repeated holms.types.money.cards.transactions.MerchantBatch batches = 1;
}

message CardProcessingSvcCancelPendingCaptureResponse {
	CardProcessingSvcCancelPendingCaptureResult result = 1;
}

enum CardProcessingSvcCancelPendingCaptureResult {
	CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_SUCCESS = 0;
	CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_NOT_FOUND = 1;
	CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_NOT_CANCELLABLE = 2;
	CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_UNKNOWN_ERROR = 3;
}

message CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse {
	holms.types.money.cards.transactions.ProcessorTransactionResult result = 1;
	holms.types.money.cards.RawPaymentCardIndicator tokenized_card = 2;
}

message PaymentCardVerificationRequest {
	holms.types.crm.guests.GuestIndicator guest = 1;
	holms.types.tenancy_config.indicators.PropertyIndicator property = 2;
	holms.types.money.cards.NotPresentPaymentCard card = 3;
}

service CardProcessingSvc {
	rpc GetAllPendingCaptures(.google.protobuf.Empty) 
		returns (CardProcessingSvcCaptureEnumResponse);

	rpc GetAllBatches(.holms.types.primitive.PbInclusiveCalendarDateRange) 
		returns (MerchantBatchEnumResponse);

	rpc OpenAndSettleBatchFromPendingCapturesSpecificMerchant(.holms.types.money.cards.CardMerchantIndicator) 
		returns (holms.types.money.cards.transactions.MerchantBatch);

	rpc OpenAndSettleBatchFromPendingCapturesAllMerchants(.google.protobuf.Empty) 
		returns (MerchantBatchEnumResponse);

	rpc CancelPendingCapture(holms.types.money.cards.transactions.PaymentCardSaleCaptureIndicator)
		returns (CardProcessingSvcCancelPendingCaptureResponse);

	rpc VerifyAndTokenizeNotPresentCard(PaymentCardVerificationRequest)
		returns (CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse);
}


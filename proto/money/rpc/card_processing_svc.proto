syntax = "proto3";

package holms.types.money.rpc;
option csharp_namespace = "HOLMS.Types.Money.RPC";

import "crm/guests/guest_indicator.proto";
import "money/cards/card_merchant_indicator.proto";
import "money/cards/guest_payment_card_indicator.proto";
import "money/cards/not_present_payment_card.proto";
import "money/cards/transactions/closed_merchant_batch.proto";
import "money/cards/transactions/get_open_batch_state_response.proto";
import "money/cards/transactions/payment_card_sale_indicator.proto";
import "money/cards/transactions/payment_card_refund_indicator.proto";
import "money/cards/transactions/processor_transaction_result.proto";
import "primitive/pb_inclusive_calendar_date_range.proto";
import "tenancy_config/indicators/property_indicator.proto";


message CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest {
	holms.types.crm.guests.GuestIndicator guest = 1;
	holms.types.tenancy_config.indicators.PropertyIndicator property = 2;
	holms.types.money.cards.NotPresentPaymentCard card = 3;
}

message CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse {
	holms.types.money.cards.transactions.ProcessorTransactionResult result = 1;
	holms.types.money.cards.GuestPaymentCardIndicator card = 2;
}

message MerchantBatchEnumResponse {
	repeated holms.types.money.cards.transactions.ClosedMerchantBatch batches = 1;
}


message CardProcessingSvcSearchHistoricalBatchesRequest {
	holms.types.money.cards.CardMerchantIndicator merchant = 1;
	holms.types.primitive.PbInclusiveCalendarDateRange batch_closure_date_range = 2;
}

enum CardProcessingSvcVoidTransactionResult {
	CARD_PROCESSING_SVC_VOID_TRANSACTION_SUCCESS = 0;
	CARD_PROCESSING_SVC_VOID_TRANSACTION_NOT_FOUND = 1;
	CARD_PROCESSING_SVC_VOID_TRANSACTION_NOT_VOIDABLE = 2;
	CARD_PROCESSING_SVC_VOID_TRANSACTION_UNKNOWN_FAILURE = 3;
}

message CardProcessingSvcVoidTransactionResponse {
	CardProcessingSvcVoidTransactionResult result = 1;
}

service CardProcessingSvc {
	// Tokenize a new card
	rpc VerifyAndTokenizeNotPresentCard(CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest)
		returns (CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse);

	// Batches
	// Get info about batches
	rpc GetCurrentBatchState(holms.types.money.cards.CardMerchantIndicator)
		returns (holms.types.money.cards.transactions.GetOpenBatchStateResponse); 
	rpc SearchHistoricalBatches(CardProcessingSvcSearchHistoricalBatchesRequest) 
		returns (MerchantBatchEnumResponse);
	// Request batch closure
	rpc CloseProcessorBatch(holms.types.money.cards.CardMerchantIndicator) 
		returns (holms.types.money.cards.transactions.ClosedMerchantBatch);

	// Post-creation card transaction management
	rpc VoidSale(holms.types.money.cards.transactions.PaymentCardSaleIndicator)
		returns (CardProcessingSvcVoidTransactionResponse);
	rpc VoidRefund(holms.types.money.cards.transactions.PaymentCardRefundIndicator)
		returns (CardProcessingSvcVoidTransactionResponse);
}


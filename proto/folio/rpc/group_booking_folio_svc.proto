syntax = "proto3";

package holms.types.folio.rpc;
option csharp_namespace = "HOLMS.Types.Folio.RPC";
option go_package = "folio/rpc";

import "booking/indicators/group_booking_indicator.proto";
import "folio/folio_check_cash_payment_indicator.proto";
import "folio/group_booking_folio_state.proto";
import "folio/rpc/folio_svc_authorization_modification_request.proto";
import "folio/rpc/folio_svc_authorization_modification_response.proto";
import "folio/rpc/folio_svc_cancel_payment_response.proto";
import "folio/rpc/folio_svc_get_on_file_cards_response.proto";
import "folio/rpc/folio_svc_post_card_payment_response.proto";
import "folio/rpc/folio_svc_post_cash_payment_response.proto";
import "folio/rpc/folio_svc_post_check_payment_response.proto";
import "folio/rpc/folio_svc_refund_response.proto";
import "google/protobuf/empty.proto";
import "money/cards/card_sale_purpose.proto";
import "money/cards/transactions/card_authorization_response.proto";
import "money/cards/transactions/payment_card_sale_indicator.proto";
import "money/cards/not_present_payment_card.proto";
import "money/cards/customer_payment_card_indicator.proto";
import "primitive/monetary_amount.proto";
import "supply/incidental_items/incidental_item_indicator.proto";

message GroupBookingFolioSvcCardAuthorizationFromTokenRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	.holms.types.money.cards.CustomerPaymentCardIndicator card = 2;
	holms.types.primitive.MonetaryAmount amount = 3;
	holms.types.money.cards.CardSalePurpose purpose = 4;
}

message GroupBookingFolioSvcPostCheckPaymentRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	.holms.types.primitive.MonetaryAmount amount = 2;
}

message GroupBookingFolioSvcCardAuthorizationFromPresentCardRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	holms.types.primitive.MonetaryAmount amount = 2;
	holms.types.money.cards.CardSalePurpose purpose = 3;
}

message GroupBookingFolioSvcCardAuthorizationFromNotPresentCardRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	.holms.types.money.cards.NotPresentPaymentCard card = 2;
	holms.types.primitive.MonetaryAmount amount = 3;
	holms.types.money.cards.CardSalePurpose purpose = 4;
}

message GroupBookingFolioSvcPostCardPaymentRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	holms.types.money.cards.transactions.PaymentCardSaleIndicator sale = 2;
	holms.types.primitive.MonetaryAmount amount = 3;
        holms.types.money.cards.CardSalePurpose purpose = 4;
}

message GroupBookingFolioSvcPostCashPaymentRequest {
	holms.types.primitive.MonetaryAmount amount_paid = 1;
	.holms.types.booking.indicators.GroupBookingIndicator booking = 2;
}

message GroupBookingFolioSvcPostLodgingChargeCorrectionRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	string description = 2;
	.holms.types.primitive.MonetaryAmount adjustment_subtotal = 3;
	bool adjustment_charged_against_group = 4;
}

message GroupBookingFolioSvcPostIncidentalChargeCorrectionRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	.holms.types.supply.incidental_items.IncidentalItemIndicator incidental_item = 2;
	string description = 3;
	.holms.types.primitive.MonetaryAmount adjustment_subtotal = 4;
	bool adjustment_charged_against_group = 5;
}

message GroupBookingFolioSvcPostMiscChargeCorrectionRequest {
	.holms.types.booking.indicators.GroupBookingIndicator booking = 1;
	string description = 2;
	.holms.types.primitive.MonetaryAmount adjustment_subtotal = 3;
	bool adjustment_charged_against_group = 4;
}

message GroupBookingFolioSvcPaymentCardRefundRequest {
	holms.types.booking.indicators.GroupBookingIndicator group_booking = 1;
        holms.types.primitive.MonetaryAmount amount = 2;
        holms.types.money.cards.CustomerPaymentCardIndicator card = 3;
        string description = 4;
}

service GroupBookingFolioSvc {
	// Get info
	rpc GetGroupBookingFolioState(.holms.types.booking.indicators.GroupBookingIndicator)
		returns(.holms.types.folio.GroupBookingFolioState);
	rpc GetOnFileCards(.holms.types.booking.indicators.GroupBookingIndicator)
		returns(FolioSvcGetOnFileCardsResponse);

	// Card authorization
	rpc AddCardAuthorizationFromStoredCard(GroupBookingFolioSvcCardAuthorizationFromTokenRequest)
		returns (.holms.types.money.cards.transactions.CardAuthorizationResponse);
	rpc AddCardAuthorizationFromPresentedCard(GroupBookingFolioSvcCardAuthorizationFromPresentCardRequest)
		returns (.holms.types.money.cards.transactions.CardAuthorizationResponse);
	rpc AddCardAuthorizationFromNotPresentCard(GroupBookingFolioSvcCardAuthorizationFromNotPresentCardRequest)
		returns (.holms.types.money.cards.transactions.CardAuthorizationResponse);
	rpc ChangeAuthorizationAmount(FolioSvcAuthorizationModificationRequest)
		returns (FolioSvcAuthorizationModificationResponse);

	// Payment application/cancellation/refund
	rpc PostCardPayment(GroupBookingFolioSvcPostCardPaymentRequest)
		returns (FolioSvcPostCardPaymentResponse);
	rpc PostCheckPayment(GroupBookingFolioSvcPostCheckPaymentRequest)
		returns (FolioSvcPostCheckPaymentResponse);
	rpc PostCashPayment(GroupBookingFolioSvcPostCashPaymentRequest)
		returns (FolioSvcPostCashPaymentResponse);
        rpc CancelCashCheckPayment(FolioCheckCashPaymentIndicator)
                returns (google.protobuf.Empty);
        rpc CancelCardPayment(holms.types.money.cards.transactions.PaymentCardSaleIndicator)
		returns (FolioSvcCancelPaymentResponse);
	rpc RefundTokenizedCard(GroupBookingFolioSvcPaymentCardRefundRequest)
		returns (FolioSvcRefundResponse);

	// Charge corrections
	rpc PostLodgingChargeCorrection (GroupBookingFolioSvcPostLodgingChargeCorrectionRequest)
		returns (google.protobuf.Empty);
	rpc PostIncidentalChargeCorrection (GroupBookingFolioSvcPostIncidentalChargeCorrectionRequest)
		returns (google.protobuf.Empty);
	rpc PostMiscChargeCorrection (GroupBookingFolioSvcPostMiscChargeCorrectionRequest)
		returns (google.protobuf.Empty);
}


syntax = "proto3";

package holms.types.folio.rpc;
option csharp_namespace = "HOLMS.Types.Folio.RPC";
option go_package = "folio/rpc";

import "booking/indicators/reservation_indicator.proto";
import "primitive/pb_local_date.proto";
import "supply/incidental_items/incidental_item_indicator.proto";
import "primitive/uuid.proto";

message MasterFolioServiceMasterFolioRequest {
	.holms.types.booking.indicators.ReservationIndicator client_folio = 1;
	.holms.types.booking.indicators.ReservationIndicator master_folio = 2;
	bool master_accrues_lodging = 3;
	bool master_accrues_incidentals = 4;
}

enum ReservationFolioSvcRequestMasterFolioResult {
	MASTER_FOLIO_SVC_REQUEST_MASTER_FOLIO_OK = 0;
	MASTER_FOLIO_SVC_REQUEST_MASTER_FOLIO_CLIENT_HAS_MASTER = 1;
	MASTER_FOLIO_SVC_REQUEST_MASTER_FOLIO_MASTER_HAS_MASTER = 2;
	MASTER_FOLIO_SVC_REQUEST_CLIENT_HAS_CLIENT = 3;
	MASTER_FOLIO_SVC_REQUEST_MASTER_FOLIO_DISALLOWED_MASTER = 4;
	MASTER_FOLIO_SVC_REQUEST_MASTER_FOLIO_DISALLOWED_CLIENT = 5;
	MASTER_FOLIO_SVC_REQUEST_MASTER_FOLIO_FAILURE = 6;
}

message MasterFolioServiceRequestMasterFolioResponse {
	ReservationFolioSvcRequestMasterFolioResult result = 1;
}

message MasterFolioSvcRemoveMasterFolioRequest {
	.holms.types.booking.indicators.ReservationIndicator client_folio = 1;
}

enum ReservationFolioSvcRemoveMasterFolioResult {
	MASTER_FOLIO_SVC_REMOVE_MASTER_FOLIO_OK = 0;
	MASTER_FOLIO_SVC_REMOVE_MASTER_FOLIO_NO_MASTER = 1;
	MASTER_FOLIO_SVC_REMOVE_MASTER_FOLIO_FAILURE = 2;
}

message MasterFolioServiceRemoveMasterFolioResponse {
	ReservationFolioSvcRemoveMasterFolioResult result = 1;
}

enum MasterFolioSvcFolioSwapResult {
	MASTER_FOLIO_SVC_FOLIO_SWAP_OK = 0;
	MASTER_FOLIO_SVC_FOLIO_SWAP_INVALID_NO_MASTER_FOLIO = 1;
	MASTER_FOLIO_SVC_FOLIO_SWAP_INVALID_UNKNOWN = 2;
	MASTER_FOLIO_SVC_FOLIO_SWAP_FAILURE_UNKNOWN = 3;
}

enum MasterFolioSvcFolioSwapDirection {
	MASTER_FOLIO_SVC_FOLIO_SWAP_CLIENT_TO_MASTER = 0;
	MASTER_FOLIO_SVC_FOLIO_SWAP_MASTER_TO_CLIENT = 1;
}

message MasterFolioServiceFolioSwapRequest {
	.holms.types.primitive.PbLocalDate swap_opsdate = 1;
	MasterFolioSvcFolioSwapDirection swap_direction = 2;
	bool swap_is_for_incidentals_charge = 3;
	.holms.types.supply.incidental_items.IncidentalItemIndicator swapped_incidentals_charge = 4;
	.holms.types.booking.indicators.ReservationIndicator client_folio = 5;
	bool swap_is_for_adjustment_charge = 6;
	holms.types.primitive.Uuid id = 10;
}

message ReservationMasterFolioAssignment {
	.holms.types.booking.indicators.ReservationIndicator master_folio = 1;
	repeated .holms.types.booking.indicators.ReservationIndicator client_folios = 2;
	.holms.types.booking.indicators.ReservationIndicator queried_folio = 3;
	bool master_accrues_lodging = 4;
	bool master_accrues_incidentals = 5;
}

message MasterFolioSvcFolioSwapResponse {
	MasterFolioSvcFolioSwapResult result = 1;
}

message LinkMasterAuthorizationCheckRequest{
	.holms.types.booking.indicators.ReservationIndicator master_folio=1;
	.holms.types.booking.indicators.ReservationIndicator client_folio=2;
}

message LinkMasterAuthorizationCheckResponse{
	bool is_authorization_increase_success=1;
	bool no_chage_to_authorization_required=2;
	bool is_authorization_increase_required=3;
}

message UpdateClientFoliosRequest{
.holms.types.booking.indicators.ReservationIndicator master_folio = 1;
repeated .holms.types.booking.indicators.ReservationIndicator added_client_folios = 2;
repeated .holms.types.booking.indicators.ReservationIndicator removed_client_folios = 3;
}

message UpdateClientFoliosResponse{
bool is_successful = 1;
}

service MasterFolioSvc {
	rpc RequestMasterFolio(MasterFolioServiceMasterFolioRequest)
		returns(MasterFolioServiceRequestMasterFolioResponse);

	rpc RemoveMasterFolio(MasterFolioSvcRemoveMasterFolioRequest)
		returns(MasterFolioServiceRemoveMasterFolioResponse);

	rpc AtomicFolioChargeSwap(MasterFolioServiceFolioSwapRequest)
		returns(MasterFolioSvcFolioSwapResponse);

	rpc AuthorizationIncrease(LinkMasterAuthorizationCheckRequest)
		returns(LinkMasterAuthorizationCheckResponse);

	rpc UpdateClientFolios(UpdateClientFoliosRequest)
		returns(UpdateClientFoliosResponse);
}

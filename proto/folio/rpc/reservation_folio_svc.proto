syntax = "proto3";

package holms.types.folio.rpc;
option csharp_namespace = "HOLMS.Types.Folio.RPC";

import "booking/indicators/reservation_indicator.proto";
import "folio/reservation_folio_state.proto";
import "google/protobuf/empty.proto";
import "money/cards/card_sale_purpose.proto";
import "money/cards/guest_payment_card.proto";
import "money/cards/guest_payment_card_indicator.proto";
import "money/cards/not_present_payment_card.proto";
import "money/cards/transactions/card_authorization_response.proto";
import "money/cards/transactions/payment_card_sale_indicator.proto";
import "primitive/monetary_amount.proto";
import "supply/incidental_items/incidental_item_indicator.proto";
import "folio/reservation_folio_summary.proto";

message ReservationFolioSvcGetSummariesRequest {
	repeated .holms.types.booking.indicators.ReservationIndicator reservations = 1;
}

message ReservationFolioSvcGetSummariesResponse {
	repeated .holms.types.folio.ReservationFolioSummary summaries = 1;
}

enum ReservationFolioSvcPostChargesResult {
	RESERVATION_FOLIO_SVC_POST_CHARGES_RESULT_OK = 0;
	RESERVATION_FOLIO_SVC_POST_CHARGES_RESULT_MISSING_HOUSE_ACCOUNT = 1;
	RESERVATION_FOLIO_SVC_POST_CHARGES_RESULT_MISSING_RESERVATION = 2;
}

message ReservationFolioSvcPostChargesResponse {
	ReservationFolioSvcPostChargesResult result = 1;
}

enum ReservationFolioSvcGetFolioStateResult {
	RESERVATION_FOLIO_SVC_GET_FOLIO_STATE_OK = 0;
	RESERVATION_FOLIO_SVC_GET_FOLIO_STATE_MISSING_HOUSE_ACCOUNT = 1;

}

message ReservationFolioSvcGetFolioStateResponsev2 {
	ReservationFolioSvcGetFolioStateResult result = 1;
	.holms.types.folio.ReservationFolioState folio_state = 2;
}

enum ReservationFolioSvcPostCashPaymentResult {
	RESERVATION_FOLIO_SVC_POST_CASH_PAYMENT_OK = 0;
	RESERVATION_FOLIO_SVC_POST_CASH_PAYMENT_MISSING_HOUSE_ACCOUNT = 1;
	RESERVATION_FOLIO_SVC_POST_CASH_PAYMENT_INVALID_AMOUNT = 2;
}

message ReservationFolioSvcPostCashPaymentResponse {
	ReservationFolioSvcPostCashPaymentResult result = 1;
}

enum ReservationFolioSvcPostCheckPaymentResult {
	RESERVATION_FOLIO_SVC_POST_CHECK_PAYMENT_OK = 0;
	RESERVATION_FOLIO_SVC_POST_CHECK_PAYMENT_MISSING_HOUSE_ACCOUNT = 1;
	RESERVATION_FOLIO_SVC_POST_CHECK_PAYMENT_INVALID_AMOUNT = 2;
}

message ReservationFolioSvcPostCheckPaymentResponse {
	ReservationFolioSvcPostCheckPaymentResult result = 1;
}

message ReservationFolioSvcPostCheckPaymentRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.primitive.MonetaryAmount amount = 2;
}

message CardAuthorizationFromStoredCardRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.money.cards.GuestPaymentCardIndicator card = 2;
	holms.types.primitive.MonetaryAmount amount = 3;
	holms.types.money.cards.CardSalePurpose purpose = 4;
}

message CardAuthorizationFromPresentCardRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	holms.types.primitive.MonetaryAmount amount = 2;
	holms.types.money.cards.CardSalePurpose purpose = 3;
}

message CardAuthorizationFromNotPresentCardRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.money.cards.NotPresentPaymentCard card = 2;
	holms.types.primitive.MonetaryAmount amount = 3;
	holms.types.money.cards.CardSalePurpose purpose = 4;
}

enum ReservationFolioSvcPostCardPaymentResult {
	RESERVATION_FOLIO_SVC_POST_CARD_PAYMENT_OK = 0;
	RESERVATION_FOLIO_SVC_POST_CARD_PAYMENT_MISSING_HOUSE_ACCOUNT = 1;
	RESERVATION_FOLIO_SVC_POST_CARD_PAYMENT_MISSING_ASSET_ACCOUNT = 2;
	RESERVATION_FOLIO_SVC_POST_CARD_PAYMENT_INVALID_AMOUNT = 3;
	RESERVATION_FOLIO_SVC_POST_CARD_PAYMENT_AUTHORIZATION_UNAVAILABLE = 4;
	RESERVATION_FOLIO_SVC_POST_CARD_PAYMENT_REJECTED_BY_PROCESSOR = 5;
}

message ReservationFolioSvcPostCardPaymentResponse {
	ReservationFolioSvcPostCardPaymentResult result = 1;
}

message ReservationFolioSvcPostCardPaymentRequest {
	holms.types.booking.indicators.ReservationIndicator reservation = 1;
	holms.types.money.cards.transactions.PaymentCardSaleIndicator sale = 2;
	holms.types.primitive.MonetaryAmount amount = 3;
	holms.types.money.cards.CardSalePurpose purpose = 4;
}

message ReservationFolioSvcPostCashPaymentRequest {
	holms.types.primitive.MonetaryAmount amount_paid = 1;
	holms.types.booking.indicators.ReservationIndicator reservation = 2;
}

message ReservationFolioSvcGetOnFileCardsResponse {
	repeated holms.types.money.cards.GuestPaymentCard cards = 1;
}

message ReservationFolioSvcPostLodgingChargeCorrectionRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	string description = 2;
	.holms.types.primitive.MonetaryAmount adjustment_subtotal = 3;
	bool adjustment_taken_from_guest = 4;
}

message ReservationFolioSvcPostIncidentalChargeCorrectionRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.supply.incidental_items.IncidentalItemIndicator incidental_item = 2;
	string description = 3;
	.holms.types.primitive.MonetaryAmount adjustment_subtotal = 4;
	bool adjustment_taken_from_guest = 5;
}

message ReservationFolioSvcPostMiscChargeCorrectionRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	string description = 2;
	.holms.types.primitive.MonetaryAmount adjustment_subtotal = 3;
	bool adjustment_taken_from_guest = 4;
}

message ReservationFolioSvcPaymentCardRefundRequest {
	holms.types.booking.indicators.ReservationIndicator reservation = 1;
	holms.types.primitive.MonetaryAmount amount = 2;
	holms.types.money.cards.GuestPaymentCardIndicator card = 3;
	string description = 4;
}

enum ReservationFolioSvcRefundResult {
	RESERVATION_FOLIO_SVC_REFUND_SUCCESS = 0;
	RESERVATION_FOLIO_SVC_REFUND_EXCEEDS_LIMIT = 1;
	RESERVATION_FOLIO_SVC_REFUND_UNKNOWN_FAILURE = 2;
}

message ReservationFolioSvcRefundResponse {
	ReservationFolioSvcRefundResult result = 1;
}

enum ReservationFolioSvcAuthorizationModificationResult {
	RESERVATION_FOLIO_SVC_AUTHORIZATION_MODIFICATION_SUCCESS = 0;
	RESERVATION_FOLIO_SVC_AUTHORIZATION_MODIFICATION_SALE_NOT_FOUND = 1;
	RESERVATION_FOLIO_SVC_AUTHORIZATION_MODIFICATION_UNKNOWN_FAILURE = 2;
	RESERVATION_FOLIO_SVC_AUTHORIZATION_MODIFICATION_DECLINED = 3;
}

message ReservationFolioSvcAuthorizationModificationResponse {
	ReservationFolioSvcAuthorizationModificationResult result = 1;
}

message ReservationFolioSvcAuthorizationModificationRequest {
	holms.types.money.cards.transactions.PaymentCardSaleIndicator sale = 1;
	holms.types.primitive.MonetaryAmount change_amount = 2;
	holms.types.money.cards.CardSalePurpose purpose = 3;
}

enum ReservationFolioSvcCancelPaymentResponseResult {
	RESERVATION_FOLIO_SVC_CANCEL_PAYMENT_SUCCESS = 0;
	RESERVATION_FOLIO_SVC_CANCEL_PAYMENT_UNKNOWN_FAILURE = 1;
	RESERVATION_FOLIO_SVC_CANCEL_PAYMENT_SALE_NOT_FOUND = 2;
	RESERVATION_FOLIO_SVC_CANCEL_PAYMENT_REJECTED_BY_PROCESSOR = 3;
	RESERVATION_FOLIO_SVC_CANCEL_PAYMENT_INVALID_STATE = 4;
}

message ReservationFolioSvcCancelPaymentResponse {
	ReservationFolioSvcCancelPaymentResponseResult result = 1;
}

service ReservationFolioSvc {
	// Get info about the folio
	rpc GetReservationFolioState(.holms.types.booking.indicators.ReservationIndicator)
		returns(ReservationFolioSvcGetFolioStateResponsev2);
	rpc GetOnFileCards(holms.types.booking.indicators.ReservationIndicator) 
		returns(ReservationFolioSvcGetOnFileCardsResponse);
	rpc GetFolioSummaries(ReservationFolioSvcGetSummariesRequest)
		returns(ReservationFolioSvcGetSummariesResponse);

	// New activity
	// Attach new sale to this reservation
	rpc AddCardAuthorizationFromStoredCard(CardAuthorizationFromStoredCardRequest)
		returns (.holms.types.money.cards.transactions.CardAuthorizationResponse);
	rpc AddCardAuthorizationFromPresentedCard(CardAuthorizationFromPresentCardRequest)
		returns (.holms.types.money.cards.transactions.CardAuthorizationResponse);
	rpc AddCardAuthorizationFromNotPresentCard(CardAuthorizationFromNotPresentCardRequest)
		returns (.holms.types.money.cards.transactions.CardAuthorizationResponse);
	// Attach new refund to this reservation
	rpc RefundTokenizedCard(ReservationFolioSvcPaymentCardRefundRequest)
		returns (ReservationFolioSvcRefundResponse);
		
	rpc ChangeAuthorizationAmount(ReservationFolioSvcAuthorizationModificationRequest)
		returns (ReservationFolioSvcAuthorizationModificationResponse);
	
	// Make payment to this reservation folio
	rpc PostCardPayment(ReservationFolioSvcPostCardPaymentRequest)
		returns (ReservationFolioSvcPostCardPaymentResponse);
	rpc PostCheckPayment(ReservationFolioSvcPostCheckPaymentRequest)
		returns (ReservationFolioSvcPostCheckPaymentResponse);
	rpc PostCashPayment(ReservationFolioSvcPostCashPaymentRequest)
		returns (ReservationFolioSvcPostCashPaymentResponse);

	// Post a correction to the reservation folio
	rpc PostLodgingChargeCorrection (ReservationFolioSvcPostLodgingChargeCorrectionRequest)
		returns (google.protobuf.Empty);
	rpc PostIncidentalChargeCorrection (ReservationFolioSvcPostIncidentalChargeCorrectionRequest)
		returns (google.protobuf.Empty);
	rpc PostMiscChargeCorrection (ReservationFolioSvcPostMiscChargeCorrectionRequest)
		returns (google.protobuf.Empty);
	rpc CancelPayment(holms.types.money.cards.transactions.PaymentCardSaleIndicator)
		returns (ReservationFolioSvcCancelPaymentResponse);

}

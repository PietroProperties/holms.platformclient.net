syntax = "proto3";

package holms.types.booking.rpc;
option csharp_namespace = "HOLMS.Types.Folio.RPC";
option go_package = "folio/rpc";

import "primitive/monetary_amount.proto";
import "booking/guarantees/card_guarantee_tender_result.proto";
import "booking/indicators/reservation_indicator.proto";
import "money/cards/customer_payment_card_indicator.proto";
import "money/cards/not_present_payment_card.proto";

message ResGSvcTenderCheckGuaranteeRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.primitive.MonetaryAmount amount_tendered = 2;
	string check_number = 3;
}

message ResGSvcTenderCheckGuaranteeResponse {
	bool result = 1;
}

message ResGSvcTenderNewNotPresentCardGuaranteeRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.money.cards.NotPresentPaymentCard card = 2;
}

message ResGSvcTenderStoredNotPresentCardGuaranteeRequest {
	.holms.types.booking.indicators.ReservationIndicator reservation = 1;
	.holms.types.money.cards.CustomerPaymentCardIndicator card = 2;
}

message ResGSvcTenderNotPresentCardGuaranteeResponse {
	.holms.types.booking.guarantees.CardGuaranteeTenderResult result = 1;
}

message ResGSvcPreTenderStatus {
	.holms.types.primitive.MonetaryAmount remaining_amount = 1;
	bool is_due = 2;
}

service ReservationGuaranteeSvc {
	rpc GetPreTenderStatus (.holms.types.booking.indicators.ReservationIndicator)
		returns (ResGSvcPreTenderStatus);

	rpc TenderCheckGuarantee (ResGSvcTenderCheckGuaranteeRequest)
		returns (ResGSvcTenderCheckGuaranteeResponse);

	rpc TenderNewNotPresentCardGuarantee (ResGSvcTenderNewNotPresentCardGuaranteeRequest)
		returns (ResGSvcTenderNotPresentCardGuaranteeResponse);

	rpc TenderStoredNotPresentCardGuarantee (ResGSvcTenderStoredNotPresentCardGuaranteeRequest)
		returns (ResGSvcTenderNotPresentCardGuaranteeResponse);
}


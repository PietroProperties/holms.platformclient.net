syntax = "proto3";

package holms.types.supply.rpc;
option csharp_namespace = "HOLMS.Types.Supply.RPC";

import "booking/indicators/group_booking_indicator.proto";
import "google/protobuf/empty.proto";
import "supply/group_booking_hold.proto";
import "supply/snapshot/group_booking_quantity_snapshot.proto";
import "supply/hold_adjustment.proto";
import "supply/maintenance_hold_indicator.proto";
import "booking/reservations/reservation_management_hold.proto";

message HoldsSvcAdjustManagementHoldsRequest {
	repeated .holms.types.supply.HoldAdjustment hold_adjustments = 2;
}

message HoldsSvcGetGroupBookingHoldsResponse {
	repeated .holms.types.supply.GroupBookingHold group_booking_holds = 1;
}

enum HoldsSvcCreateMaintenanceHoldResult {
	CREATE_MAINTENANCE_HOLD_SUCCESS = 0;
	CREATE_MAINTENANCE_HOLD_ROOM_TYPE_NOT_FOUND = 1;
	CREATE_MAINTENANCE_HOLD_NO_AVAILABILITY = 2;
	CREATE_MAINTENANCE_HOLD_HOLD_DROP_REQUIRED = 3;
}

message HoldsSvcCreateMaintenanceHoldResponse {
	HoldsSvcCreateMaintenanceHoldResult result = 1;
	.holms.types.supply.MaintenanceHoldIndicator maintenance_hold = 2;
}

enum HoldsSvcUpdateMaintenanceHoldResult {
	UPDATE_MAINTENANCE_HOLD_SUCCESS = 0;
	UPDATE_MAINTENANCE_HOLD_MISSING_HOLD = 1;
	UPDATE_MAINTENANCE_HOLD_ROOM_TYPE_NOT_FOUND = 2;
	UPDATE_MAINTENANCE_HOLD_NO_AVAILABILITY = 3;
	UPDATE_MAINTENANCE_HOLD_HOLD_DROP_REQUIRED = 4;
}

message HoldsSvcUpdateMaintenanceHoldResponse {
	HoldsSvcUpdateMaintenanceHoldResult result = 1;
	.holms.types.supply.MaintenanceHoldIndicator maintenance_hold = 2;
}

enum HoldsSvcDeleteMaintenanceHoldResult {
	DELETE_MAINTENANCE_HOLD_SUCCESS = 0;
	DELETE_MAINTENANCE_HOLD_MISSING_HOLD = 1;
}

message HoldsSvcDeleteMaintenanceHoldResponse {
	HoldsSvcDeleteMaintenanceHoldResult result = 1;
	.holms.types.supply.MaintenanceHoldIndicator maintenance_hold = 3;
}

message HoldsSvcGbQtySnapRq {
	repeated .holms.types.booking.indicators.GroupBookingIndicator bookings = 1;
}

message HoldsSvcGbQtySnapRsp {
	repeated .holms.types.supply.snapshot.GroupBookingQuantitySnapshot snapshots = 1;
}

service HoldsSvc {
	rpc GetGroupBookingsQuantitySnapshot(HoldsSvcGbQtySnapRq)
		returns (HoldsSvcGbQtySnapRsp);
	rpc AdjustManagementHolds(HoldsSvcAdjustManagementHoldsRequest) 
		returns (google.protobuf.Empty);
	rpc GetGroupBookingHolds(holms.types.booking.indicators.GroupBookingIndicator) 
		returns (HoldsSvcGetGroupBookingHoldsResponse);
	rpc AddReservationManagementHolds(holms.types.booking.reservations.ReservationWithManagementHold) 
		returns (google.protobuf.Empty);
}


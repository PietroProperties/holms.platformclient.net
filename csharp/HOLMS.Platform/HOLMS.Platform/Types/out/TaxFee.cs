// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/accounting/tax_fee.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Money.Accounting {

  /// <summary>Holder for reflection information generated from money/accounting/tax_fee.proto</summary>
  public static partial class TaxFeeReflection {

    #region Descriptor
    /// <summary>File descriptor for money/accounting/tax_fee.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxFeeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5tb25leS9hY2NvdW50aW5nL3RheF9mZWUucHJvdG8SHGhvbG1zLnR5cGVz",
            "Lm1vbmV5LmFjY291bnRpbmcaKG1vbmV5L2FjY291bnRpbmcvYWNjb3VudF9p",
            "bmRpY2F0b3IucHJvdG8aJ21vbmV5L2FjY291bnRpbmcvdGF4X2ZlZV9jYXRl",
            "Z29yeS5wcm90bxoobW9uZXkvYWNjb3VudGluZy90YXhfZmVlX2luZGljYXRv",
            "ci5wcm90bxohcHJpbWl0aXZlL2ZpeGVkX3BvaW50X3JhdGlvLnByb3RvIqcC",
            "CgZUYXhGZWUSQAoJZW50aXR5X2lkGAEgASgLMi0uaG9sbXMudHlwZXMubW9u",
            "ZXkuYWNjb3VudGluZy5UYXhGZWVJbmRpY2F0b3ISEwoLZGVzY3JpcHRpb24Y",
            "AiABKAkSOAoIdGF4X3JhdGUYAyABKAsyJi5ob2xtcy50eXBlcy5wcmltaXRp",
            "dmUuRml4ZWRQb2ludFJhdGlvEj4KCGNhdGVnb3J5GAQgASgOMiwuaG9sbXMu",
            "dHlwZXMubW9uZXkuYWNjb3VudGluZy5UYXhGZWVDYXRlZ29yeRJMChRsaWFi",
            "aWxpdHlfYWNjb3VudF9pZBgFIAEoCzIuLmhvbG1zLnR5cGVzLm1vbmV5LmFj",
            "Y291bnRpbmcuQWNjb3VudEluZGljYXRvckIxWhBtb25leS9hY2NvdW50aW5n",
            "qgIcSE9MTVMuVHlwZXMuTW9uZXkuQWNjb3VudGluZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Money.Accounting.AccountIndicatorReflection.Descriptor, global::HOLMS.Types.Money.Accounting.TaxFeeCategoryReflection.Descriptor, global::HOLMS.Types.Money.Accounting.TaxFeeIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.FixedPointRatioReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.Accounting.TaxFee), global::HOLMS.Types.Money.Accounting.TaxFee.Parser, new[]{ "EntityId", "Description", "TaxRate", "Category", "LiabilityAccountId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TaxFee : pb::IMessage<TaxFee> {
    private static readonly pb::MessageParser<TaxFee> _parser = new pb::MessageParser<TaxFee>(() => new TaxFee());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.Accounting.TaxFeeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxFee(TaxFee other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      description_ = other.description_;
      TaxRate = other.taxRate_ != null ? other.TaxRate.Clone() : null;
      category_ = other.category_;
      LiabilityAccountId = other.liabilityAccountId_ != null ? other.LiabilityAccountId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxFee Clone() {
      return new TaxFee(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Money.Accounting.TaxFeeIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.TaxFeeIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tax_rate" field.</summary>
    public const int TaxRateFieldNumber = 3;
    private global::HOLMS.Types.Primitive.FixedPointRatio taxRate_;
    /// <summary>
    ///  Encode a tax rate. 0=0%, 1000000=100%
    ///  It's "parts per million", we used an int to make it exact
    ///  A customer needed four digits of decimal precision on a percentage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.FixedPointRatio TaxRate {
      get { return taxRate_; }
      set {
        taxRate_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 4;
    private global::HOLMS.Types.Money.Accounting.TaxFeeCategory category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.TaxFeeCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "liability_account_id" field.</summary>
    public const int LiabilityAccountIdFieldNumber = 5;
    private global::HOLMS.Types.Money.Accounting.AccountIndicator liabilityAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.AccountIndicator LiabilityAccountId {
      get { return liabilityAccountId_; }
      set {
        liabilityAccountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(TaxRate, other.TaxRate)) return false;
      if (Category != other.Category) return false;
      if (!object.Equals(LiabilityAccountId, other.LiabilityAccountId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (taxRate_ != null) hash ^= TaxRate.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (liabilityAccountId_ != null) hash ^= LiabilityAccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (taxRate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TaxRate);
      }
      if (Category != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Category);
      }
      if (liabilityAccountId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LiabilityAccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (taxRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaxRate);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (liabilityAccountId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiabilityAccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxFee other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Money.Accounting.TaxFeeIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.taxRate_ != null) {
        if (taxRate_ == null) {
          taxRate_ = new global::HOLMS.Types.Primitive.FixedPointRatio();
        }
        TaxRate.MergeFrom(other.TaxRate);
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.liabilityAccountId_ != null) {
        if (liabilityAccountId_ == null) {
          liabilityAccountId_ = new global::HOLMS.Types.Money.Accounting.AccountIndicator();
        }
        LiabilityAccountId.MergeFrom(other.LiabilityAccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Money.Accounting.TaxFeeIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (taxRate_ == null) {
              taxRate_ = new global::HOLMS.Types.Primitive.FixedPointRatio();
            }
            input.ReadMessage(taxRate_);
            break;
          }
          case 32: {
            category_ = (global::HOLMS.Types.Money.Accounting.TaxFeeCategory) input.ReadEnum();
            break;
          }
          case 42: {
            if (liabilityAccountId_ == null) {
              liabilityAccountId_ = new global::HOLMS.Types.Money.Accounting.AccountIndicator();
            }
            input.ReadMessage(liabilityAccountId_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

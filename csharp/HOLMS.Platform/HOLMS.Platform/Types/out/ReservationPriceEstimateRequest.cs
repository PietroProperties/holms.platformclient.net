// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/pricing/reservation_price_estimate_request.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.Pricing {

  /// <summary>Holder for reflection information generated from booking/pricing/reservation_price_estimate_request.proto</summary>
  public static partial class ReservationPriceEstimateRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/pricing/reservation_price_estimate_request.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReservationPriceEstimateRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhib29raW5nL3ByaWNpbmcvcmVzZXJ2YXRpb25fcHJpY2VfZXN0aW1hdGVf",
            "cmVxdWVzdC5wcm90bxIbaG9sbXMudHlwZXMuYm9va2luZy5wcmljaW5nGipw",
            "cmltaXRpdmUvcGJfaW5jbHVzaXZlX29wc2RhdGVfcmFuZ2UucHJvdG8aLmJv",
            "b2tpbmcvaW5kaWNhdG9ycy9yZXNlcnZhdGlvbl9pbmRpY2F0b3IucHJvdG8a",
            "JHN1cHBseS9xdWFsaWZpY2F0aW9uX2luZGljYXRvci5wcm90bxorc3VwcGx5",
            "L3Jvb21fdHlwZXMvcm9vbV90eXBlX2luZGljYXRvci5wcm90byL3AgofUmVz",
            "ZXJ2YXRpb25QcmljZUVzdGltYXRlUmVxdWVzdBIaChJyZXNlcnZhdGlvbl9l",
            "eGlzdHMYASABKAgSQgoKZGF0ZV9yYW5nZRgCIAEoCzIuLmhvbG1zLnR5cGVz",
            "LnByaW1pdGl2ZS5QYkluY2x1c2l2ZU9wc2RhdGVSYW5nZRJJCgtyZXNlcnZh",
            "dGlvbhgDIAEoCzI0LmhvbG1zLnR5cGVzLmJvb2tpbmcuaW5kaWNhdG9ycy5S",
            "ZXNlcnZhdGlvbkluZGljYXRvchJDCglyb29tX3R5cGUYBCABKAsyMC5ob2xt",
            "cy50eXBlcy5zdXBwbHkucm9vbV90eXBlcy5Sb29tVHlwZUluZGljYXRvchI1",
            "CgFxGAUgASgLMiouaG9sbXMudHlwZXMuc3VwcGx5LlF1YWxpZmljYXRpb25J",
            "bmRpY2F0b3ISEgoKdGF4X2V4ZW1wdBgGIAEoCBIZChFhZHVsdF9ndWVzdF9j",
            "b3VudBgHIAEoBUIvWg9ib29raW5nL3ByaWNpbmeqAhtIT0xNUy5UeXBlcy5C",
            "b29raW5nLlByaWNpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Supply.QualificationIndicatorReflection.Descriptor, global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.Pricing.ReservationPriceEstimateRequest), global::HOLMS.Types.Booking.Pricing.ReservationPriceEstimateRequest.Parser, new[]{ "ReservationExists", "DateRange", "Reservation", "RoomType", "Q", "TaxExempt", "AdultGuestCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReservationPriceEstimateRequest : pb::IMessage<ReservationPriceEstimateRequest> {
    private static readonly pb::MessageParser<ReservationPriceEstimateRequest> _parser = new pb::MessageParser<ReservationPriceEstimateRequest>(() => new ReservationPriceEstimateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservationPriceEstimateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.Pricing.ReservationPriceEstimateRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationPriceEstimateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationPriceEstimateRequest(ReservationPriceEstimateRequest other) : this() {
      reservationExists_ = other.reservationExists_;
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      Q = other.q_ != null ? other.Q.Clone() : null;
      taxExempt_ = other.taxExempt_;
      adultGuestCount_ = other.adultGuestCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationPriceEstimateRequest Clone() {
      return new ReservationPriceEstimateRequest(this);
    }

    /// <summary>Field number for the "reservation_exists" field.</summary>
    public const int ReservationExistsFieldNumber = 1;
    private bool reservationExists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReservationExists {
      get { return reservationExists_; }
      set {
        reservationExists_ = value;
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 2;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 3;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 4;
    private global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "q" field.</summary>
    public const int QFieldNumber = 5;
    private global::HOLMS.Types.Supply.QualificationIndicator q_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.QualificationIndicator Q {
      get { return q_; }
      set {
        q_ = value;
      }
    }

    /// <summary>Field number for the "tax_exempt" field.</summary>
    public const int TaxExemptFieldNumber = 6;
    private bool taxExempt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TaxExempt {
      get { return taxExempt_; }
      set {
        taxExempt_ = value;
      }
    }

    /// <summary>Field number for the "adult_guest_count" field.</summary>
    public const int AdultGuestCountFieldNumber = 7;
    private int adultGuestCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdultGuestCount {
      get { return adultGuestCount_; }
      set {
        adultGuestCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservationPriceEstimateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservationPriceEstimateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReservationExists != other.ReservationExists) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (!object.Equals(Reservation, other.Reservation)) return false;
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (!object.Equals(Q, other.Q)) return false;
      if (TaxExempt != other.TaxExempt) return false;
      if (AdultGuestCount != other.AdultGuestCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReservationExists != false) hash ^= ReservationExists.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (q_ != null) hash ^= Q.GetHashCode();
      if (TaxExempt != false) hash ^= TaxExempt.GetHashCode();
      if (AdultGuestCount != 0) hash ^= AdultGuestCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationExists != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReservationExists);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DateRange);
      }
      if (reservation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Reservation);
      }
      if (roomType_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomType);
      }
      if (q_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Q);
      }
      if (TaxExempt != false) {
        output.WriteRawTag(48);
        output.WriteBool(TaxExempt);
      }
      if (AdultGuestCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AdultGuestCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReservationExists != false) {
        size += 1 + 1;
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (q_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Q);
      }
      if (TaxExempt != false) {
        size += 1 + 1;
      }
      if (AdultGuestCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdultGuestCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservationPriceEstimateRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReservationExists != false) {
        ReservationExists = other.ReservationExists;
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.q_ != null) {
        if (q_ == null) {
          q_ = new global::HOLMS.Types.Supply.QualificationIndicator();
        }
        Q.MergeFrom(other.Q);
      }
      if (other.TaxExempt != false) {
        TaxExempt = other.TaxExempt;
      }
      if (other.AdultGuestCount != 0) {
        AdultGuestCount = other.AdultGuestCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationExists = input.ReadBool();
            break;
          }
          case 18: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
          case 26: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
          case 34: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 42: {
            if (q_ == null) {
              q_ = new global::HOLMS.Types.Supply.QualificationIndicator();
            }
            input.ReadMessage(q_);
            break;
          }
          case 48: {
            TaxExempt = input.ReadBool();
            break;
          }
          case 56: {
            AdultGuestCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

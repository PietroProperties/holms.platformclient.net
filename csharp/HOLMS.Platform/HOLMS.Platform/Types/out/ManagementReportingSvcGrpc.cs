// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting/rpc/management_reporting_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Reporting.RPC {
  public static class ManagementReportingSvc
  {
    static readonly string __ServiceName = "holms.types.reporting.rpc.ManagementReportingSvc";

    static readonly Marshaller<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest> __Marshaller_ManagmentReportingSvcBatchReportRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> __Marshaller_HtmlReportResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest> __Marshaller_ManagementReportingSvcHousekeeperManagementReportRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> __Method_GetManagementReportBatch = new Method<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetManagementReportBatch",
        __Marshaller_ManagmentReportingSvcBatchReportRequest,
        __Marshaller_HtmlReportResponse);

    static readonly Method<global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> __Method_GetCurrentHousekepperManagementReport = new Method<global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetCurrentHousekepperManagementReport",
        __Marshaller_ManagementReportingSvcHousekeeperManagementReportRequest,
        __Marshaller_HtmlReportResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ManagementReportingSvc</summary>
    public abstract class ManagementReportingSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> GetManagementReportBatch(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> GetCurrentHousekepperManagementReport(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ManagementReportingSvc</summary>
    public class ManagementReportingSvcClient : ClientBase<ManagementReportingSvcClient>
    {
      /// <summary>Creates a new client for ManagementReportingSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ManagementReportingSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ManagementReportingSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ManagementReportingSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ManagementReportingSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ManagementReportingSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse GetManagementReportBatch(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetManagementReportBatch(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse GetManagementReportBatch(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetManagementReportBatch, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> GetManagementReportBatchAsync(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetManagementReportBatchAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> GetManagementReportBatchAsync(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetManagementReportBatch, null, options, request);
      }
      public virtual global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse GetCurrentHousekepperManagementReport(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCurrentHousekepperManagementReport(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse GetCurrentHousekepperManagementReport(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCurrentHousekepperManagementReport, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> GetCurrentHousekepperManagementReportAsync(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCurrentHousekepperManagementReportAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> GetCurrentHousekepperManagementReportAsync(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCurrentHousekepperManagementReport, null, options, request);
      }
      protected override ManagementReportingSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ManagementReportingSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ManagementReportingSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetManagementReportBatch, serviceImpl.GetManagementReportBatch)
          .AddMethod(__Method_GetCurrentHousekepperManagementReport, serviceImpl.GetCurrentHousekepperManagementReport).Build();
    }

  }
}
#endregion

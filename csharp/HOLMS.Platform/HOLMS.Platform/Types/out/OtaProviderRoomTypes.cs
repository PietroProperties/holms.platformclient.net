// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/channels/ota_provider_room_types.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.Channels {

  /// <summary>Holder for reflection information generated from booking/channels/ota_provider_room_types.proto</summary>
  public static partial class OtaProviderRoomTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/channels/ota_provider_room_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OtaProviderRoomTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5ib29raW5nL2NoYW5uZWxzL290YV9wcm92aWRlcl9yb29tX3R5cGVzLnBy",
            "b3RvEhxob2xtcy50eXBlcy5ib29raW5nLmNoYW5uZWxzGjhib29raW5nL2No",
            "YW5uZWxzL290YV9wcm92aWRlcl9yb29tX3R5cGVzX2luZGljYXRvci5wcm90",
            "bxo1Ym9va2luZy9jaGFubmVscy9vdGFfY2hhbm5lbF9wcm92aWRlcl9pbmRp",
            "Y2F0b3IucHJvdG8aK3N1cHBseS9yb29tX3R5cGVzL3Jvb21fdHlwZV9pbmRp",
            "Y2F0b3IucHJvdG8igQIKFE9UQVByb3ZpZGVyUm9vbVR5cGVzEk0KCWVudGl0",
            "eV9pZBgBIAEoCzI6LmhvbG1zLnR5cGVzLmJvb2tpbmcuY2hhbm5lbHMuT1RB",
            "UHJvdmlkZXJSb29tVHlwZUluZGljYXRvchJSCg9vdGFfcHJvdmlkZXJfaWQY",
            "AiABKAsyOS5ob2xtcy50eXBlcy5ib29raW5nLmNoYW5uZWxzLk9UQUNoYW5u",
            "ZWxQcm92aWRlckluZGljYXRvchJGCgxyb29tX3R5cGVfaWQYAyABKAsyMC5o",
            "b2xtcy50eXBlcy5zdXBwbHkucm9vbV90eXBlcy5Sb29tVHlwZUluZGljYXRv",
            "ckIxWhBib29raW5nL2NoYW5uZWxzqgIcSE9MTVMuVHlwZXMuQm9va2luZy5D",
            "aGFubmVsc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Channels.OtaProviderRoomTypesIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Channels.OtaChannelProviderIndicatorReflection.Descriptor, global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.Channels.OTAProviderRoomTypes), global::HOLMS.Types.Booking.Channels.OTAProviderRoomTypes.Parser, new[]{ "EntityId", "OtaProviderId", "RoomTypeId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OTAProviderRoomTypes : pb::IMessage<OTAProviderRoomTypes> {
    private static readonly pb::MessageParser<OTAProviderRoomTypes> _parser = new pb::MessageParser<OTAProviderRoomTypes>(() => new OTAProviderRoomTypes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OTAProviderRoomTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.Channels.OtaProviderRoomTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OTAProviderRoomTypes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OTAProviderRoomTypes(OTAProviderRoomTypes other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      OtaProviderId = other.otaProviderId_ != null ? other.OtaProviderId.Clone() : null;
      RoomTypeId = other.roomTypeId_ != null ? other.RoomTypeId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OTAProviderRoomTypes Clone() {
      return new OTAProviderRoomTypes(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Booking.Channels.OTAProviderRoomTypeIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Channels.OTAProviderRoomTypeIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "ota_provider_id" field.</summary>
    public const int OtaProviderIdFieldNumber = 2;
    private global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator otaProviderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator OtaProviderId {
      get { return otaProviderId_; }
      set {
        otaProviderId_ = value;
      }
    }

    /// <summary>Field number for the "room_type_id" field.</summary>
    public const int RoomTypeIdFieldNumber = 3;
    private global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator roomTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator RoomTypeId {
      get { return roomTypeId_; }
      set {
        roomTypeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OTAProviderRoomTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OTAProviderRoomTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (!object.Equals(OtaProviderId, other.OtaProviderId)) return false;
      if (!object.Equals(RoomTypeId, other.RoomTypeId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (otaProviderId_ != null) hash ^= OtaProviderId.GetHashCode();
      if (roomTypeId_ != null) hash ^= RoomTypeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (otaProviderId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OtaProviderId);
      }
      if (roomTypeId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomTypeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (otaProviderId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtaProviderId);
      }
      if (roomTypeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomTypeId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OTAProviderRoomTypes other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Booking.Channels.OTAProviderRoomTypeIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.otaProviderId_ != null) {
        if (otaProviderId_ == null) {
          otaProviderId_ = new global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator();
        }
        OtaProviderId.MergeFrom(other.OtaProviderId);
      }
      if (other.roomTypeId_ != null) {
        if (roomTypeId_ == null) {
          roomTypeId_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
        }
        RoomTypeId.MergeFrom(other.RoomTypeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Booking.Channels.OTAProviderRoomTypeIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 18: {
            if (otaProviderId_ == null) {
              otaProviderId_ = new global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator();
            }
            input.ReadMessage(otaProviderId_);
            break;
          }
          case 26: {
            if (roomTypeId_ == null) {
              roomTypeId_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
            }
            input.ReadMessage(roomTypeId_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

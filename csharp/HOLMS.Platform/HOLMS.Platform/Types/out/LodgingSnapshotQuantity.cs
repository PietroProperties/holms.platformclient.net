// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/snapshot/lodging_snapshot_quantity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Supply.Snapshot {

  /// <summary>Holder for reflection information generated from supply/snapshot/lodging_snapshot_quantity.proto</summary>
  public static partial class LodgingSnapshotQuantityReflection {

    #region Descriptor
    /// <summary>File descriptor for supply/snapshot/lodging_snapshot_quantity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LodgingSnapshotQuantityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9zdXBwbHkvc25hcHNob3QvbG9kZ2luZ19zbmFwc2hvdF9xdWFudGl0eS5w",
            "cm90bxIbaG9sbXMudHlwZXMuc3VwcGx5LnNuYXBzaG90Is0BChdMb2RnaW5n",
            "U25hcHNob3RRdWFudGl0eRITCgtiYXNlX3N1cHBseRgBIAEoBRIRCglhdmFp",
            "bGFibGUYAiABKAUSEAoIcmVzZXJ2ZWQYAyABKAUSGAoQbWFuYWdlbWVudF9o",
            "b2xkcxgEIAEoBRIZChFtYWludGVuYW5jZV9ob2xkcxgFIAEoBRIhChlncm91",
            "cF9ib29raW5nX2hvbGRzX3RvdGFsGAYgASgFEiAKGGdyb3VwX2Jvb2tpbmdf",
            "aG9sZHNfdXNlZBgHIAEoBUIvWg9zdXBwbHkvc25hcHNob3SqAhtIT0xNUy5U",
            "eXBlcy5TdXBwbHkuU25hcHNob3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotQuantity), global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotQuantity.Parser, new[]{ "BaseSupply", "Available", "Reserved", "ManagementHolds", "MaintenanceHolds", "GroupBookingHoldsTotal", "GroupBookingHoldsUsed" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LodgingSnapshotQuantity : pb::IMessage<LodgingSnapshotQuantity> {
    private static readonly pb::MessageParser<LodgingSnapshotQuantity> _parser = new pb::MessageParser<LodgingSnapshotQuantity>(() => new LodgingSnapshotQuantity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LodgingSnapshotQuantity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotQuantityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LodgingSnapshotQuantity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LodgingSnapshotQuantity(LodgingSnapshotQuantity other) : this() {
      baseSupply_ = other.baseSupply_;
      available_ = other.available_;
      reserved_ = other.reserved_;
      managementHolds_ = other.managementHolds_;
      maintenanceHolds_ = other.maintenanceHolds_;
      groupBookingHoldsTotal_ = other.groupBookingHoldsTotal_;
      groupBookingHoldsUsed_ = other.groupBookingHoldsUsed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LodgingSnapshotQuantity Clone() {
      return new LodgingSnapshotQuantity(this);
    }

    /// <summary>Field number for the "base_supply" field.</summary>
    public const int BaseSupplyFieldNumber = 1;
    private int baseSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseSupply {
      get { return baseSupply_; }
      set {
        baseSupply_ = value;
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 2;
    private int available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 3;
    private int reserved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reserved {
      get { return reserved_; }
      set {
        reserved_ = value;
      }
    }

    /// <summary>Field number for the "management_holds" field.</summary>
    public const int ManagementHoldsFieldNumber = 4;
    private int managementHolds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManagementHolds {
      get { return managementHolds_; }
      set {
        managementHolds_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_holds" field.</summary>
    public const int MaintenanceHoldsFieldNumber = 5;
    private int maintenanceHolds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaintenanceHolds {
      get { return maintenanceHolds_; }
      set {
        maintenanceHolds_ = value;
      }
    }

    /// <summary>Field number for the "group_booking_holds_total" field.</summary>
    public const int GroupBookingHoldsTotalFieldNumber = 6;
    private int groupBookingHoldsTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupBookingHoldsTotal {
      get { return groupBookingHoldsTotal_; }
      set {
        groupBookingHoldsTotal_ = value;
      }
    }

    /// <summary>Field number for the "group_booking_holds_used" field.</summary>
    public const int GroupBookingHoldsUsedFieldNumber = 7;
    private int groupBookingHoldsUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupBookingHoldsUsed {
      get { return groupBookingHoldsUsed_; }
      set {
        groupBookingHoldsUsed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LodgingSnapshotQuantity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LodgingSnapshotQuantity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseSupply != other.BaseSupply) return false;
      if (Available != other.Available) return false;
      if (Reserved != other.Reserved) return false;
      if (ManagementHolds != other.ManagementHolds) return false;
      if (MaintenanceHolds != other.MaintenanceHolds) return false;
      if (GroupBookingHoldsTotal != other.GroupBookingHoldsTotal) return false;
      if (GroupBookingHoldsUsed != other.GroupBookingHoldsUsed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseSupply != 0) hash ^= BaseSupply.GetHashCode();
      if (Available != 0) hash ^= Available.GetHashCode();
      if (Reserved != 0) hash ^= Reserved.GetHashCode();
      if (ManagementHolds != 0) hash ^= ManagementHolds.GetHashCode();
      if (MaintenanceHolds != 0) hash ^= MaintenanceHolds.GetHashCode();
      if (GroupBookingHoldsTotal != 0) hash ^= GroupBookingHoldsTotal.GetHashCode();
      if (GroupBookingHoldsUsed != 0) hash ^= GroupBookingHoldsUsed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseSupply != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BaseSupply);
      }
      if (Available != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Available);
      }
      if (Reserved != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reserved);
      }
      if (ManagementHolds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ManagementHolds);
      }
      if (MaintenanceHolds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaintenanceHolds);
      }
      if (GroupBookingHoldsTotal != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GroupBookingHoldsTotal);
      }
      if (GroupBookingHoldsUsed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GroupBookingHoldsUsed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseSupply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseSupply);
      }
      if (Available != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Available);
      }
      if (Reserved != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reserved);
      }
      if (ManagementHolds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManagementHolds);
      }
      if (MaintenanceHolds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaintenanceHolds);
      }
      if (GroupBookingHoldsTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupBookingHoldsTotal);
      }
      if (GroupBookingHoldsUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupBookingHoldsUsed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LodgingSnapshotQuantity other) {
      if (other == null) {
        return;
      }
      if (other.BaseSupply != 0) {
        BaseSupply = other.BaseSupply;
      }
      if (other.Available != 0) {
        Available = other.Available;
      }
      if (other.Reserved != 0) {
        Reserved = other.Reserved;
      }
      if (other.ManagementHolds != 0) {
        ManagementHolds = other.ManagementHolds;
      }
      if (other.MaintenanceHolds != 0) {
        MaintenanceHolds = other.MaintenanceHolds;
      }
      if (other.GroupBookingHoldsTotal != 0) {
        GroupBookingHoldsTotal = other.GroupBookingHoldsTotal;
      }
      if (other.GroupBookingHoldsUsed != 0) {
        GroupBookingHoldsUsed = other.GroupBookingHoldsUsed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BaseSupply = input.ReadInt32();
            break;
          }
          case 16: {
            Available = input.ReadInt32();
            break;
          }
          case 24: {
            Reserved = input.ReadInt32();
            break;
          }
          case 32: {
            ManagementHolds = input.ReadInt32();
            break;
          }
          case 40: {
            MaintenanceHolds = input.ReadInt32();
            break;
          }
          case 48: {
            GroupBookingHoldsTotal = input.ReadInt32();
            break;
          }
          case 56: {
            GroupBookingHoldsUsed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/reservations/reservation_note.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.Reservations {

  /// <summary>Holder for reflection information generated from booking/reservations/reservation_note.proto</summary>
  public static partial class ReservationNoteReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/reservations/reservation_note.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReservationNoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citib29raW5nL3Jlc2VydmF0aW9ucy9yZXNlcnZhdGlvbl9ub3RlLnByb3Rv",
            "EiBob2xtcy50eXBlcy5ib29raW5nLnJlc2VydmF0aW9ucxouYm9va2luZy9p",
            "bmRpY2F0b3JzL3Jlc2VydmF0aW9uX2luZGljYXRvci5wcm90bxozYm9va2lu",
            "Zy9pbmRpY2F0b3JzL3Jlc2VydmF0aW9uX25vdGVfaW5kaWNhdG9yLnByb3Rv",
            "GjVvcGVyYXRpb25zL25vdGVfcmVxdWVzdHMvbm90ZV9yZXF1ZXN0X2luZGlj",
            "YXRvci5wcm90bxosb3BlcmF0aW9ucy9ub3RlX3JlcXVlc3RzL25vdGVfY2F0",
            "ZWdvcnkucHJvdG8aHXByaW1pdGl2ZS9wYl9sb2NhbF9kYXRlLnByb3RvGjdz",
            "dXBwbHkvaW5jaWRlbnRhbF9pdGVtcy9pbmNpZGVudGFsX2l0ZW1faW5kaWNh",
            "dG9yLnByb3RvGj5ib29raW5nL2luZGljYXRvcnMvaW5jaWRlbnRhbF9pdGVt",
            "X3Jlc2VydmF0aW9uX2luZGljYXRvci5wcm90byKoBQoPUmVzZXJ2YXRpb25O",
            "b3RlEksKCWVudGl0eV9pZBgBIAEoCzI4LmhvbG1zLnR5cGVzLmJvb2tpbmcu",
            "aW5kaWNhdG9ycy5SZXNlcnZhdGlvbk5vdGVJbmRpY2F0b3ISTwoLc291cmNl",
            "X25vdGUYAiABKAsyOi5ob2xtcy50eXBlcy5vcGVyYXRpb25zLm5vdGVfcmVx",
            "dWVzdHMuTm90ZVJlcXVlc3RJbmRpY2F0b3ISRAoIY2F0ZWdvcnkYAyABKA4y",
            "Mi5ob2xtcy50eXBlcy5vcGVyYXRpb25zLm5vdGVfcmVxdWVzdHMuTm90ZUNh",
            "dGVnb3J5EhcKD2FkZGl0aW9uYWxfbm90ZRgEIAEoCRIfChdpbmNsdWRlX29u",
            "X2NvbmZpcm1hdGlvbhgFIAEoCBJRChNsb2RnaW5nX3Jlc2VydmF0aW9uGAYg",
            "ASgLMjQuaG9sbXMudHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLlJlc2VydmF0",
            "aW9uSW5kaWNhdG9yEhsKE3NvdXJjZV9ub3RlX3N1YmplY3QYByABKAkSFAoM",
            "aXNfZnVsZmlsbGVkGAggASgIEiEKGXBlcm1hbmVudF9vbl9ndWVzdF9yZWNv",
            "cmQYCSABKAgSWAoSaW5jaWRlbnRhbF9pdGVtX2lkGAogASgLMjwuaG9sbXMu",
            "dHlwZXMuc3VwcGx5LmluY2lkZW50YWxfaXRlbXMuSW5jaWRlbnRhbEl0ZW1J",
            "bmRpY2F0b3ISOgoOaW5jX3N0YXJ0X2RhdGUYCyABKAsyIi5ob2xtcy50eXBl",
            "cy5wcmltaXRpdmUuUGJMb2NhbERhdGUSOAoMaW5jX2VuZF9kYXRlGAwgASgL",
            "MiIuaG9sbXMudHlwZXMucHJpbWl0aXZlLlBiTG9jYWxEYXRlQjlaFGJvb2tp",
            "bmcvcmVzZXJ2YXRpb25zqgIgSE9MTVMuVHlwZXMuQm9va2luZy5SZXNlcnZh",
            "dGlvbnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.ReservationNoteIndicatorReflection.Descriptor, global::HOLMS.Types.Operations.NoteRequests.NoteRequestIndicatorReflection.Descriptor, global::HOLMS.Types.Operations.NoteRequests.NoteCategoryReflection.Descriptor, global::HOLMS.Types.Primitive.PbLocalDateReflection.Descriptor, global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.IncidentalItemReservationIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.Reservations.ReservationNote), global::HOLMS.Types.Booking.Reservations.ReservationNote.Parser, new[]{ "EntityId", "SourceNote", "Category", "AdditionalNote", "IncludeOnConfirmation", "LodgingReservation", "SourceNoteSubject", "IsFulfilled", "PermanentOnGuestRecord", "IncidentalItemId", "IncStartDate", "IncEndDate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReservationNote : pb::IMessage<ReservationNote> {
    private static readonly pb::MessageParser<ReservationNote> _parser = new pb::MessageParser<ReservationNote>(() => new ReservationNote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservationNote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.Reservations.ReservationNoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationNote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationNote(ReservationNote other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      SourceNote = other.sourceNote_ != null ? other.SourceNote.Clone() : null;
      category_ = other.category_;
      additionalNote_ = other.additionalNote_;
      includeOnConfirmation_ = other.includeOnConfirmation_;
      LodgingReservation = other.lodgingReservation_ != null ? other.LodgingReservation.Clone() : null;
      sourceNoteSubject_ = other.sourceNoteSubject_;
      isFulfilled_ = other.isFulfilled_;
      permanentOnGuestRecord_ = other.permanentOnGuestRecord_;
      IncidentalItemId = other.incidentalItemId_ != null ? other.IncidentalItemId.Clone() : null;
      IncStartDate = other.incStartDate_ != null ? other.IncStartDate.Clone() : null;
      IncEndDate = other.incEndDate_ != null ? other.IncEndDate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationNote Clone() {
      return new ReservationNote(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationNoteIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationNoteIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "source_note" field.</summary>
    public const int SourceNoteFieldNumber = 2;
    private global::HOLMS.Types.Operations.NoteRequests.NoteRequestIndicator sourceNote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.NoteRequests.NoteRequestIndicator SourceNote {
      get { return sourceNote_; }
      set {
        sourceNote_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private global::HOLMS.Types.Operations.NoteRequests.NoteCategory category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.NoteRequests.NoteCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "additional_note" field.</summary>
    public const int AdditionalNoteFieldNumber = 4;
    private string additionalNote_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdditionalNote {
      get { return additionalNote_; }
      set {
        additionalNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_on_confirmation" field.</summary>
    public const int IncludeOnConfirmationFieldNumber = 5;
    private bool includeOnConfirmation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeOnConfirmation {
      get { return includeOnConfirmation_; }
      set {
        includeOnConfirmation_ = value;
      }
    }

    /// <summary>Field number for the "lodging_reservation" field.</summary>
    public const int LodgingReservationFieldNumber = 6;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator lodgingReservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator LodgingReservation {
      get { return lodgingReservation_; }
      set {
        lodgingReservation_ = value;
      }
    }

    /// <summary>Field number for the "source_note_subject" field.</summary>
    public const int SourceNoteSubjectFieldNumber = 7;
    private string sourceNoteSubject_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceNoteSubject {
      get { return sourceNoteSubject_; }
      set {
        sourceNoteSubject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_fulfilled" field.</summary>
    public const int IsFulfilledFieldNumber = 8;
    private bool isFulfilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFulfilled {
      get { return isFulfilled_; }
      set {
        isFulfilled_ = value;
      }
    }

    /// <summary>Field number for the "permanent_on_guest_record" field.</summary>
    public const int PermanentOnGuestRecordFieldNumber = 9;
    private bool permanentOnGuestRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PermanentOnGuestRecord {
      get { return permanentOnGuestRecord_; }
      set {
        permanentOnGuestRecord_ = value;
      }
    }

    /// <summary>Field number for the "incidental_item_id" field.</summary>
    public const int IncidentalItemIdFieldNumber = 10;
    private global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator incidentalItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator IncidentalItemId {
      get { return incidentalItemId_; }
      set {
        incidentalItemId_ = value;
      }
    }

    /// <summary>Field number for the "inc_start_date" field.</summary>
    public const int IncStartDateFieldNumber = 11;
    private global::HOLMS.Types.Primitive.PbLocalDate incStartDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbLocalDate IncStartDate {
      get { return incStartDate_; }
      set {
        incStartDate_ = value;
      }
    }

    /// <summary>Field number for the "inc_end_date" field.</summary>
    public const int IncEndDateFieldNumber = 12;
    private global::HOLMS.Types.Primitive.PbLocalDate incEndDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbLocalDate IncEndDate {
      get { return incEndDate_; }
      set {
        incEndDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservationNote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservationNote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (!object.Equals(SourceNote, other.SourceNote)) return false;
      if (Category != other.Category) return false;
      if (AdditionalNote != other.AdditionalNote) return false;
      if (IncludeOnConfirmation != other.IncludeOnConfirmation) return false;
      if (!object.Equals(LodgingReservation, other.LodgingReservation)) return false;
      if (SourceNoteSubject != other.SourceNoteSubject) return false;
      if (IsFulfilled != other.IsFulfilled) return false;
      if (PermanentOnGuestRecord != other.PermanentOnGuestRecord) return false;
      if (!object.Equals(IncidentalItemId, other.IncidentalItemId)) return false;
      if (!object.Equals(IncStartDate, other.IncStartDate)) return false;
      if (!object.Equals(IncEndDate, other.IncEndDate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (sourceNote_ != null) hash ^= SourceNote.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (AdditionalNote.Length != 0) hash ^= AdditionalNote.GetHashCode();
      if (IncludeOnConfirmation != false) hash ^= IncludeOnConfirmation.GetHashCode();
      if (lodgingReservation_ != null) hash ^= LodgingReservation.GetHashCode();
      if (SourceNoteSubject.Length != 0) hash ^= SourceNoteSubject.GetHashCode();
      if (IsFulfilled != false) hash ^= IsFulfilled.GetHashCode();
      if (PermanentOnGuestRecord != false) hash ^= PermanentOnGuestRecord.GetHashCode();
      if (incidentalItemId_ != null) hash ^= IncidentalItemId.GetHashCode();
      if (incStartDate_ != null) hash ^= IncStartDate.GetHashCode();
      if (incEndDate_ != null) hash ^= IncEndDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (sourceNote_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SourceNote);
      }
      if (Category != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Category);
      }
      if (AdditionalNote.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AdditionalNote);
      }
      if (IncludeOnConfirmation != false) {
        output.WriteRawTag(40);
        output.WriteBool(IncludeOnConfirmation);
      }
      if (lodgingReservation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LodgingReservation);
      }
      if (SourceNoteSubject.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SourceNoteSubject);
      }
      if (IsFulfilled != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsFulfilled);
      }
      if (PermanentOnGuestRecord != false) {
        output.WriteRawTag(72);
        output.WriteBool(PermanentOnGuestRecord);
      }
      if (incidentalItemId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(IncidentalItemId);
      }
      if (incStartDate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(IncStartDate);
      }
      if (incEndDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(IncEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (sourceNote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceNote);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (AdditionalNote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdditionalNote);
      }
      if (IncludeOnConfirmation != false) {
        size += 1 + 1;
      }
      if (lodgingReservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LodgingReservation);
      }
      if (SourceNoteSubject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceNoteSubject);
      }
      if (IsFulfilled != false) {
        size += 1 + 1;
      }
      if (PermanentOnGuestRecord != false) {
        size += 1 + 1;
      }
      if (incidentalItemId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncidentalItemId);
      }
      if (incStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncStartDate);
      }
      if (incEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncEndDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservationNote other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Booking.Indicators.ReservationNoteIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.sourceNote_ != null) {
        if (sourceNote_ == null) {
          sourceNote_ = new global::HOLMS.Types.Operations.NoteRequests.NoteRequestIndicator();
        }
        SourceNote.MergeFrom(other.SourceNote);
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.AdditionalNote.Length != 0) {
        AdditionalNote = other.AdditionalNote;
      }
      if (other.IncludeOnConfirmation != false) {
        IncludeOnConfirmation = other.IncludeOnConfirmation;
      }
      if (other.lodgingReservation_ != null) {
        if (lodgingReservation_ == null) {
          lodgingReservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        LodgingReservation.MergeFrom(other.LodgingReservation);
      }
      if (other.SourceNoteSubject.Length != 0) {
        SourceNoteSubject = other.SourceNoteSubject;
      }
      if (other.IsFulfilled != false) {
        IsFulfilled = other.IsFulfilled;
      }
      if (other.PermanentOnGuestRecord != false) {
        PermanentOnGuestRecord = other.PermanentOnGuestRecord;
      }
      if (other.incidentalItemId_ != null) {
        if (incidentalItemId_ == null) {
          incidentalItemId_ = new global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator();
        }
        IncidentalItemId.MergeFrom(other.IncidentalItemId);
      }
      if (other.incStartDate_ != null) {
        if (incStartDate_ == null) {
          incStartDate_ = new global::HOLMS.Types.Primitive.PbLocalDate();
        }
        IncStartDate.MergeFrom(other.IncStartDate);
      }
      if (other.incEndDate_ != null) {
        if (incEndDate_ == null) {
          incEndDate_ = new global::HOLMS.Types.Primitive.PbLocalDate();
        }
        IncEndDate.MergeFrom(other.IncEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Booking.Indicators.ReservationNoteIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 18: {
            if (sourceNote_ == null) {
              sourceNote_ = new global::HOLMS.Types.Operations.NoteRequests.NoteRequestIndicator();
            }
            input.ReadMessage(sourceNote_);
            break;
          }
          case 24: {
            category_ = (global::HOLMS.Types.Operations.NoteRequests.NoteCategory) input.ReadEnum();
            break;
          }
          case 34: {
            AdditionalNote = input.ReadString();
            break;
          }
          case 40: {
            IncludeOnConfirmation = input.ReadBool();
            break;
          }
          case 50: {
            if (lodgingReservation_ == null) {
              lodgingReservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(lodgingReservation_);
            break;
          }
          case 58: {
            SourceNoteSubject = input.ReadString();
            break;
          }
          case 64: {
            IsFulfilled = input.ReadBool();
            break;
          }
          case 72: {
            PermanentOnGuestRecord = input.ReadBool();
            break;
          }
          case 82: {
            if (incidentalItemId_ == null) {
              incidentalItemId_ = new global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator();
            }
            input.ReadMessage(incidentalItemId_);
            break;
          }
          case 90: {
            if (incStartDate_ == null) {
              incStartDate_ = new global::HOLMS.Types.Primitive.PbLocalDate();
            }
            input.ReadMessage(incStartDate_);
            break;
          }
          case 98: {
            if (incEndDate_ == null) {
              incEndDate_ = new global::HOLMS.Types.Primitive.PbLocalDate();
            }
            input.ReadMessage(incEndDate_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opex_logging/operational_exception_list.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.OpExLogging {

  /// <summary>Holder for reflection information generated from opex_logging/operational_exception_list.proto</summary>
  public static partial class OperationalExceptionListReflection {

    #region Descriptor
    /// <summary>File descriptor for opex_logging/operational_exception_list.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OperationalExceptionListReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1vcGV4X2xvZ2dpbmcvb3BlcmF0aW9uYWxfZXhjZXB0aW9uX2xpc3QucHJv",
            "dG8SGGhvbG1zLnR5cGVzLm9wZXhfbG9nZ2luZxoob3BleF9sb2dnaW5nL29w",
            "ZXJhdGlvbmFsX2V4Y2VwdGlvbi5wcm90byJeChhPcGVyYXRpb25hbEV4Y2Vw",
            "dGlvbkxpc3QSQgoKZXhjZXB0aW9ucxgBIAMoCzIuLmhvbG1zLnR5cGVzLm9w",
            "ZXhfbG9nZ2luZy5PcGVyYXRpb25hbEV4Y2VwdGlvbkIaqgIXSE9MTVMuVHlw",
            "ZXMuT3BFeExvZ2dpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.OpExLogging.OperationalExceptionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.OpExLogging.OperationalExceptionList), global::HOLMS.Types.OpExLogging.OperationalExceptionList.Parser, new[]{ "Exceptions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OperationalExceptionList : pb::IMessage<OperationalExceptionList> {
    private static readonly pb::MessageParser<OperationalExceptionList> _parser = new pb::MessageParser<OperationalExceptionList>(() => new OperationalExceptionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationalExceptionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.OpExLogging.OperationalExceptionListReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationalExceptionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationalExceptionList(OperationalExceptionList other) : this() {
      exceptions_ = other.exceptions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationalExceptionList Clone() {
      return new OperationalExceptionList(this);
    }

    /// <summary>Field number for the "exceptions" field.</summary>
    public const int ExceptionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.OpExLogging.OperationalException> _repeated_exceptions_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.OpExLogging.OperationalException.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.OpExLogging.OperationalException> exceptions_ = new pbc::RepeatedField<global::HOLMS.Types.OpExLogging.OperationalException>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.OpExLogging.OperationalException> Exceptions {
      get { return exceptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationalExceptionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationalExceptionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exceptions_.Equals(other.exceptions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exceptions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      exceptions_.WriteTo(output, _repeated_exceptions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += exceptions_.CalculateSize(_repeated_exceptions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationalExceptionList other) {
      if (other == null) {
        return;
      }
      exceptions_.Add(other.exceptions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            exceptions_.AddEntriesFrom(input, _repeated_exceptions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

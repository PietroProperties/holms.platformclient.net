// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting/rpc/operations_reporting_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Reporting.RPC {
  public static class OperationsReportingSvc
  {
    static readonly string __ServiceName = "holms.types.reporting.rpc.OperationsReportingSvc";

    static readonly Marshaller<global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest> __Marshaller_OperationsReportingSvcEmailRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> __Marshaller_HtmlReportResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> __Method_SendOpExReportEmailForLastDay = new Method<global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse>(
        MethodType.Unary,
        __ServiceName,
        "SendOpExReportEmailForLastDay",
        __Marshaller_OperationsReportingSvcEmailRequest,
        __Marshaller_HtmlReportResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OperationsReportingSvc</summary>
    public abstract class OperationsReportingSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> SendOpExReportEmailForLastDay(global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OperationsReportingSvc</summary>
    public class OperationsReportingSvcClient : ClientBase<OperationsReportingSvcClient>
    {
      /// <summary>Creates a new client for OperationsReportingSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OperationsReportingSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OperationsReportingSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OperationsReportingSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OperationsReportingSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OperationsReportingSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse SendOpExReportEmailForLastDay(global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendOpExReportEmailForLastDay(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse SendOpExReportEmailForLastDay(global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendOpExReportEmailForLastDay, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> SendOpExReportEmailForLastDayAsync(global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendOpExReportEmailForLastDayAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.Outputs.HtmlReportResponse> SendOpExReportEmailForLastDayAsync(global::HOLMS.Types.Reporting.RPC.OperationsReportingSvcEmailRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendOpExReportEmailForLastDay, null, options, request);
      }
      protected override OperationsReportingSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OperationsReportingSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(OperationsReportingSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendOpExReportEmailForLastDay, serviceImpl.SendOpExReportEmailForLastDay).Build();
    }

  }
}
#endregion

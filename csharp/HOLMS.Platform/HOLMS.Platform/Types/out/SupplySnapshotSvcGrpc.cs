// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/supply_snapshot_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Supply.RPC {
  public static class SupplySnapshotSvc
  {
    static readonly string __ServiceName = "holms.types.supply.rpc.SupplySnapshotSvc";

    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq> __Marshaller_SupplySnapshotSvcSnapshotWithTagsReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> __Marshaller_LodgingSnapshotRequestResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse> __Marshaller_LodgingQuantitySnapshotRequestResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest> __Marshaller_IncidentalSnapshotRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse> __Marshaller_IncidentalsSnapshotRequestResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq, global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> __Method_LodgingSnapshotFromTagsStrict = new Method<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq, global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse>(
        MethodType.Unary,
        __ServiceName,
        "LodgingSnapshotFromTagsStrict",
        __Marshaller_SupplySnapshotSvcSnapshotWithTagsReq,
        __Marshaller_LodgingSnapshotRequestResponse);

    static readonly Method<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq, global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> __Method_LodgingSnapshotFromTagsMerged = new Method<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq, global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse>(
        MethodType.Unary,
        __ServiceName,
        "LodgingSnapshotFromTagsMerged",
        __Marshaller_SupplySnapshotSvcSnapshotWithTagsReq,
        __Marshaller_LodgingSnapshotRequestResponse);

    static readonly Method<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq, global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse> __Method_LodgingQuantitySnapshotFromTagsStrict = new Method<global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq, global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse>(
        MethodType.Unary,
        __ServiceName,
        "LodgingQuantitySnapshotFromTagsStrict",
        __Marshaller_SupplySnapshotSvcSnapshotWithTagsReq,
        __Marshaller_LodgingQuantitySnapshotRequestResponse);

    static readonly Method<global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest, global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse> __Method_IncidentalSnapshot = new Method<global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest, global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse>(
        MethodType.Unary,
        __ServiceName,
        "IncidentalSnapshot",
        __Marshaller_IncidentalSnapshotRequest,
        __Marshaller_IncidentalsSnapshotRequestResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SupplySnapshotSvc</summary>
    public abstract class SupplySnapshotSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> LodgingSnapshotFromTagsStrict(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> LodgingSnapshotFromTagsMerged(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse> LodgingQuantitySnapshotFromTagsStrict(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse> IncidentalSnapshot(global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SupplySnapshotSvc</summary>
    public class SupplySnapshotSvcClient : ClientBase<SupplySnapshotSvcClient>
    {
      /// <summary>Creates a new client for SupplySnapshotSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SupplySnapshotSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SupplySnapshotSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SupplySnapshotSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SupplySnapshotSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SupplySnapshotSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse LodgingSnapshotFromTagsStrict(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LodgingSnapshotFromTagsStrict(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse LodgingSnapshotFromTagsStrict(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LodgingSnapshotFromTagsStrict, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> LodgingSnapshotFromTagsStrictAsync(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LodgingSnapshotFromTagsStrictAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> LodgingSnapshotFromTagsStrictAsync(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LodgingSnapshotFromTagsStrict, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse LodgingSnapshotFromTagsMerged(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LodgingSnapshotFromTagsMerged(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse LodgingSnapshotFromTagsMerged(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LodgingSnapshotFromTagsMerged, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> LodgingSnapshotFromTagsMergedAsync(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LodgingSnapshotFromTagsMergedAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.LodgingSnapshotRequestResponse> LodgingSnapshotFromTagsMergedAsync(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LodgingSnapshotFromTagsMerged, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse LodgingQuantitySnapshotFromTagsStrict(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LodgingQuantitySnapshotFromTagsStrict(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse LodgingQuantitySnapshotFromTagsStrict(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LodgingQuantitySnapshotFromTagsStrict, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse> LodgingQuantitySnapshotFromTagsStrictAsync(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LodgingQuantitySnapshotFromTagsStrictAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.LodgingQuantitySnapshotRequestResponse> LodgingQuantitySnapshotFromTagsStrictAsync(global::HOLMS.Types.Supply.RPC.SupplySnapshotSvcSnapshotWithTagsReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LodgingQuantitySnapshotFromTagsStrict, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse IncidentalSnapshot(global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IncidentalSnapshot(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse IncidentalSnapshot(global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncidentalSnapshot, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse> IncidentalSnapshotAsync(global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IncidentalSnapshotAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.Snapshot.IncidentalsSnapshotRequestResponse> IncidentalSnapshotAsync(global::HOLMS.Types.Supply.RPC.IncidentalSnapshotRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncidentalSnapshot, null, options, request);
      }
      protected override SupplySnapshotSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SupplySnapshotSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SupplySnapshotSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LodgingSnapshotFromTagsStrict, serviceImpl.LodgingSnapshotFromTagsStrict)
          .AddMethod(__Method_LodgingSnapshotFromTagsMerged, serviceImpl.LodgingSnapshotFromTagsMerged)
          .AddMethod(__Method_LodgingQuantitySnapshotFromTagsStrict, serviceImpl.LodgingQuantitySnapshotFromTagsStrict)
          .AddMethod(__Method_IncidentalSnapshot, serviceImpl.IncidentalSnapshot).Build();
    }

  }
}
#endregion

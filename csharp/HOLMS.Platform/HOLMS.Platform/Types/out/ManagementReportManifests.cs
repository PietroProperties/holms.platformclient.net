// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting/input_params/management_report_manifests.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Reporting.ReportParams {

  /// <summary>Holder for reflection information generated from reporting/input_params/management_report_manifests.proto</summary>
  public static partial class ManagementReportManifestsReflection {

    #region Descriptor
    /// <summary>File descriptor for reporting/input_params/management_report_manifests.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ManagementReportManifestsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjhyZXBvcnRpbmcvaW5wdXRfcGFyYW1zL21hbmFnZW1lbnRfcmVwb3J0X21h",
            "bmlmZXN0cy5wcm90bxIiaG9sbXMudHlwZXMucmVwb3J0aW5nLmlucHV0X3Bh",
            "cmFtcxoqcHJpbWl0aXZlL3BiX2luY2x1c2l2ZV9vcHNkYXRlX3JhbmdlLnBy",
            "b3RvGhtwcmltaXRpdmUvcGJfaW50ZXJ2YWwucHJvdG8i2gMKI01hbmFnZW1l",
            "bnRDdXJyZW50VGltZVJlcG9ydE1hbmlmZXN0Eh8KF3Vub2NjdXBpZWRfcm9v",
            "bXNfcmVwb3J0GAEgASgIEhwKFGZvbGlvX2JhbGFuY2VfcmVwb3J0GAIgASgI",
            "EiMKG2xvZGdpbmdfdmVyaWZpY2F0aW9uX3JlcG9ydBgDIAEoCBIYChBjb21w",
            "X3N0YXlfcmVwb3J0GAQgASgIEhwKFHByb3Bfc3RhdHNfeWVzdGVyZGF5GAUg",
            "ASgIEh4KFnByb3Bfc3RhdHNfdHJhaWxpbmdfN2QYBiABKAgSHwoXcHJvcF9z",
            "dGF0c190cmFpbGluZ18yOGQYByABKAgSIQoZcHJvcF9zdGF0c19sYXN0X2Z1",
            "bGxfd2VlaxgIIAEoCBIiChpwcm9wX3N0YXRzX2xhc3RfZnVsbF9tb250aBgJ",
            "IAEoCBIhChlwcm9wX3N0YXRzX2xhc3RfZnVsbF95ZWFyGAogASgIEkUKDWN1",
            "c3RvbV9yYW5nZXMYCyADKAsyLi5ob2xtcy50eXBlcy5wcmltaXRpdmUuUGJJ",
            "bmNsdXNpdmVPcHNkYXRlUmFuZ2USJQoddmFjYW50X2FuZF9jbGVhbl9yb29t",
            "c19yZXBvcnQYDCABKAgivQIKJk1hbmFnZW1lbnRDbG9ja1RpbWVSYW5nZVJl",
            "cG9ydE1hbmlmZXN0EjoKD3JlcG9ydGluZ19yYW5nZRgBIAEoCzIhLmhvbG1z",
            "LnR5cGVzLnByaW1pdGl2ZS5QYkludGVydmFsEh0KFWZvbGlvX3BheW1lbnRz",
            "X3JlcG9ydBgCIAEoCBIeChZjYWxsX2FjY291bnRpbmdfcmVwb3J0GAMgASgI",
            "EiYKHmxlZGdlcl9hY3Rpdml0eV9zdW1tYXJ5X3JlcG9ydBgEIAEoCBIlCh1s",
            "ZWRnZXJfam91cm5hbF9lbnRyaWVzX3JlcG9ydBgFIAEoCBIhChlib29raW5n",
            "c19ieV9wZXJpb2RfcmVwb3J0GAYgASgIEiYKHmZvbGlvX2ltbWVkaWF0ZV9j",
            "aGFyZ2VzX3JlcG9ydBgHIAEoCCLIAwokTWFuYWdlbWVudE9wc2RhdGVSYW5n",
            "ZVJlcG9ydE1hbmlmZXN0EkIKCmRhdGVfcmFuZ2UYASABKAsyLi5ob2xtcy50",
            "eXBlcy5wcmltaXRpdmUuUGJJbmNsdXNpdmVPcHNkYXRlUmFuZ2USIgoacm9v",
            "bV91c2FnZV9kZXRhaWxlZF9yZXBvcnQYAiABKAgSIQoZcm9vbV91c2FnZV9z",
            "dW1tYXJ5X3JlcG9ydBgDIAEoCBIpCiFwbGFubmVkX2xvZGdpbmdfcmV2ZW51",
            "ZV9ieV9zb3VyY2UYBCABKAgSIgoacHJvcGVydHlfc3RhdGlzdGljc19yZXBv",
            "cnQYBSABKAgSIgoaZm9saW9fZ3Jvc3NfY2hhcmdlc19yZXBvcnQYBiABKAgS",
            "IQoZdGF4X2V4ZW1wdF9zdW1tYXJ5X3JlcG9ydBgHIAEoCBIgChh0YXhfZXhl",
            "bXB0X2RldGFpbF9yZXBvcnQYCCABKAgSIgoaZm9saW9fZ3Jvc3Nfc3VtbWFy",
            "eV9yZXBvcnQYCSABKAgSFgoOc3VtbWFyeV9yZXBvcnQYCiABKAgSIQoZdW51",
            "c2VkX2dyb3VwX2hvbGRzX3JlcG9ydBgLIAEoCEIlqgIiSE9MTVMuVHlwZXMu",
            "UmVwb3J0aW5nLlJlcG9ydFBhcmFtc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Primitive.PbIntervalReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Reporting.ReportParams.ManagementCurrentTimeReportManifest), global::HOLMS.Types.Reporting.ReportParams.ManagementCurrentTimeReportManifest.Parser, new[]{ "UnoccupiedRoomsReport", "FolioBalanceReport", "LodgingVerificationReport", "CompStayReport", "PropStatsYesterday", "PropStatsTrailing7D", "PropStatsTrailing28D", "PropStatsLastFullWeek", "PropStatsLastFullMonth", "PropStatsLastFullYear", "CustomRanges", "VacantAndCleanRoomsReport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Reporting.ReportParams.ManagementClockTimeRangeReportManifest), global::HOLMS.Types.Reporting.ReportParams.ManagementClockTimeRangeReportManifest.Parser, new[]{ "ReportingRange", "FolioPaymentsReport", "CallAccountingReport", "LedgerActivitySummaryReport", "LedgerJournalEntriesReport", "BookingsByPeriodReport", "FolioImmediateChargesReport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Reporting.ReportParams.ManagementOpsdateRangeReportManifest), global::HOLMS.Types.Reporting.ReportParams.ManagementOpsdateRangeReportManifest.Parser, new[]{ "DateRange", "RoomUsageDetailedReport", "RoomUsageSummaryReport", "PlannedLodgingRevenueBySource", "PropertyStatisticsReport", "FolioGrossChargesReport", "TaxExemptSummaryReport", "TaxExemptDetailReport", "FolioGrossSummaryReport", "SummaryReport", "UnusedGroupHoldsReport" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ManagementCurrentTimeReportManifest : pb::IMessage<ManagementCurrentTimeReportManifest> {
    private static readonly pb::MessageParser<ManagementCurrentTimeReportManifest> _parser = new pb::MessageParser<ManagementCurrentTimeReportManifest>(() => new ManagementCurrentTimeReportManifest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagementCurrentTimeReportManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Reporting.ReportParams.ManagementReportManifestsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementCurrentTimeReportManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementCurrentTimeReportManifest(ManagementCurrentTimeReportManifest other) : this() {
      unoccupiedRoomsReport_ = other.unoccupiedRoomsReport_;
      folioBalanceReport_ = other.folioBalanceReport_;
      lodgingVerificationReport_ = other.lodgingVerificationReport_;
      compStayReport_ = other.compStayReport_;
      propStatsYesterday_ = other.propStatsYesterday_;
      propStatsTrailing7D_ = other.propStatsTrailing7D_;
      propStatsTrailing28D_ = other.propStatsTrailing28D_;
      propStatsLastFullWeek_ = other.propStatsLastFullWeek_;
      propStatsLastFullMonth_ = other.propStatsLastFullMonth_;
      propStatsLastFullYear_ = other.propStatsLastFullYear_;
      customRanges_ = other.customRanges_.Clone();
      vacantAndCleanRoomsReport_ = other.vacantAndCleanRoomsReport_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementCurrentTimeReportManifest Clone() {
      return new ManagementCurrentTimeReportManifest(this);
    }

    /// <summary>Field number for the "unoccupied_rooms_report" field.</summary>
    public const int UnoccupiedRoomsReportFieldNumber = 1;
    private bool unoccupiedRoomsReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnoccupiedRoomsReport {
      get { return unoccupiedRoomsReport_; }
      set {
        unoccupiedRoomsReport_ = value;
      }
    }

    /// <summary>Field number for the "folio_balance_report" field.</summary>
    public const int FolioBalanceReportFieldNumber = 2;
    private bool folioBalanceReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FolioBalanceReport {
      get { return folioBalanceReport_; }
      set {
        folioBalanceReport_ = value;
      }
    }

    /// <summary>Field number for the "lodging_verification_report" field.</summary>
    public const int LodgingVerificationReportFieldNumber = 3;
    private bool lodgingVerificationReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LodgingVerificationReport {
      get { return lodgingVerificationReport_; }
      set {
        lodgingVerificationReport_ = value;
      }
    }

    /// <summary>Field number for the "comp_stay_report" field.</summary>
    public const int CompStayReportFieldNumber = 4;
    private bool compStayReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompStayReport {
      get { return compStayReport_; }
      set {
        compStayReport_ = value;
      }
    }

    /// <summary>Field number for the "prop_stats_yesterday" field.</summary>
    public const int PropStatsYesterdayFieldNumber = 5;
    private bool propStatsYesterday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropStatsYesterday {
      get { return propStatsYesterday_; }
      set {
        propStatsYesterday_ = value;
      }
    }

    /// <summary>Field number for the "prop_stats_trailing_7d" field.</summary>
    public const int PropStatsTrailing7DFieldNumber = 6;
    private bool propStatsTrailing7D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropStatsTrailing7D {
      get { return propStatsTrailing7D_; }
      set {
        propStatsTrailing7D_ = value;
      }
    }

    /// <summary>Field number for the "prop_stats_trailing_28d" field.</summary>
    public const int PropStatsTrailing28DFieldNumber = 7;
    private bool propStatsTrailing28D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropStatsTrailing28D {
      get { return propStatsTrailing28D_; }
      set {
        propStatsTrailing28D_ = value;
      }
    }

    /// <summary>Field number for the "prop_stats_last_full_week" field.</summary>
    public const int PropStatsLastFullWeekFieldNumber = 8;
    private bool propStatsLastFullWeek_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropStatsLastFullWeek {
      get { return propStatsLastFullWeek_; }
      set {
        propStatsLastFullWeek_ = value;
      }
    }

    /// <summary>Field number for the "prop_stats_last_full_month" field.</summary>
    public const int PropStatsLastFullMonthFieldNumber = 9;
    private bool propStatsLastFullMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropStatsLastFullMonth {
      get { return propStatsLastFullMonth_; }
      set {
        propStatsLastFullMonth_ = value;
      }
    }

    /// <summary>Field number for the "prop_stats_last_full_year" field.</summary>
    public const int PropStatsLastFullYearFieldNumber = 10;
    private bool propStatsLastFullYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropStatsLastFullYear {
      get { return propStatsLastFullYear_; }
      set {
        propStatsLastFullYear_ = value;
      }
    }

    /// <summary>Field number for the "custom_ranges" field.</summary>
    public const int CustomRangesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange> _repeated_customRanges_codec
        = pb::FieldCodec.ForMessage(90, global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange> customRanges_ = new pbc::RepeatedField<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange> CustomRanges {
      get { return customRanges_; }
    }

    /// <summary>Field number for the "vacant_and_clean_rooms_report" field.</summary>
    public const int VacantAndCleanRoomsReportFieldNumber = 12;
    private bool vacantAndCleanRoomsReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VacantAndCleanRoomsReport {
      get { return vacantAndCleanRoomsReport_; }
      set {
        vacantAndCleanRoomsReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagementCurrentTimeReportManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagementCurrentTimeReportManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnoccupiedRoomsReport != other.UnoccupiedRoomsReport) return false;
      if (FolioBalanceReport != other.FolioBalanceReport) return false;
      if (LodgingVerificationReport != other.LodgingVerificationReport) return false;
      if (CompStayReport != other.CompStayReport) return false;
      if (PropStatsYesterday != other.PropStatsYesterday) return false;
      if (PropStatsTrailing7D != other.PropStatsTrailing7D) return false;
      if (PropStatsTrailing28D != other.PropStatsTrailing28D) return false;
      if (PropStatsLastFullWeek != other.PropStatsLastFullWeek) return false;
      if (PropStatsLastFullMonth != other.PropStatsLastFullMonth) return false;
      if (PropStatsLastFullYear != other.PropStatsLastFullYear) return false;
      if(!customRanges_.Equals(other.customRanges_)) return false;
      if (VacantAndCleanRoomsReport != other.VacantAndCleanRoomsReport) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnoccupiedRoomsReport != false) hash ^= UnoccupiedRoomsReport.GetHashCode();
      if (FolioBalanceReport != false) hash ^= FolioBalanceReport.GetHashCode();
      if (LodgingVerificationReport != false) hash ^= LodgingVerificationReport.GetHashCode();
      if (CompStayReport != false) hash ^= CompStayReport.GetHashCode();
      if (PropStatsYesterday != false) hash ^= PropStatsYesterday.GetHashCode();
      if (PropStatsTrailing7D != false) hash ^= PropStatsTrailing7D.GetHashCode();
      if (PropStatsTrailing28D != false) hash ^= PropStatsTrailing28D.GetHashCode();
      if (PropStatsLastFullWeek != false) hash ^= PropStatsLastFullWeek.GetHashCode();
      if (PropStatsLastFullMonth != false) hash ^= PropStatsLastFullMonth.GetHashCode();
      if (PropStatsLastFullYear != false) hash ^= PropStatsLastFullYear.GetHashCode();
      hash ^= customRanges_.GetHashCode();
      if (VacantAndCleanRoomsReport != false) hash ^= VacantAndCleanRoomsReport.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnoccupiedRoomsReport != false) {
        output.WriteRawTag(8);
        output.WriteBool(UnoccupiedRoomsReport);
      }
      if (FolioBalanceReport != false) {
        output.WriteRawTag(16);
        output.WriteBool(FolioBalanceReport);
      }
      if (LodgingVerificationReport != false) {
        output.WriteRawTag(24);
        output.WriteBool(LodgingVerificationReport);
      }
      if (CompStayReport != false) {
        output.WriteRawTag(32);
        output.WriteBool(CompStayReport);
      }
      if (PropStatsYesterday != false) {
        output.WriteRawTag(40);
        output.WriteBool(PropStatsYesterday);
      }
      if (PropStatsTrailing7D != false) {
        output.WriteRawTag(48);
        output.WriteBool(PropStatsTrailing7D);
      }
      if (PropStatsTrailing28D != false) {
        output.WriteRawTag(56);
        output.WriteBool(PropStatsTrailing28D);
      }
      if (PropStatsLastFullWeek != false) {
        output.WriteRawTag(64);
        output.WriteBool(PropStatsLastFullWeek);
      }
      if (PropStatsLastFullMonth != false) {
        output.WriteRawTag(72);
        output.WriteBool(PropStatsLastFullMonth);
      }
      if (PropStatsLastFullYear != false) {
        output.WriteRawTag(80);
        output.WriteBool(PropStatsLastFullYear);
      }
      customRanges_.WriteTo(output, _repeated_customRanges_codec);
      if (VacantAndCleanRoomsReport != false) {
        output.WriteRawTag(96);
        output.WriteBool(VacantAndCleanRoomsReport);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnoccupiedRoomsReport != false) {
        size += 1 + 1;
      }
      if (FolioBalanceReport != false) {
        size += 1 + 1;
      }
      if (LodgingVerificationReport != false) {
        size += 1 + 1;
      }
      if (CompStayReport != false) {
        size += 1 + 1;
      }
      if (PropStatsYesterday != false) {
        size += 1 + 1;
      }
      if (PropStatsTrailing7D != false) {
        size += 1 + 1;
      }
      if (PropStatsTrailing28D != false) {
        size += 1 + 1;
      }
      if (PropStatsLastFullWeek != false) {
        size += 1 + 1;
      }
      if (PropStatsLastFullMonth != false) {
        size += 1 + 1;
      }
      if (PropStatsLastFullYear != false) {
        size += 1 + 1;
      }
      size += customRanges_.CalculateSize(_repeated_customRanges_codec);
      if (VacantAndCleanRoomsReport != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagementCurrentTimeReportManifest other) {
      if (other == null) {
        return;
      }
      if (other.UnoccupiedRoomsReport != false) {
        UnoccupiedRoomsReport = other.UnoccupiedRoomsReport;
      }
      if (other.FolioBalanceReport != false) {
        FolioBalanceReport = other.FolioBalanceReport;
      }
      if (other.LodgingVerificationReport != false) {
        LodgingVerificationReport = other.LodgingVerificationReport;
      }
      if (other.CompStayReport != false) {
        CompStayReport = other.CompStayReport;
      }
      if (other.PropStatsYesterday != false) {
        PropStatsYesterday = other.PropStatsYesterday;
      }
      if (other.PropStatsTrailing7D != false) {
        PropStatsTrailing7D = other.PropStatsTrailing7D;
      }
      if (other.PropStatsTrailing28D != false) {
        PropStatsTrailing28D = other.PropStatsTrailing28D;
      }
      if (other.PropStatsLastFullWeek != false) {
        PropStatsLastFullWeek = other.PropStatsLastFullWeek;
      }
      if (other.PropStatsLastFullMonth != false) {
        PropStatsLastFullMonth = other.PropStatsLastFullMonth;
      }
      if (other.PropStatsLastFullYear != false) {
        PropStatsLastFullYear = other.PropStatsLastFullYear;
      }
      customRanges_.Add(other.customRanges_);
      if (other.VacantAndCleanRoomsReport != false) {
        VacantAndCleanRoomsReport = other.VacantAndCleanRoomsReport;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnoccupiedRoomsReport = input.ReadBool();
            break;
          }
          case 16: {
            FolioBalanceReport = input.ReadBool();
            break;
          }
          case 24: {
            LodgingVerificationReport = input.ReadBool();
            break;
          }
          case 32: {
            CompStayReport = input.ReadBool();
            break;
          }
          case 40: {
            PropStatsYesterday = input.ReadBool();
            break;
          }
          case 48: {
            PropStatsTrailing7D = input.ReadBool();
            break;
          }
          case 56: {
            PropStatsTrailing28D = input.ReadBool();
            break;
          }
          case 64: {
            PropStatsLastFullWeek = input.ReadBool();
            break;
          }
          case 72: {
            PropStatsLastFullMonth = input.ReadBool();
            break;
          }
          case 80: {
            PropStatsLastFullYear = input.ReadBool();
            break;
          }
          case 90: {
            customRanges_.AddEntriesFrom(input, _repeated_customRanges_codec);
            break;
          }
          case 96: {
            VacantAndCleanRoomsReport = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ManagementClockTimeRangeReportManifest : pb::IMessage<ManagementClockTimeRangeReportManifest> {
    private static readonly pb::MessageParser<ManagementClockTimeRangeReportManifest> _parser = new pb::MessageParser<ManagementClockTimeRangeReportManifest>(() => new ManagementClockTimeRangeReportManifest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagementClockTimeRangeReportManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Reporting.ReportParams.ManagementReportManifestsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementClockTimeRangeReportManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementClockTimeRangeReportManifest(ManagementClockTimeRangeReportManifest other) : this() {
      ReportingRange = other.reportingRange_ != null ? other.ReportingRange.Clone() : null;
      folioPaymentsReport_ = other.folioPaymentsReport_;
      callAccountingReport_ = other.callAccountingReport_;
      ledgerActivitySummaryReport_ = other.ledgerActivitySummaryReport_;
      ledgerJournalEntriesReport_ = other.ledgerJournalEntriesReport_;
      bookingsByPeriodReport_ = other.bookingsByPeriodReport_;
      folioImmediateChargesReport_ = other.folioImmediateChargesReport_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementClockTimeRangeReportManifest Clone() {
      return new ManagementClockTimeRangeReportManifest(this);
    }

    /// <summary>Field number for the "reporting_range" field.</summary>
    public const int ReportingRangeFieldNumber = 1;
    private global::HOLMS.Types.Primitive.PbInterval reportingRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInterval ReportingRange {
      get { return reportingRange_; }
      set {
        reportingRange_ = value;
      }
    }

    /// <summary>Field number for the "folio_payments_report" field.</summary>
    public const int FolioPaymentsReportFieldNumber = 2;
    private bool folioPaymentsReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FolioPaymentsReport {
      get { return folioPaymentsReport_; }
      set {
        folioPaymentsReport_ = value;
      }
    }

    /// <summary>Field number for the "call_accounting_report" field.</summary>
    public const int CallAccountingReportFieldNumber = 3;
    private bool callAccountingReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CallAccountingReport {
      get { return callAccountingReport_; }
      set {
        callAccountingReport_ = value;
      }
    }

    /// <summary>Field number for the "ledger_activity_summary_report" field.</summary>
    public const int LedgerActivitySummaryReportFieldNumber = 4;
    private bool ledgerActivitySummaryReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LedgerActivitySummaryReport {
      get { return ledgerActivitySummaryReport_; }
      set {
        ledgerActivitySummaryReport_ = value;
      }
    }

    /// <summary>Field number for the "ledger_journal_entries_report" field.</summary>
    public const int LedgerJournalEntriesReportFieldNumber = 5;
    private bool ledgerJournalEntriesReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LedgerJournalEntriesReport {
      get { return ledgerJournalEntriesReport_; }
      set {
        ledgerJournalEntriesReport_ = value;
      }
    }

    /// <summary>Field number for the "bookings_by_period_report" field.</summary>
    public const int BookingsByPeriodReportFieldNumber = 6;
    private bool bookingsByPeriodReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BookingsByPeriodReport {
      get { return bookingsByPeriodReport_; }
      set {
        bookingsByPeriodReport_ = value;
      }
    }

    /// <summary>Field number for the "folio_immediate_charges_report" field.</summary>
    public const int FolioImmediateChargesReportFieldNumber = 7;
    private bool folioImmediateChargesReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FolioImmediateChargesReport {
      get { return folioImmediateChargesReport_; }
      set {
        folioImmediateChargesReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagementClockTimeRangeReportManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagementClockTimeRangeReportManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReportingRange, other.ReportingRange)) return false;
      if (FolioPaymentsReport != other.FolioPaymentsReport) return false;
      if (CallAccountingReport != other.CallAccountingReport) return false;
      if (LedgerActivitySummaryReport != other.LedgerActivitySummaryReport) return false;
      if (LedgerJournalEntriesReport != other.LedgerJournalEntriesReport) return false;
      if (BookingsByPeriodReport != other.BookingsByPeriodReport) return false;
      if (FolioImmediateChargesReport != other.FolioImmediateChargesReport) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reportingRange_ != null) hash ^= ReportingRange.GetHashCode();
      if (FolioPaymentsReport != false) hash ^= FolioPaymentsReport.GetHashCode();
      if (CallAccountingReport != false) hash ^= CallAccountingReport.GetHashCode();
      if (LedgerActivitySummaryReport != false) hash ^= LedgerActivitySummaryReport.GetHashCode();
      if (LedgerJournalEntriesReport != false) hash ^= LedgerJournalEntriesReport.GetHashCode();
      if (BookingsByPeriodReport != false) hash ^= BookingsByPeriodReport.GetHashCode();
      if (FolioImmediateChargesReport != false) hash ^= FolioImmediateChargesReport.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reportingRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReportingRange);
      }
      if (FolioPaymentsReport != false) {
        output.WriteRawTag(16);
        output.WriteBool(FolioPaymentsReport);
      }
      if (CallAccountingReport != false) {
        output.WriteRawTag(24);
        output.WriteBool(CallAccountingReport);
      }
      if (LedgerActivitySummaryReport != false) {
        output.WriteRawTag(32);
        output.WriteBool(LedgerActivitySummaryReport);
      }
      if (LedgerJournalEntriesReport != false) {
        output.WriteRawTag(40);
        output.WriteBool(LedgerJournalEntriesReport);
      }
      if (BookingsByPeriodReport != false) {
        output.WriteRawTag(48);
        output.WriteBool(BookingsByPeriodReport);
      }
      if (FolioImmediateChargesReport != false) {
        output.WriteRawTag(56);
        output.WriteBool(FolioImmediateChargesReport);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reportingRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportingRange);
      }
      if (FolioPaymentsReport != false) {
        size += 1 + 1;
      }
      if (CallAccountingReport != false) {
        size += 1 + 1;
      }
      if (LedgerActivitySummaryReport != false) {
        size += 1 + 1;
      }
      if (LedgerJournalEntriesReport != false) {
        size += 1 + 1;
      }
      if (BookingsByPeriodReport != false) {
        size += 1 + 1;
      }
      if (FolioImmediateChargesReport != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagementClockTimeRangeReportManifest other) {
      if (other == null) {
        return;
      }
      if (other.reportingRange_ != null) {
        if (reportingRange_ == null) {
          reportingRange_ = new global::HOLMS.Types.Primitive.PbInterval();
        }
        ReportingRange.MergeFrom(other.ReportingRange);
      }
      if (other.FolioPaymentsReport != false) {
        FolioPaymentsReport = other.FolioPaymentsReport;
      }
      if (other.CallAccountingReport != false) {
        CallAccountingReport = other.CallAccountingReport;
      }
      if (other.LedgerActivitySummaryReport != false) {
        LedgerActivitySummaryReport = other.LedgerActivitySummaryReport;
      }
      if (other.LedgerJournalEntriesReport != false) {
        LedgerJournalEntriesReport = other.LedgerJournalEntriesReport;
      }
      if (other.BookingsByPeriodReport != false) {
        BookingsByPeriodReport = other.BookingsByPeriodReport;
      }
      if (other.FolioImmediateChargesReport != false) {
        FolioImmediateChargesReport = other.FolioImmediateChargesReport;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reportingRange_ == null) {
              reportingRange_ = new global::HOLMS.Types.Primitive.PbInterval();
            }
            input.ReadMessage(reportingRange_);
            break;
          }
          case 16: {
            FolioPaymentsReport = input.ReadBool();
            break;
          }
          case 24: {
            CallAccountingReport = input.ReadBool();
            break;
          }
          case 32: {
            LedgerActivitySummaryReport = input.ReadBool();
            break;
          }
          case 40: {
            LedgerJournalEntriesReport = input.ReadBool();
            break;
          }
          case 48: {
            BookingsByPeriodReport = input.ReadBool();
            break;
          }
          case 56: {
            FolioImmediateChargesReport = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ManagementOpsdateRangeReportManifest : pb::IMessage<ManagementOpsdateRangeReportManifest> {
    private static readonly pb::MessageParser<ManagementOpsdateRangeReportManifest> _parser = new pb::MessageParser<ManagementOpsdateRangeReportManifest>(() => new ManagementOpsdateRangeReportManifest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagementOpsdateRangeReportManifest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Reporting.ReportParams.ManagementReportManifestsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementOpsdateRangeReportManifest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementOpsdateRangeReportManifest(ManagementOpsdateRangeReportManifest other) : this() {
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
      roomUsageDetailedReport_ = other.roomUsageDetailedReport_;
      roomUsageSummaryReport_ = other.roomUsageSummaryReport_;
      plannedLodgingRevenueBySource_ = other.plannedLodgingRevenueBySource_;
      propertyStatisticsReport_ = other.propertyStatisticsReport_;
      folioGrossChargesReport_ = other.folioGrossChargesReport_;
      taxExemptSummaryReport_ = other.taxExemptSummaryReport_;
      taxExemptDetailReport_ = other.taxExemptDetailReport_;
      folioGrossSummaryReport_ = other.folioGrossSummaryReport_;
      summaryReport_ = other.summaryReport_;
      unusedGroupHoldsReport_ = other.unusedGroupHoldsReport_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementOpsdateRangeReportManifest Clone() {
      return new ManagementOpsdateRangeReportManifest(this);
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 1;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "room_usage_detailed_report" field.</summary>
    public const int RoomUsageDetailedReportFieldNumber = 2;
    private bool roomUsageDetailedReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RoomUsageDetailedReport {
      get { return roomUsageDetailedReport_; }
      set {
        roomUsageDetailedReport_ = value;
      }
    }

    /// <summary>Field number for the "room_usage_summary_report" field.</summary>
    public const int RoomUsageSummaryReportFieldNumber = 3;
    private bool roomUsageSummaryReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RoomUsageSummaryReport {
      get { return roomUsageSummaryReport_; }
      set {
        roomUsageSummaryReport_ = value;
      }
    }

    /// <summary>Field number for the "planned_lodging_revenue_by_source" field.</summary>
    public const int PlannedLodgingRevenueBySourceFieldNumber = 4;
    private bool plannedLodgingRevenueBySource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlannedLodgingRevenueBySource {
      get { return plannedLodgingRevenueBySource_; }
      set {
        plannedLodgingRevenueBySource_ = value;
      }
    }

    /// <summary>Field number for the "property_statistics_report" field.</summary>
    public const int PropertyStatisticsReportFieldNumber = 5;
    private bool propertyStatisticsReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropertyStatisticsReport {
      get { return propertyStatisticsReport_; }
      set {
        propertyStatisticsReport_ = value;
      }
    }

    /// <summary>Field number for the "folio_gross_charges_report" field.</summary>
    public const int FolioGrossChargesReportFieldNumber = 6;
    private bool folioGrossChargesReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FolioGrossChargesReport {
      get { return folioGrossChargesReport_; }
      set {
        folioGrossChargesReport_ = value;
      }
    }

    /// <summary>Field number for the "tax_exempt_summary_report" field.</summary>
    public const int TaxExemptSummaryReportFieldNumber = 7;
    private bool taxExemptSummaryReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TaxExemptSummaryReport {
      get { return taxExemptSummaryReport_; }
      set {
        taxExemptSummaryReport_ = value;
      }
    }

    /// <summary>Field number for the "tax_exempt_detail_report" field.</summary>
    public const int TaxExemptDetailReportFieldNumber = 8;
    private bool taxExemptDetailReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TaxExemptDetailReport {
      get { return taxExemptDetailReport_; }
      set {
        taxExemptDetailReport_ = value;
      }
    }

    /// <summary>Field number for the "folio_gross_summary_report" field.</summary>
    public const int FolioGrossSummaryReportFieldNumber = 9;
    private bool folioGrossSummaryReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FolioGrossSummaryReport {
      get { return folioGrossSummaryReport_; }
      set {
        folioGrossSummaryReport_ = value;
      }
    }

    /// <summary>Field number for the "summary_report" field.</summary>
    public const int SummaryReportFieldNumber = 10;
    private bool summaryReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SummaryReport {
      get { return summaryReport_; }
      set {
        summaryReport_ = value;
      }
    }

    /// <summary>Field number for the "unused_group_holds_report" field.</summary>
    public const int UnusedGroupHoldsReportFieldNumber = 11;
    private bool unusedGroupHoldsReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnusedGroupHoldsReport {
      get { return unusedGroupHoldsReport_; }
      set {
        unusedGroupHoldsReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagementOpsdateRangeReportManifest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagementOpsdateRangeReportManifest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (RoomUsageDetailedReport != other.RoomUsageDetailedReport) return false;
      if (RoomUsageSummaryReport != other.RoomUsageSummaryReport) return false;
      if (PlannedLodgingRevenueBySource != other.PlannedLodgingRevenueBySource) return false;
      if (PropertyStatisticsReport != other.PropertyStatisticsReport) return false;
      if (FolioGrossChargesReport != other.FolioGrossChargesReport) return false;
      if (TaxExemptSummaryReport != other.TaxExemptSummaryReport) return false;
      if (TaxExemptDetailReport != other.TaxExemptDetailReport) return false;
      if (FolioGrossSummaryReport != other.FolioGrossSummaryReport) return false;
      if (SummaryReport != other.SummaryReport) return false;
      if (UnusedGroupHoldsReport != other.UnusedGroupHoldsReport) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (RoomUsageDetailedReport != false) hash ^= RoomUsageDetailedReport.GetHashCode();
      if (RoomUsageSummaryReport != false) hash ^= RoomUsageSummaryReport.GetHashCode();
      if (PlannedLodgingRevenueBySource != false) hash ^= PlannedLodgingRevenueBySource.GetHashCode();
      if (PropertyStatisticsReport != false) hash ^= PropertyStatisticsReport.GetHashCode();
      if (FolioGrossChargesReport != false) hash ^= FolioGrossChargesReport.GetHashCode();
      if (TaxExemptSummaryReport != false) hash ^= TaxExemptSummaryReport.GetHashCode();
      if (TaxExemptDetailReport != false) hash ^= TaxExemptDetailReport.GetHashCode();
      if (FolioGrossSummaryReport != false) hash ^= FolioGrossSummaryReport.GetHashCode();
      if (SummaryReport != false) hash ^= SummaryReport.GetHashCode();
      if (UnusedGroupHoldsReport != false) hash ^= UnusedGroupHoldsReport.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dateRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DateRange);
      }
      if (RoomUsageDetailedReport != false) {
        output.WriteRawTag(16);
        output.WriteBool(RoomUsageDetailedReport);
      }
      if (RoomUsageSummaryReport != false) {
        output.WriteRawTag(24);
        output.WriteBool(RoomUsageSummaryReport);
      }
      if (PlannedLodgingRevenueBySource != false) {
        output.WriteRawTag(32);
        output.WriteBool(PlannedLodgingRevenueBySource);
      }
      if (PropertyStatisticsReport != false) {
        output.WriteRawTag(40);
        output.WriteBool(PropertyStatisticsReport);
      }
      if (FolioGrossChargesReport != false) {
        output.WriteRawTag(48);
        output.WriteBool(FolioGrossChargesReport);
      }
      if (TaxExemptSummaryReport != false) {
        output.WriteRawTag(56);
        output.WriteBool(TaxExemptSummaryReport);
      }
      if (TaxExemptDetailReport != false) {
        output.WriteRawTag(64);
        output.WriteBool(TaxExemptDetailReport);
      }
      if (FolioGrossSummaryReport != false) {
        output.WriteRawTag(72);
        output.WriteBool(FolioGrossSummaryReport);
      }
      if (SummaryReport != false) {
        output.WriteRawTag(80);
        output.WriteBool(SummaryReport);
      }
      if (UnusedGroupHoldsReport != false) {
        output.WriteRawTag(88);
        output.WriteBool(UnusedGroupHoldsReport);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (RoomUsageDetailedReport != false) {
        size += 1 + 1;
      }
      if (RoomUsageSummaryReport != false) {
        size += 1 + 1;
      }
      if (PlannedLodgingRevenueBySource != false) {
        size += 1 + 1;
      }
      if (PropertyStatisticsReport != false) {
        size += 1 + 1;
      }
      if (FolioGrossChargesReport != false) {
        size += 1 + 1;
      }
      if (TaxExemptSummaryReport != false) {
        size += 1 + 1;
      }
      if (TaxExemptDetailReport != false) {
        size += 1 + 1;
      }
      if (FolioGrossSummaryReport != false) {
        size += 1 + 1;
      }
      if (SummaryReport != false) {
        size += 1 + 1;
      }
      if (UnusedGroupHoldsReport != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagementOpsdateRangeReportManifest other) {
      if (other == null) {
        return;
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.RoomUsageDetailedReport != false) {
        RoomUsageDetailedReport = other.RoomUsageDetailedReport;
      }
      if (other.RoomUsageSummaryReport != false) {
        RoomUsageSummaryReport = other.RoomUsageSummaryReport;
      }
      if (other.PlannedLodgingRevenueBySource != false) {
        PlannedLodgingRevenueBySource = other.PlannedLodgingRevenueBySource;
      }
      if (other.PropertyStatisticsReport != false) {
        PropertyStatisticsReport = other.PropertyStatisticsReport;
      }
      if (other.FolioGrossChargesReport != false) {
        FolioGrossChargesReport = other.FolioGrossChargesReport;
      }
      if (other.TaxExemptSummaryReport != false) {
        TaxExemptSummaryReport = other.TaxExemptSummaryReport;
      }
      if (other.TaxExemptDetailReport != false) {
        TaxExemptDetailReport = other.TaxExemptDetailReport;
      }
      if (other.FolioGrossSummaryReport != false) {
        FolioGrossSummaryReport = other.FolioGrossSummaryReport;
      }
      if (other.SummaryReport != false) {
        SummaryReport = other.SummaryReport;
      }
      if (other.UnusedGroupHoldsReport != false) {
        UnusedGroupHoldsReport = other.UnusedGroupHoldsReport;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
          case 16: {
            RoomUsageDetailedReport = input.ReadBool();
            break;
          }
          case 24: {
            RoomUsageSummaryReport = input.ReadBool();
            break;
          }
          case 32: {
            PlannedLodgingRevenueBySource = input.ReadBool();
            break;
          }
          case 40: {
            PropertyStatisticsReport = input.ReadBool();
            break;
          }
          case 48: {
            FolioGrossChargesReport = input.ReadBool();
            break;
          }
          case 56: {
            TaxExemptSummaryReport = input.ReadBool();
            break;
          }
          case 64: {
            TaxExemptDetailReport = input.ReadBool();
            break;
          }
          case 72: {
            FolioGrossSummaryReport = input.ReadBool();
            break;
          }
          case 80: {
            SummaryReport = input.ReadBool();
            break;
          }
          case 88: {
            UnusedGroupHoldsReport = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

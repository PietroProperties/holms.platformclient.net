// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenancy_config/occupancy_factor_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.TenancyConfig {

  /// <summary>Holder for reflection information generated from tenancy_config/occupancy_factor_config.proto</summary>
  public static partial class OccupancyFactorConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for tenancy_config/occupancy_factor_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OccupancyFactorConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cix0ZW5hbmN5X2NvbmZpZy9vY2N1cGFuY3lfZmFjdG9yX2NvbmZpZy5wcm90",
            "bxIaaG9sbXMudHlwZXMudGVuYW5jeV9jb25maWcaQXRlbmFuY3lfY29uZmln",
            "L2luZGljYXRvcnMvb2NjdXBhbmN5X2ZhY3Rvcl9jb25maWdfaW5kaWNhdG9y",
            "LnByb3RvIpYCChVPY2N1cGFuY3lGYWN0b3JDb25maWcSWAoJZW50aXR5X2lk",
            "GAEgASgLMkUuaG9sbXMudHlwZXMudGVuYW5jeV9jb25maWcuaW5kaWNhdG9y",
            "cy5PY2N1cGFuY3lGYWN0b3JDb25maWdJbmRpY2F0b3ISHAoUb2NjdXBhbmN5",
            "X3JhbmdlX25hbWUYAiABKAkSFgoOcHJpY2luZ19mYWN0b3IYAyABKAESDwoH",
            "aG9yaXpvbhgEIAEoBRITCgtmYWN0b3JfcmF0ZRgFIAEoARIbChNvY3V1cGFu",
            "Y3lfcmFuZ2VfbWluGAYgASgFEhsKE29jY3VwYW5jeV9yYW5nZV9tYXgYByAB",
            "KAUSDQoFc2xvcGUYCCABKAFCK1oNdGVuYW5jeWNvbmZpZ6oCGUhPTE1TLlR5",
            "cGVzLlRlbmFuY3lDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.TenancyConfig.Indicators.OccupancyFactorConfigIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.TenancyConfig.OccupancyFactorConfig), global::HOLMS.Types.TenancyConfig.OccupancyFactorConfig.Parser, new[]{ "EntityId", "OccupancyRangeName", "PricingFactor", "Horizon", "FactorRate", "OcuupancyRangeMin", "OccupancyRangeMax", "Slope" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OccupancyFactorConfig : pb::IMessage<OccupancyFactorConfig> {
    private static readonly pb::MessageParser<OccupancyFactorConfig> _parser = new pb::MessageParser<OccupancyFactorConfig>(() => new OccupancyFactorConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OccupancyFactorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.TenancyConfig.OccupancyFactorConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupancyFactorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupancyFactorConfig(OccupancyFactorConfig other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      occupancyRangeName_ = other.occupancyRangeName_;
      pricingFactor_ = other.pricingFactor_;
      horizon_ = other.horizon_;
      factorRate_ = other.factorRate_;
      ocuupancyRangeMin_ = other.ocuupancyRangeMin_;
      occupancyRangeMax_ = other.occupancyRangeMax_;
      slope_ = other.slope_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupancyFactorConfig Clone() {
      return new OccupancyFactorConfig(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.TenancyConfig.Indicators.OccupancyFactorConfigIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.TenancyConfig.Indicators.OccupancyFactorConfigIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "occupancy_range_name" field.</summary>
    public const int OccupancyRangeNameFieldNumber = 2;
    private string occupancyRangeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OccupancyRangeName {
      get { return occupancyRangeName_; }
      set {
        occupancyRangeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pricing_factor" field.</summary>
    public const int PricingFactorFieldNumber = 3;
    private double pricingFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PricingFactor {
      get { return pricingFactor_; }
      set {
        pricingFactor_ = value;
      }
    }

    /// <summary>Field number for the "horizon" field.</summary>
    public const int HorizonFieldNumber = 4;
    private int horizon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Horizon {
      get { return horizon_; }
      set {
        horizon_ = value;
      }
    }

    /// <summary>Field number for the "factor_rate" field.</summary>
    public const int FactorRateFieldNumber = 5;
    private double factorRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FactorRate {
      get { return factorRate_; }
      set {
        factorRate_ = value;
      }
    }

    /// <summary>Field number for the "ocuupancy_range_min" field.</summary>
    public const int OcuupancyRangeMinFieldNumber = 6;
    private int ocuupancyRangeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OcuupancyRangeMin {
      get { return ocuupancyRangeMin_; }
      set {
        ocuupancyRangeMin_ = value;
      }
    }

    /// <summary>Field number for the "occupancy_range_max" field.</summary>
    public const int OccupancyRangeMaxFieldNumber = 7;
    private int occupancyRangeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OccupancyRangeMax {
      get { return occupancyRangeMax_; }
      set {
        occupancyRangeMax_ = value;
      }
    }

    /// <summary>Field number for the "slope" field.</summary>
    public const int SlopeFieldNumber = 8;
    private double slope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Slope {
      get { return slope_; }
      set {
        slope_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OccupancyFactorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OccupancyFactorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (OccupancyRangeName != other.OccupancyRangeName) return false;
      if (PricingFactor != other.PricingFactor) return false;
      if (Horizon != other.Horizon) return false;
      if (FactorRate != other.FactorRate) return false;
      if (OcuupancyRangeMin != other.OcuupancyRangeMin) return false;
      if (OccupancyRangeMax != other.OccupancyRangeMax) return false;
      if (Slope != other.Slope) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (OccupancyRangeName.Length != 0) hash ^= OccupancyRangeName.GetHashCode();
      if (PricingFactor != 0D) hash ^= PricingFactor.GetHashCode();
      if (Horizon != 0) hash ^= Horizon.GetHashCode();
      if (FactorRate != 0D) hash ^= FactorRate.GetHashCode();
      if (OcuupancyRangeMin != 0) hash ^= OcuupancyRangeMin.GetHashCode();
      if (OccupancyRangeMax != 0) hash ^= OccupancyRangeMax.GetHashCode();
      if (Slope != 0D) hash ^= Slope.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (OccupancyRangeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OccupancyRangeName);
      }
      if (PricingFactor != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PricingFactor);
      }
      if (Horizon != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Horizon);
      }
      if (FactorRate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(FactorRate);
      }
      if (OcuupancyRangeMin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OcuupancyRangeMin);
      }
      if (OccupancyRangeMax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OccupancyRangeMax);
      }
      if (Slope != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Slope);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (OccupancyRangeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OccupancyRangeName);
      }
      if (PricingFactor != 0D) {
        size += 1 + 8;
      }
      if (Horizon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Horizon);
      }
      if (FactorRate != 0D) {
        size += 1 + 8;
      }
      if (OcuupancyRangeMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OcuupancyRangeMin);
      }
      if (OccupancyRangeMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OccupancyRangeMax);
      }
      if (Slope != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OccupancyFactorConfig other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.TenancyConfig.Indicators.OccupancyFactorConfigIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.OccupancyRangeName.Length != 0) {
        OccupancyRangeName = other.OccupancyRangeName;
      }
      if (other.PricingFactor != 0D) {
        PricingFactor = other.PricingFactor;
      }
      if (other.Horizon != 0) {
        Horizon = other.Horizon;
      }
      if (other.FactorRate != 0D) {
        FactorRate = other.FactorRate;
      }
      if (other.OcuupancyRangeMin != 0) {
        OcuupancyRangeMin = other.OcuupancyRangeMin;
      }
      if (other.OccupancyRangeMax != 0) {
        OccupancyRangeMax = other.OccupancyRangeMax;
      }
      if (other.Slope != 0D) {
        Slope = other.Slope;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.TenancyConfig.Indicators.OccupancyFactorConfigIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 18: {
            OccupancyRangeName = input.ReadString();
            break;
          }
          case 25: {
            PricingFactor = input.ReadDouble();
            break;
          }
          case 32: {
            Horizon = input.ReadInt32();
            break;
          }
          case 41: {
            FactorRate = input.ReadDouble();
            break;
          }
          case 48: {
            OcuupancyRangeMin = input.ReadInt32();
            break;
          }
          case 56: {
            OccupancyRangeMax = input.ReadInt32();
            break;
          }
          case 65: {
            Slope = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

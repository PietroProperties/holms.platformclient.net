// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/rpc/pbx_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Operations.RPC {
  public static class PBXSvc
  {
    static readonly string __ServiceName = "holms.types.operations.rpc.PBXSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse> __Marshaller_PBXSvcAllResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse> __Marshaller_PBXSvcGetActiveConnectorCountResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse> __Method_GetAllEvents = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetAllEvents",
        __Marshaller_Empty,
        __Marshaller_PBXSvcAllResponse);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse> __Method_GetActiveConnectorCount = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetActiveConnectorCount",
        __Marshaller_Empty,
        __Marshaller_PBXSvcGetActiveConnectorCountResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Operations.RPC.PbxSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PBXSvc</summary>
    public abstract class PBXSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse> GetAllEvents(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse> GetActiveConnectorCount(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PBXSvc</summary>
    public class PBXSvcClient : ClientBase<PBXSvcClient>
    {
      /// <summary>Creates a new client for PBXSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PBXSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PBXSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PBXSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PBXSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PBXSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse GetAllEvents(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllEvents(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse GetAllEvents(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllEvents, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse> GetAllEventsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllEventsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse> GetAllEventsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllEvents, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse GetActiveConnectorCount(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetActiveConnectorCount(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse GetActiveConnectorCount(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActiveConnectorCount, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse> GetActiveConnectorCountAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetActiveConnectorCountAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse> GetActiveConnectorCountAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActiveConnectorCount, null, options, request);
      }
      protected override PBXSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PBXSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(PBXSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllEvents, serviceImpl.GetAllEvents)
          .AddMethod(__Method_GetActiveConnectorCount, serviceImpl.GetActiveConnectorCount).Build();
    }

  }
}
#endregion

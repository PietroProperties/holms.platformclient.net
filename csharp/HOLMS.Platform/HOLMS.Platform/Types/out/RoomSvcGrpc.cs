// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/rpc/room_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Operations.RPC {
  public static class RoomSvc
  {
    static readonly string __ServiceName = "holms.types.operations.rpc.RoomSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> __Marshaller_RoomSvcAllResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.Rooms.Room> __Marshaller_Room = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.Rooms.Room.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> __Marshaller_RoomSvcCRUDResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Primitive.ServerActionConfirmation> __Marshaller_ServerActionConfirmation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Primitive.ServerActionConfirmation.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.Rooms.RoomIndicator> __Marshaller_RoomIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.Rooms.RoomIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Booking.Indicators.ReservationIndicator> __Marshaller_ReservationIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Booking.Indicators.ReservationIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse> __Marshaller_RoomSvcGetByOccupyingReservationResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest> __Marshaller_RoomSvcOccupancyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse> __Marshaller_RoomSvcClaimOccupancyResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse> __Marshaller_RoomSvcReleaseOccupancyResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest> __Marshaller_RoomSvcIssueRoomKeyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse> __Marshaller_RoomSvcIssueRoomKeyResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator> __Marshaller_PropertyIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse> __Marshaller_RoomSvcGetHousekeepingRoomStatusResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> __Method_All = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_Empty,
        __Marshaller_RoomSvcAllResponse);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> __Method_Create = new Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Room,
        __Marshaller_RoomSvcCRUDResponse);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> __Method_Update = new Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Room,
        __Marshaller_RoomSvcCRUDResponse);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Primitive.ServerActionConfirmation> __Method_Delete = new Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Primitive.ServerActionConfirmation>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Room,
        __Marshaller_ServerActionConfirmation);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.RoomIndicator, global::HOLMS.Types.Operations.Rooms.Room> __Method_GetById = new Method<global::HOLMS.Types.Operations.Rooms.RoomIndicator, global::HOLMS.Types.Operations.Rooms.Room>(
        MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_RoomIndicator,
        __Marshaller_Room);

    static readonly Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse> __Method_GetByOccupyingReservation = new Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetByOccupyingReservation",
        __Marshaller_ReservationIndicator,
        __Marshaller_RoomSvcGetByOccupyingReservationResponse);

    static readonly Method<global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest, global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse> __Method_ClaimRoomOccupancy = new Method<global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest, global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse>(
        MethodType.Unary,
        __ServiceName,
        "ClaimRoomOccupancy",
        __Marshaller_RoomSvcOccupancyRequest,
        __Marshaller_RoomSvcClaimOccupancyResponse);

    static readonly Method<global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest, global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse> __Method_ReleaseRoomOccupancy = new Method<global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest, global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse>(
        MethodType.Unary,
        __ServiceName,
        "ReleaseRoomOccupancy",
        __Marshaller_RoomSvcOccupancyRequest,
        __Marshaller_RoomSvcReleaseOccupancyResponse);

    static readonly Method<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest, global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse> __Method_IssueRoomKey = new Method<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest, global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse>(
        MethodType.Unary,
        __ServiceName,
        "IssueRoomKey",
        __Marshaller_RoomSvcIssueRoomKeyRequest,
        __Marshaller_RoomSvcIssueRoomKeyResponse);

    static readonly Method<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator, global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse> __Method_GetHousekeepingRoomStatus = new Method<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator, global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetHousekeepingRoomStatus",
        __Marshaller_PropertyIndicator,
        __Marshaller_RoomSvcGetHousekeepingRoomStatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RoomSvc</summary>
    public abstract class RoomSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> All(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> Create(global::HOLMS.Types.Operations.Rooms.Room request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> Update(global::HOLMS.Types.Operations.Rooms.Room request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Primitive.ServerActionConfirmation> Delete(global::HOLMS.Types.Operations.Rooms.Room request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.Rooms.Room> GetById(global::HOLMS.Types.Operations.Rooms.RoomIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse> GetByOccupyingReservation(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse> ClaimRoomOccupancy(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse> ReleaseRoomOccupancy(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse> IssueRoomKey(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse> GetHousekeepingRoomStatus(global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RoomSvc</summary>
    public class RoomSvcClient : ClientBase<RoomSvcClient>
    {
      /// <summary>Creates a new client for RoomSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoomSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RoomSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoomSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoomSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoomSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return All(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Create(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Create(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> CreateAsync(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> CreateAsync(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Update(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Update(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> UpdateAsync(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> UpdateAsync(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.Rooms.Room GetById(global::HOLMS.Types.Operations.Rooms.RoomIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetById(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.Rooms.Room GetById(global::HOLMS.Types.Operations.Rooms.RoomIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.Rooms.Room> GetByIdAsync(global::HOLMS.Types.Operations.Rooms.RoomIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.Rooms.Room> GetByIdAsync(global::HOLMS.Types.Operations.Rooms.RoomIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse GetByOccupyingReservation(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByOccupyingReservation(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse GetByOccupyingReservation(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetByOccupyingReservation, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse> GetByOccupyingReservationAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByOccupyingReservationAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse> GetByOccupyingReservationAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetByOccupyingReservation, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse ClaimRoomOccupancy(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClaimRoomOccupancy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse ClaimRoomOccupancy(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClaimRoomOccupancy, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse> ClaimRoomOccupancyAsync(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClaimRoomOccupancyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse> ClaimRoomOccupancyAsync(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClaimRoomOccupancy, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse ReleaseRoomOccupancy(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReleaseRoomOccupancy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse ReleaseRoomOccupancy(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReleaseRoomOccupancy, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse> ReleaseRoomOccupancyAsync(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReleaseRoomOccupancyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse> ReleaseRoomOccupancyAsync(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReleaseRoomOccupancy, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse IssueRoomKey(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IssueRoomKey(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse IssueRoomKey(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IssueRoomKey, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse> IssueRoomKeyAsync(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IssueRoomKeyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse> IssueRoomKeyAsync(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IssueRoomKey, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse GetHousekeepingRoomStatus(global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHousekeepingRoomStatus(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse GetHousekeepingRoomStatus(global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHousekeepingRoomStatus, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse> GetHousekeepingRoomStatusAsync(global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHousekeepingRoomStatusAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse> GetHousekeepingRoomStatusAsync(global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHousekeepingRoomStatus, null, options, request);
      }
      protected override RoomSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoomSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(RoomSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_GetByOccupyingReservation, serviceImpl.GetByOccupyingReservation)
          .AddMethod(__Method_ClaimRoomOccupancy, serviceImpl.ClaimRoomOccupancy)
          .AddMethod(__Method_ReleaseRoomOccupancy, serviceImpl.ReleaseRoomOccupancy)
          .AddMethod(__Method_IssueRoomKey, serviceImpl.IssueRoomKey)
          .AddMethod(__Method_GetHousekeepingRoomStatus, serviceImpl.GetHousekeepingRoomStatus).Build();
    }

  }
}
#endregion

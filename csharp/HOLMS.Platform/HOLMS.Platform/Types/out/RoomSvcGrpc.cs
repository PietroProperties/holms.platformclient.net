// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/rpc/room_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Operations.RPC {
  public static class RoomSvc
  {
    static readonly string __ServiceName = "holms.types.operations.rpc.RoomSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> __Marshaller_RoomSvcAllResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.Rooms.Room> __Marshaller_Room = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.Rooms.Room.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> __Marshaller_RoomSvcCRUDResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Primitive.ServerActionConfirmation> __Marshaller_ServerActionConfirmation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Primitive.ServerActionConfirmation.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> __Method_All = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_Empty,
        __Marshaller_RoomSvcAllResponse);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> __Method_Create = new Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Room,
        __Marshaller_RoomSvcCRUDResponse);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> __Method_Update = new Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Room,
        __Marshaller_RoomSvcCRUDResponse);

    static readonly Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Primitive.ServerActionConfirmation> __Method_Delete = new Method<global::HOLMS.Types.Operations.Rooms.Room, global::HOLMS.Types.Primitive.ServerActionConfirmation>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Room,
        __Marshaller_ServerActionConfirmation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RoomSvc</summary>
    public abstract class RoomSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> All(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> Create(global::HOLMS.Types.Operations.Rooms.Room request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> Update(global::HOLMS.Types.Operations.Rooms.Room request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Primitive.ServerActionConfirmation> Delete(global::HOLMS.Types.Operations.Rooms.Room request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RoomSvc</summary>
    public class RoomSvcClient : ClientBase<RoomSvcClient>
    {
      /// <summary>Creates a new client for RoomSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoomSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RoomSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoomSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoomSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoomSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return All(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Create(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Create(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> CreateAsync(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> CreateAsync(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Update(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse Update(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> UpdateAsync(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse> UpdateAsync(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.Operations.Rooms.Room request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.Operations.Rooms.Room request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      protected override RoomSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoomSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(RoomSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

  }
}
#endregion

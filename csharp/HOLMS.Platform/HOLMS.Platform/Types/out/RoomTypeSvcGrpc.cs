// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/room_type_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Supply.RPC {
  public static class RoomTypeSvc
  {
    static readonly string __ServiceName = "holms.types.supply.rpc.RoomTypeSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse> __Marshaller_RoomTypeSvcAllResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse> __Marshaller_RoomTypeSvcAllWithRoomsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator> __Marshaller_RoomTypeIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RoomTypes.RoomType> __Marshaller_RoomType = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RoomTypes.RoomType.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest> __Marshaller_RoomTypeSvcGetByChannelManagerRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Primitive.ServerActionConfirmation> __Marshaller_ServerActionConfirmation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Primitive.ServerActionConfirmation.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse> __Method_All = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_Empty,
        __Marshaller_RoomTypeSvcAllResponse);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse> __Method_AllWithRooms = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse>(
        MethodType.Unary,
        __ServiceName,
        "AllWithRooms",
        __Marshaller_Empty,
        __Marshaller_RoomTypeSvcAllWithRoomsResponse);

    static readonly Method<global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator, global::HOLMS.Types.Supply.RoomTypes.RoomType> __Method_GetById = new Method<global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator, global::HOLMS.Types.Supply.RoomTypes.RoomType>(
        MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_RoomTypeIndicator,
        __Marshaller_RoomType);

    static readonly Method<global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest, global::HOLMS.Types.Supply.RoomTypes.RoomType> __Method_GetByChannelManagerId = new Method<global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest, global::HOLMS.Types.Supply.RoomTypes.RoomType>(
        MethodType.Unary,
        __ServiceName,
        "GetByChannelManagerId",
        __Marshaller_RoomTypeSvcGetByChannelManagerRequest,
        __Marshaller_RoomType);

    static readonly Method<global::HOLMS.Types.Supply.RoomTypes.RoomType, global::HOLMS.Types.Supply.RoomTypes.RoomType> __Method_Create = new Method<global::HOLMS.Types.Supply.RoomTypes.RoomType, global::HOLMS.Types.Supply.RoomTypes.RoomType>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_RoomType,
        __Marshaller_RoomType);

    static readonly Method<global::HOLMS.Types.Supply.RoomTypes.RoomType, global::HOLMS.Types.Supply.RoomTypes.RoomType> __Method_Update = new Method<global::HOLMS.Types.Supply.RoomTypes.RoomType, global::HOLMS.Types.Supply.RoomTypes.RoomType>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_RoomType,
        __Marshaller_RoomType);

    static readonly Method<global::HOLMS.Types.Supply.RoomTypes.RoomType, global::HOLMS.Types.Primitive.ServerActionConfirmation> __Method_Delete = new Method<global::HOLMS.Types.Supply.RoomTypes.RoomType, global::HOLMS.Types.Primitive.ServerActionConfirmation>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_RoomType,
        __Marshaller_ServerActionConfirmation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Supply.RPC.RoomTypeSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RoomTypeSvc</summary>
    public abstract class RoomTypeSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse> All(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse> AllWithRooms(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RoomTypes.RoomType> GetById(global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RoomTypes.RoomType> GetByChannelManagerId(global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RoomTypes.RoomType> Create(global::HOLMS.Types.Supply.RoomTypes.RoomType request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RoomTypes.RoomType> Update(global::HOLMS.Types.Supply.RoomTypes.RoomType request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Primitive.ServerActionConfirmation> Delete(global::HOLMS.Types.Supply.RoomTypes.RoomType request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RoomTypeSvc</summary>
    public class RoomTypeSvcClient : ClientBase<RoomTypeSvcClient>
    {
      /// <summary>Creates a new client for RoomTypeSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoomTypeSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RoomTypeSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoomTypeSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoomTypeSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoomTypeSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return All(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse AllWithRooms(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllWithRooms(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse AllWithRooms(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllWithRooms, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse> AllWithRoomsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllWithRoomsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.RoomTypeSvcAllWithRoomsResponse> AllWithRoomsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllWithRooms, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType GetById(global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetById(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType GetById(global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> GetByIdAsync(global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> GetByIdAsync(global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType GetByChannelManagerId(global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByChannelManagerId(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType GetByChannelManagerId(global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetByChannelManagerId, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> GetByChannelManagerIdAsync(global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByChannelManagerIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> GetByChannelManagerIdAsync(global::HOLMS.Types.Supply.RPC.RoomTypeSvcGetByChannelManagerRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetByChannelManagerId, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType Create(global::HOLMS.Types.Supply.RoomTypes.RoomType request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType Create(global::HOLMS.Types.Supply.RoomTypes.RoomType request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> CreateAsync(global::HOLMS.Types.Supply.RoomTypes.RoomType request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> CreateAsync(global::HOLMS.Types.Supply.RoomTypes.RoomType request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType Update(global::HOLMS.Types.Supply.RoomTypes.RoomType request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RoomTypes.RoomType Update(global::HOLMS.Types.Supply.RoomTypes.RoomType request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> UpdateAsync(global::HOLMS.Types.Supply.RoomTypes.RoomType request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RoomTypes.RoomType> UpdateAsync(global::HOLMS.Types.Supply.RoomTypes.RoomType request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.Supply.RoomTypes.RoomType request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.Supply.RoomTypes.RoomType request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.Supply.RoomTypes.RoomType request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.Supply.RoomTypes.RoomType request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      protected override RoomTypeSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoomTypeSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(RoomTypeSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_AllWithRooms, serviceImpl.AllWithRooms)
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_GetByChannelManagerId, serviceImpl.GetByChannelManagerId)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

  }
}
#endregion

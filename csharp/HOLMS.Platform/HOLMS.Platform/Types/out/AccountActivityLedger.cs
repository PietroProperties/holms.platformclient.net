// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/accounting/account_activity_ledger.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Money.Accounting {

  /// <summary>Holder for reflection information generated from money/accounting/account_activity_ledger.proto</summary>
  public static partial class AccountActivityLedgerReflection {

    #region Descriptor
    /// <summary>File descriptor for money/accounting/account_activity_ledger.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountActivityLedgerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5tb25leS9hY2NvdW50aW5nL2FjY291bnRfYWN0aXZpdHlfbGVkZ2VyLnBy",
            "b3RvEhxob2xtcy50eXBlcy5tb25leS5hY2NvdW50aW5nGihtb25leS9hY2Nv",
            "dW50aW5nL2FjY291bnRfaW5kaWNhdG9yLnByb3RvGi1tb25leS9hY2NvdW50",
            "aW5nL2FjY291bnRpbmdfdHJhbnNhY3Rpb24ucHJvdG8aMm1vbmV5L2FjY291",
            "bnRpbmcvYWNjb3VudGluZ190cmFuc2FjdGlvbl9saW5lLnByb3RvIusBChVB",
            "Y2NvdW50QWN0aXZpdHlMZWRnZXISPwoHYWNjb3VudBgBIAEoCzIuLmhvbG1z",
            "LnR5cGVzLm1vbmV5LmFjY291bnRpbmcuQWNjb3VudEluZGljYXRvchJJCgx0",
            "cmFuc2FjdGlvbnMYAiADKAsyMy5ob2xtcy50eXBlcy5tb25leS5hY2NvdW50",
            "aW5nLkFjY291bnRpbmdUcmFuc2FjdGlvbhJGCgVsaW5lcxgDIAMoCzI3Lmhv",
            "bG1zLnR5cGVzLm1vbmV5LmFjY291bnRpbmcuQWNjb3VudGluZ1RyYW5zYWN0",
            "aW9uTGluZUIxWhBtb25leS9hY2NvdW50aW5nqgIcSE9MTVMuVHlwZXMuTW9u",
            "ZXkuQWNjb3VudGluZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Money.Accounting.AccountIndicatorReflection.Descriptor, global::HOLMS.Types.Money.Accounting.AccountingTransactionReflection.Descriptor, global::HOLMS.Types.Money.Accounting.AccountingTransactionLineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.Accounting.AccountActivityLedger), global::HOLMS.Types.Money.Accounting.AccountActivityLedger.Parser, new[]{ "Account", "Transactions", "Lines" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AccountActivityLedger : pb::IMessage<AccountActivityLedger> {
    private static readonly pb::MessageParser<AccountActivityLedger> _parser = new pb::MessageParser<AccountActivityLedger>(() => new AccountActivityLedger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountActivityLedger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.Accounting.AccountActivityLedgerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountActivityLedger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountActivityLedger(AccountActivityLedger other) : this() {
      Account = other.account_ != null ? other.Account.Clone() : null;
      transactions_ = other.transactions_.Clone();
      lines_ = other.lines_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountActivityLedger Clone() {
      return new AccountActivityLedger(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::HOLMS.Types.Money.Accounting.AccountIndicator account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.AccountIndicator Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Money.Accounting.AccountingTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::HOLMS.Types.Money.Accounting.AccountingTransaction.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Money.Accounting.AccountingTransaction> transactions_ = new pbc::RepeatedField<global::HOLMS.Types.Money.Accounting.AccountingTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Money.Accounting.AccountingTransaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Money.Accounting.AccountingTransactionLine> _repeated_lines_codec
        = pb::FieldCodec.ForMessage(26, global::HOLMS.Types.Money.Accounting.AccountingTransactionLine.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Money.Accounting.AccountingTransactionLine> lines_ = new pbc::RepeatedField<global::HOLMS.Types.Money.Accounting.AccountingTransactionLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Money.Accounting.AccountingTransactionLine> Lines {
      get { return lines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountActivityLedger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountActivityLedger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      if(!lines_.Equals(other.lines_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      hash ^= transactions_.GetHashCode();
      hash ^= lines_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      lines_.WriteTo(output, _repeated_lines_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      size += lines_.CalculateSize(_repeated_lines_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountActivityLedger other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::HOLMS.Types.Money.Accounting.AccountIndicator();
        }
        Account.MergeFrom(other.Account);
      }
      transactions_.Add(other.transactions_);
      lines_.Add(other.lines_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (account_ == null) {
              account_ = new global::HOLMS.Types.Money.Accounting.AccountIndicator();
            }
            input.ReadMessage(account_);
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 26: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

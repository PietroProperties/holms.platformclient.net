// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: folio/tax_assessment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Folio {

  /// <summary>Holder for reflection information generated from folio/tax_assessment.proto</summary>
  public static partial class TaxAssessmentReflection {

    #region Descriptor
    /// <summary>File descriptor for folio/tax_assessment.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxAssessmentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chpmb2xpby90YXhfYXNzZXNzbWVudC5wcm90bxIRaG9sbXMudHlwZXMuZm9s",
            "aW8aE2ZvbGlvL3RheF9mZWUucHJvdG8aH3ByaW1pdGl2ZS9tb25ldGFyeV9h",
            "bW91bnQucHJvdG8iewoNVGF4QXNzZXNzbWVudBImCgN0YXgYASABKAsyGS5o",
            "b2xtcy50eXBlcy5mb2xpby5UYXhGZWUSQgoTYXNzZXNzZWRfdGF4X2Ftb3Vu",
            "dBgCIAEoCzIlLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5Nb25ldGFyeUFtb3Vu",
            "dEIUqgIRSE9MTVMuVHlwZXMuRm9saW9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Folio.TaxFeeReflection.Descriptor, global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Folio.TaxAssessment), global::HOLMS.Types.Folio.TaxAssessment.Parser, new[]{ "Tax", "AssessedTaxAmount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TaxAssessment : pb::IMessage<TaxAssessment> {
    private static readonly pb::MessageParser<TaxAssessment> _parser = new pb::MessageParser<TaxAssessment>(() => new TaxAssessment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxAssessment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Folio.TaxAssessmentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxAssessment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxAssessment(TaxAssessment other) : this() {
      Tax = other.tax_ != null ? other.Tax.Clone() : null;
      AssessedTaxAmount = other.assessedTaxAmount_ != null ? other.AssessedTaxAmount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxAssessment Clone() {
      return new TaxAssessment(this);
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 1;
    private global::HOLMS.Types.Folio.TaxFee tax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Folio.TaxFee Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "assessed_tax_amount" field.</summary>
    public const int AssessedTaxAmountFieldNumber = 2;
    private global::HOLMS.Types.Primitive.MonetaryAmount assessedTaxAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount AssessedTaxAmount {
      get { return assessedTaxAmount_; }
      set {
        assessedTaxAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxAssessment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxAssessment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tax, other.Tax)) return false;
      if (!object.Equals(AssessedTaxAmount, other.AssessedTaxAmount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tax_ != null) hash ^= Tax.GetHashCode();
      if (assessedTaxAmount_ != null) hash ^= AssessedTaxAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tax_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tax);
      }
      if (assessedTaxAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AssessedTaxAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tax);
      }
      if (assessedTaxAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssessedTaxAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxAssessment other) {
      if (other == null) {
        return;
      }
      if (other.tax_ != null) {
        if (tax_ == null) {
          tax_ = new global::HOLMS.Types.Folio.TaxFee();
        }
        Tax.MergeFrom(other.Tax);
      }
      if (other.assessedTaxAmount_ != null) {
        if (assessedTaxAmount_ == null) {
          assessedTaxAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        AssessedTaxAmount.MergeFrom(other.AssessedTaxAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tax_ == null) {
              tax_ = new global::HOLMS.Types.Folio.TaxFee();
            }
            input.ReadMessage(tax_);
            break;
          }
          case 18: {
            if (assessedTaxAmount_ == null) {
              assessedTaxAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(assessedTaxAmount_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

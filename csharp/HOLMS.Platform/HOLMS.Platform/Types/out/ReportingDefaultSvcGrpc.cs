// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting/rpc/reporting_default_svc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace HOLMS.Types.Reporting.RPC {
  public static partial class ReportingDefaultSvc
  {
    static readonly string __ServiceName = "holms.types.reporting.rpc.ReportingDefaultSvc";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest> __Marshaller_ManagmentReportingSvcBatchReportRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest> __Method_GetManagementReportingDefaultSelection = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetManagementReportingDefaultSelection",
        __Marshaller_Empty,
        __Marshaller_ManagmentReportingSvcBatchReportRequest);

    static readonly grpc::Method<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetManagementReportingDefaultSelection = new grpc::Method<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetManagementReportingDefaultSelection",
        __Marshaller_ManagmentReportingSvcBatchReportRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Reporting.RPC.ReportingDefaultSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReportingDefaultSvc</summary>
    public abstract partial class ReportingDefaultSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest> GetManagementReportingDefaultSelection(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetManagementReportingDefaultSelection(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReportingDefaultSvc</summary>
    public partial class ReportingDefaultSvcClient : grpc::ClientBase<ReportingDefaultSvcClient>
    {
      /// <summary>Creates a new client for ReportingDefaultSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReportingDefaultSvcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReportingDefaultSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReportingDefaultSvcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReportingDefaultSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReportingDefaultSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest GetManagementReportingDefaultSelection(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetManagementReportingDefaultSelection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest GetManagementReportingDefaultSelection(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetManagementReportingDefaultSelection, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest> GetManagementReportingDefaultSelectionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetManagementReportingDefaultSelectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest> GetManagementReportingDefaultSelectionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetManagementReportingDefaultSelection, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetManagementReportingDefaultSelection(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetManagementReportingDefaultSelection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetManagementReportingDefaultSelection(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetManagementReportingDefaultSelection, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetManagementReportingDefaultSelectionAsync(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetManagementReportingDefaultSelectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetManagementReportingDefaultSelectionAsync(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetManagementReportingDefaultSelection, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ReportingDefaultSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReportingDefaultSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ReportingDefaultSvcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetManagementReportingDefaultSelection, serviceImpl.GetManagementReportingDefaultSelection)
          .AddMethod(__Method_SetManagementReportingDefaultSelection, serviceImpl.SetManagementReportingDefaultSelection).Build();
    }

  }
}
#endregion

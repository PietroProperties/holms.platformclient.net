// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/rpc/card_processing_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Money.RPC {

  /// <summary>Holder for reflection information generated from money/rpc/card_processing_svc.proto</summary>
  public static partial class CardProcessingSvcReflection {

    #region Descriptor
    /// <summary>File descriptor for money/rpc/card_processing_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CardProcessingSvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNtb25leS9ycGMvY2FyZF9wcm9jZXNzaW5nX3N2Yy5wcm90bxIVaG9sbXMu",
            "dHlwZXMubW9uZXkucnBjGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8a",
            "MHByaW1pdGl2ZS9wYl9pbmNsdXNpdmVfY2FsZW5kYXJfZGF0ZV9yYW5nZS5w",
            "cm90bxopbW9uZXkvY2FyZHMvY2FyZF9tZXJjaGFudF9pbmRpY2F0b3IucHJv",
            "dG8aIm1vbmV5L2NhcmRzL21lcmNoYW50X2NhcHR1cmUucHJvdG8aLG1vbmV5",
            "L2NhcmRzL21lcmNoYW50X2NhcHR1cmVfaW5kaWNhdG9yLnByb3RvGiBtb25l",
            "eS9jYXJkcy9tZXJjaGFudF9iYXRjaC5wcm90bxozbW9uZXkvY2FyZHMvcGF5",
            "bWVudF9jYXJkX3ZlcmlmaWNhdGlvbl9yZXF1ZXN0LnByb3RvGi5tb25leS9j",
            "YXJkcy9wcm9jZXNzb3JfdHJhbnNhY3Rpb25fcmVzdWx0LnByb3RvImIKJENh",
            "cmRQcm9jZXNzaW5nU3ZjQ2FwdHVyZUVudW1SZXNwb25zZRI6CghjYXB0dXJl",
            "cxgBIAMoCzIoLmhvbG1zLnR5cGVzLm1vbmV5LmNhcmRzLk1lcmNoYW50Q2Fw",
            "dHVyZSJUChlNZXJjaGFudEJhdGNoRW51bVJlc3BvbnNlEjcKB2JhdGNoZXMY",
            "ASADKAsyJi5ob2xtcy50eXBlcy5tb25leS5jYXJkcy5NZXJjaGFudEJhdGNo",
            "IoMBCi1DYXJkUHJvY2Vzc2luZ1N2Y0NhbmNlbFBlbmRpbmdDYXB0dXJlUmVz",
            "cG9uc2USUgoGcmVzdWx0GAEgASgOMkIuaG9sbXMudHlwZXMubW9uZXkucnBj",
            "LkNhcmRQcm9jZXNzaW5nU3ZjQ2FuY2VsUGVuZGluZ0NhcHR1cmVSZXN1bHQi",
            "fwo4Q2FyZFByb2Nlc3NpbmdTdmNWZXJpZnlBbmRUb2tlbml6ZU5vdFByZXNl",
            "bnRDYXJkUmVzcG9uc2USQwoGcmVzdWx0GAEgASgOMjMuaG9sbXMudHlwZXMu",
            "bW9uZXkuY2FyZHMuUHJvY2Vzc29yVHJhbnNhY3Rpb25SZXN1bHQqnQIKK0Nh",
            "cmRQcm9jZXNzaW5nU3ZjQ2FuY2VsUGVuZGluZ0NhcHR1cmVSZXN1bHQSNgoy",
            "Q0FSRF9QUk9DRVNTSU5HX1NWQ19DQU5DRUxfUEVORElOR19DQVBUVVJFX1NV",
            "Q0NFU1MQABI4CjRDQVJEX1BST0NFU1NJTkdfU1ZDX0NBTkNFTF9QRU5ESU5H",
            "X0NBUFRVUkVfTk9UX0ZPVU5EEAESPgo6Q0FSRF9QUk9DRVNTSU5HX1NWQ19D",
            "QU5DRUxfUEVORElOR19DQVBUVVJFX05PVF9DQU5DRUxMQUJMRRACEjwKOENB",
            "UkRfUFJPQ0VTU0lOR19TVkNfQ0FOQ0VMX1BFTkRJTkdfQ0FQVFVSRV9VTktO",
            "T1dOX0VSUk9SEAMyygYKEUNhcmRQcm9jZXNzaW5nU3ZjEmwKFUdldEFsbFBl",
            "bmRpbmdDYXB0dXJlcxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRo7LmhvbG1z",
            "LnR5cGVzLm1vbmV5LnJwYy5DYXJkUHJvY2Vzc2luZ1N2Y0NhcHR1cmVFbnVt",
            "UmVzcG9uc2USdgoNR2V0QWxsQmF0Y2hlcxIzLmhvbG1zLnR5cGVzLnByaW1p",
            "dGl2ZS5QYkluY2x1c2l2ZUNhbGVuZGFyRGF0ZVJhbmdlGjAuaG9sbXMudHlw",
            "ZXMubW9uZXkucnBjLk1lcmNoYW50QmF0Y2hFbnVtUmVzcG9uc2USjwEKNU9w",
            "ZW5BbmRTZXR0bGVCYXRjaEZyb21QZW5kaW5nQ2FwdHVyZXNTcGVjaWZpY01l",
            "cmNoYW50Ei4uaG9sbXMudHlwZXMubW9uZXkuY2FyZHMuQ2FyZE1lcmNoYW50",
            "SW5kaWNhdG9yGiYuaG9sbXMudHlwZXMubW9uZXkuY2FyZHMuTWVyY2hhbnRC",
            "YXRjaBJ9CjFPcGVuQW5kU2V0dGxlQmF0Y2hGcm9tUGVuZGluZ0NhcHR1cmVz",
            "QWxsTWVyY2hhbnRzEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GjAuaG9sbXMu",
            "dHlwZXMubW9uZXkucnBjLk1lcmNoYW50QmF0Y2hFbnVtUmVzcG9uc2USjwEK",
            "FENhbmNlbFBlbmRpbmdDYXB0dXJlEjEuaG9sbXMudHlwZXMubW9uZXkuY2Fy",
            "ZHMuTWVyY2hhbnRDYXB0dXJlSW5kaWNhdG9yGkQuaG9sbXMudHlwZXMubW9u",
            "ZXkucnBjLkNhcmRQcm9jZXNzaW5nU3ZjQ2FuY2VsUGVuZGluZ0NhcHR1cmVS",
            "ZXNwb25zZRKrAQofVmVyaWZ5QW5kVG9rZW5pemVOb3RQcmVzZW50Q2FyZBI3",
            "LmhvbG1zLnR5cGVzLm1vbmV5LmNhcmRzLlBheW1lbnRDYXJkVmVyaWZpY2F0",
            "aW9uUmVxdWVzdBpPLmhvbG1zLnR5cGVzLm1vbmV5LnJwYy5DYXJkUHJvY2Vz",
            "c2luZ1N2Y1ZlcmlmeUFuZFRva2VuaXplTm90UHJlc2VudENhcmRSZXNwb25z",
            "ZUIjWgltb25leS9ycGOqAhVIT0xNUy5UeXBlcy5Nb25leS5SUENiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::HOLMS.Types.Primitive.PbInclusiveCalendarDateRangeReflection.Descriptor, global::HOLMS.Types.Money.Cards.CardMerchantIndicatorReflection.Descriptor, global::HOLMS.Types.Money.Cards.MerchantCaptureReflection.Descriptor, global::HOLMS.Types.Money.Cards.MerchantCaptureIndicatorReflection.Descriptor, global::HOLMS.Types.Money.Cards.MerchantBatchReflection.Descriptor, global::HOLMS.Types.Money.Cards.PaymentCardVerificationRequestReflection.Descriptor, global::HOLMS.Types.Money.Cards.ProcessorTransactionResultReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::HOLMS.Types.Money.RPC.CardProcessingSvcCancelPendingCaptureResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.RPC.CardProcessingSvcCaptureEnumResponse), global::HOLMS.Types.Money.RPC.CardProcessingSvcCaptureEnumResponse.Parser, new[]{ "Captures" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse), global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse.Parser, new[]{ "Batches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.RPC.CardProcessingSvcCancelPendingCaptureResponse), global::HOLMS.Types.Money.RPC.CardProcessingSvcCancelPendingCaptureResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse), global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse.Parser, new[]{ "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CardProcessingSvcCancelPendingCaptureResult {
    [pbr::OriginalName("CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_SUCCESS")] CardProcessingSvcCancelPendingCaptureSuccess = 0,
    [pbr::OriginalName("CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_NOT_FOUND")] CardProcessingSvcCancelPendingCaptureNotFound = 1,
    [pbr::OriginalName("CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_NOT_CANCELLABLE")] CardProcessingSvcCancelPendingCaptureNotCancellable = 2,
    [pbr::OriginalName("CARD_PROCESSING_SVC_CANCEL_PENDING_CAPTURE_UNKNOWN_ERROR")] CardProcessingSvcCancelPendingCaptureUnknownError = 3,
  }

  #endregion

  #region Messages
  public sealed partial class CardProcessingSvcCaptureEnumResponse : pb::IMessage<CardProcessingSvcCaptureEnumResponse> {
    private static readonly pb::MessageParser<CardProcessingSvcCaptureEnumResponse> _parser = new pb::MessageParser<CardProcessingSvcCaptureEnumResponse>(() => new CardProcessingSvcCaptureEnumResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardProcessingSvcCaptureEnumResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.RPC.CardProcessingSvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcCaptureEnumResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcCaptureEnumResponse(CardProcessingSvcCaptureEnumResponse other) : this() {
      captures_ = other.captures_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcCaptureEnumResponse Clone() {
      return new CardProcessingSvcCaptureEnumResponse(this);
    }

    /// <summary>Field number for the "captures" field.</summary>
    public const int CapturesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Money.Cards.MerchantCapture> _repeated_captures_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Money.Cards.MerchantCapture.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Money.Cards.MerchantCapture> captures_ = new pbc::RepeatedField<global::HOLMS.Types.Money.Cards.MerchantCapture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Money.Cards.MerchantCapture> Captures {
      get { return captures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardProcessingSvcCaptureEnumResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardProcessingSvcCaptureEnumResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!captures_.Equals(other.captures_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= captures_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      captures_.WriteTo(output, _repeated_captures_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += captures_.CalculateSize(_repeated_captures_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardProcessingSvcCaptureEnumResponse other) {
      if (other == null) {
        return;
      }
      captures_.Add(other.captures_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            captures_.AddEntriesFrom(input, _repeated_captures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MerchantBatchEnumResponse : pb::IMessage<MerchantBatchEnumResponse> {
    private static readonly pb::MessageParser<MerchantBatchEnumResponse> _parser = new pb::MessageParser<MerchantBatchEnumResponse>(() => new MerchantBatchEnumResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MerchantBatchEnumResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.RPC.CardProcessingSvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerchantBatchEnumResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerchantBatchEnumResponse(MerchantBatchEnumResponse other) : this() {
      batches_ = other.batches_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MerchantBatchEnumResponse Clone() {
      return new MerchantBatchEnumResponse(this);
    }

    /// <summary>Field number for the "batches" field.</summary>
    public const int BatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Money.Cards.MerchantBatch> _repeated_batches_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Money.Cards.MerchantBatch.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Money.Cards.MerchantBatch> batches_ = new pbc::RepeatedField<global::HOLMS.Types.Money.Cards.MerchantBatch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Money.Cards.MerchantBatch> Batches {
      get { return batches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MerchantBatchEnumResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MerchantBatchEnumResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!batches_.Equals(other.batches_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= batches_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      batches_.WriteTo(output, _repeated_batches_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += batches_.CalculateSize(_repeated_batches_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MerchantBatchEnumResponse other) {
      if (other == null) {
        return;
      }
      batches_.Add(other.batches_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            batches_.AddEntriesFrom(input, _repeated_batches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardProcessingSvcCancelPendingCaptureResponse : pb::IMessage<CardProcessingSvcCancelPendingCaptureResponse> {
    private static readonly pb::MessageParser<CardProcessingSvcCancelPendingCaptureResponse> _parser = new pb::MessageParser<CardProcessingSvcCancelPendingCaptureResponse>(() => new CardProcessingSvcCancelPendingCaptureResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardProcessingSvcCancelPendingCaptureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.RPC.CardProcessingSvcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcCancelPendingCaptureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcCancelPendingCaptureResponse(CardProcessingSvcCancelPendingCaptureResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcCancelPendingCaptureResponse Clone() {
      return new CardProcessingSvcCancelPendingCaptureResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Money.RPC.CardProcessingSvcCancelPendingCaptureResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.RPC.CardProcessingSvcCancelPendingCaptureResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardProcessingSvcCancelPendingCaptureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardProcessingSvcCancelPendingCaptureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardProcessingSvcCancelPendingCaptureResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Money.RPC.CardProcessingSvcCancelPendingCaptureResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse : pb::IMessage<CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> {
    private static readonly pb::MessageParser<CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> _parser = new pb::MessageParser<CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse>(() => new CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.RPC.CardProcessingSvcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse(CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse Clone() {
      return new CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Money.Cards.ProcessorTransactionResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Cards.ProcessorTransactionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Money.Cards.ProcessorTransactionResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

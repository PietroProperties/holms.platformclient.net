// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: folio/tax_assessment_estimate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Folio {

  /// <summary>Holder for reflection information generated from folio/tax_assessment_estimate.proto</summary>
  public static partial class TaxAssessmentEstimateReflection {

    #region Descriptor
    /// <summary>File descriptor for folio/tax_assessment_estimate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxAssessmentEstimateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNmb2xpby90YXhfYXNzZXNzbWVudF9lc3RpbWF0ZS5wcm90bxIRaG9sbXMu",
            "dHlwZXMuZm9saW8aHm1vbmV5L2FjY291bnRpbmcvdGF4X2ZlZS5wcm90bxof",
            "cHJpbWl0aXZlL21vbmV0YXJ5X2Ftb3VudC5wcm90byKPAQoVVGF4QXNzZXNz",
            "bWVudEVzdGltYXRlEjEKA3RheBgBIAEoCzIkLmhvbG1zLnR5cGVzLm1vbmV5",
            "LmFjY291bnRpbmcuVGF4RmVlEkMKFGVzdGltYXRlZF90YXhfYW1vdW50GAIg",
            "ASgLMiUuaG9sbXMudHlwZXMucHJpbWl0aXZlLk1vbmV0YXJ5QW1vdW50Qhta",
            "BWZvbGlvqgIRSE9MTVMuVHlwZXMuRm9saW9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Money.Accounting.TaxFeeReflection.Descriptor, global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Folio.TaxAssessmentEstimate), global::HOLMS.Types.Folio.TaxAssessmentEstimate.Parser, new[]{ "Tax", "EstimatedTaxAmount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TaxAssessmentEstimate : pb::IMessage<TaxAssessmentEstimate> {
    private static readonly pb::MessageParser<TaxAssessmentEstimate> _parser = new pb::MessageParser<TaxAssessmentEstimate>(() => new TaxAssessmentEstimate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxAssessmentEstimate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Folio.TaxAssessmentEstimateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxAssessmentEstimate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxAssessmentEstimate(TaxAssessmentEstimate other) : this() {
      Tax = other.tax_ != null ? other.Tax.Clone() : null;
      EstimatedTaxAmount = other.estimatedTaxAmount_ != null ? other.EstimatedTaxAmount.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxAssessmentEstimate Clone() {
      return new TaxAssessmentEstimate(this);
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 1;
    private global::HOLMS.Types.Money.Accounting.TaxFee tax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.TaxFee Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "estimated_tax_amount" field.</summary>
    public const int EstimatedTaxAmountFieldNumber = 2;
    private global::HOLMS.Types.Primitive.MonetaryAmount estimatedTaxAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount EstimatedTaxAmount {
      get { return estimatedTaxAmount_; }
      set {
        estimatedTaxAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxAssessmentEstimate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxAssessmentEstimate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tax, other.Tax)) return false;
      if (!object.Equals(EstimatedTaxAmount, other.EstimatedTaxAmount)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tax_ != null) hash ^= Tax.GetHashCode();
      if (estimatedTaxAmount_ != null) hash ^= EstimatedTaxAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tax_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tax);
      }
      if (estimatedTaxAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EstimatedTaxAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tax);
      }
      if (estimatedTaxAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EstimatedTaxAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxAssessmentEstimate other) {
      if (other == null) {
        return;
      }
      if (other.tax_ != null) {
        if (tax_ == null) {
          tax_ = new global::HOLMS.Types.Money.Accounting.TaxFee();
        }
        Tax.MergeFrom(other.Tax);
      }
      if (other.estimatedTaxAmount_ != null) {
        if (estimatedTaxAmount_ == null) {
          estimatedTaxAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        EstimatedTaxAmount.MergeFrom(other.EstimatedTaxAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tax_ == null) {
              tax_ = new global::HOLMS.Types.Money.Accounting.TaxFee();
            }
            input.ReadMessage(tax_);
            break;
          }
          case 18: {
            if (estimatedTaxAmount_ == null) {
              estimatedTaxAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(estimatedTaxAmount_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

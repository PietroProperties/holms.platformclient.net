// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/ota_base_supply_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Supply.RPC {

  /// <summary>Holder for reflection information generated from supply/rpc/ota_base_supply_svc.proto</summary>
  public static partial class OtaBaseSupplySvcReflection {

    #region Descriptor
    /// <summary>File descriptor for supply/rpc/ota_base_supply_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OtaBaseSupplySvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRzdXBwbHkvcnBjL290YV9iYXNlX3N1cHBseV9zdmMucHJvdG8SFmhvbG1z",
            "LnR5cGVzLnN1cHBseS5ycGMaKnByaW1pdGl2ZS9wYl9pbmNsdXNpdmVfb3Bz",
            "ZGF0ZV9yYW5nZS5wcm90bxodcHJpbWl0aXZlL3BiX2xvY2FsX2RhdGUucHJv",
            "dG8aH3ByaW1pdGl2ZS9tb25ldGFyeV9hbW91bnQucHJvdG8aK3N1cHBseS9y",
            "b29tX3R5cGVzL3Jvb21fdHlwZV9pbmRpY2F0b3IucHJvdG8aNWJvb2tpbmcv",
            "Y2hhbm5lbHMvb3RhX2NoYW5uZWxfcHJvdmlkZXJfaW5kaWNhdG9yLnByb3Rv",
            "GiFwcmltaXRpdmUvZml4ZWRfcG9pbnRfcmF0aW8ucHJvdG8iXQoXT3RhU3Vw",
            "cGx5RGV0YWlsc1JlcXVlc3QSQgoKZGF0ZV9yYW5nZRgBIAEoCzIuLmhvbG1z",
            "LnR5cGVzLnByaW1pdGl2ZS5QYkluY2x1c2l2ZU9wc2RhdGVSYW5nZSKFAwoY",
            "Q2hhbm5lbEFsbG9jYXRpb25QcmljaW5nEkMKCXJvb21fdHlwZRgBIAEoCzIw",
            "LmhvbG1zLnR5cGVzLnN1cHBseS5yb29tX3R5cGVzLlJvb21UeXBlSW5kaWNh",
            "dG9yEjAKBGRhdGUYAiABKAsyIi5ob2xtcy50eXBlcy5wcmltaXRpdmUuUGJM",
            "b2NhbERhdGUSPAoNb2ZmZXJlZF9wcmljZRgDIAEoCzIlLmhvbG1zLnR5cGVz",
            "LnByaW1pdGl2ZS5Nb25ldGFyeUFtb3VudBIRCglhdmFpbGFibGUYBCABKAUS",
            "TwoMb3RhX3Byb3ZpZGVyGAUgASgLMjkuaG9sbXMudHlwZXMuYm9va2luZy5j",
            "aGFubmVscy5PVEFDaGFubmVsUHJvdmlkZXJJbmRpY2F0b3ISFAoMaXNfU3Rv",
            "cF9zZWxsGAYgASgIEjoKCnByaWNlX3JhdGUYByABKAsyJi5ob2xtcy50eXBl",
            "cy5wcmltaXRpdmUuRml4ZWRQb2ludFJhdGlvIp4BCg9DaGFubmVsU3RvcFNl",
            "bGwSQwoJcm9vbV90eXBlGAEgASgLMjAuaG9sbXMudHlwZXMuc3VwcGx5LnJv",
            "b21fdHlwZXMuUm9vbVR5cGVJbmRpY2F0b3ISMAoEZGF0ZRgCIAEoCzIiLmhv",
            "bG1zLnR5cGVzLnByaW1pdGl2ZS5QYkxvY2FsRGF0ZRIUCgxpc19TdG9wX3Nl",
            "bGwYAyABKAgidgoeQ2hhbm5lbEFsbG9jYXRpb25VcGRhdGVSZXF1ZXN0ElQK",
            "GmNoYW5uZWxfYWxsb2NhdGlvbl9wcmljaW5nGAEgAygLMjAuaG9sbXMudHlw",
            "ZXMuc3VwcGx5LnJwYy5DaGFubmVsQWxsb2NhdGlvblByaWNpbmciYgocQ2hh",
            "bm5lbFN0b3BTZWxsVXBkYXRlUmVxdWVzdBJCChFjaGFubmVsX3N0b3Bfc2Vs",
            "bBgBIAMoCzInLmhvbG1zLnR5cGVzLnN1cHBseS5ycGMuQ2hhbm5lbFN0b3BT",
            "ZWxsImgKH0NoYW5uZWxBbGxvY2F0aW9uVXBkYXRlUmVzcG9uc2USRQoGUmVz",
            "dWx0GAEgASgOMjUuaG9sbXMudHlwZXMuc3VwcGx5LnJwYy5DaGFubmVsQWxs",
            "b2NhdGlvblVwZGF0ZVJlc3VsdCJwChhPdGFTdXBwbHlEZXRhaWxzUmVzcG9u",
            "c2USVAoaY2hhbm5lbF9hbGxvY2F0aW9uX3ByaWNpbmcYASADKAsyMC5ob2xt",
            "cy50eXBlcy5zdXBwbHkucnBjLkNoYW5uZWxBbGxvY2F0aW9uUHJpY2luZyqE",
            "AQodQ2hhbm5lbEFsbG9jYXRpb25VcGRhdGVSZXN1bHQSEQoNVVBEQVRFX0ZB",
            "SUxFRBAAEhcKE0RCX1VQREFURV9DUl9GQUlMRUQQARIgChxDUl9VUERBVEVf",
            "U1lOQ19TVEFUVVNfRkFJTEVEEAISFQoRVVBEQVRFX1NVQ0NFU1NGVUwQAzKP",
            "BAoQT3RhQmFzZVN1cHBseVN2YxJwCgtBbGxGb3JEYXRlcxIvLmhvbG1zLnR5",
            "cGVzLnN1cHBseS5ycGMuT3RhU3VwcGx5RGV0YWlsc1JlcXVlc3QaMC5ob2xt",
            "cy50eXBlcy5zdXBwbHkucnBjLk90YVN1cHBseURldGFpbHNSZXNwb25zZRKH",
            "AQoUSW5zZXJ0T3JVcGRhdGVTdXBwbHkSNi5ob2xtcy50eXBlcy5zdXBwbHku",
            "cnBjLkNoYW5uZWxBbGxvY2F0aW9uVXBkYXRlUmVxdWVzdBo3LmhvbG1zLnR5",
            "cGVzLnN1cHBseS5ycGMuQ2hhbm5lbEFsbG9jYXRpb25VcGRhdGVSZXNwb25z",
            "ZRJ/Cg5VcGRhdGVTdG9wU2VsbBI0LmhvbG1zLnR5cGVzLnN1cHBseS5ycGMu",
            "Q2hhbm5lbFN0b3BTZWxsVXBkYXRlUmVxdWVzdBo3LmhvbG1zLnR5cGVzLnN1",
            "cHBseS5ycGMuQ2hhbm5lbEFsbG9jYXRpb25VcGRhdGVSZXNwb25zZRJ+CgtV",
            "cGRhdGVQcmljZRI2LmhvbG1zLnR5cGVzLnN1cHBseS5ycGMuQ2hhbm5lbEFs",
            "bG9jYXRpb25VcGRhdGVSZXF1ZXN0GjcuaG9sbXMudHlwZXMuc3VwcGx5LnJw",
            "Yy5DaGFubmVsQWxsb2NhdGlvblVwZGF0ZVJlc3BvbnNlQiVaCnN1cHBseS9y",
            "cGOqAhZIT0xNUy5UeXBlcy5TdXBwbHkuUlBDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Primitive.PbLocalDateReflection.Descriptor, global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor, global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Channels.OtaChannelProviderIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.FixedPointRatioReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest), global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest.Parser, new[]{ "DateRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing), global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing.Parser, new[]{ "RoomType", "Date", "OfferedPrice", "Available", "OtaProvider", "IsStopSell", "PriceRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.ChannelStopSell), global::HOLMS.Types.Supply.RPC.ChannelStopSell.Parser, new[]{ "RoomType", "Date", "IsStopSell" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest), global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest.Parser, new[]{ "ChannelAllocationPricing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest), global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest.Parser, new[]{ "ChannelStopSell" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse), global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse), global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse.Parser, new[]{ "ChannelAllocationPricing" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ChannelAllocationUpdateResult {
    [pbr::OriginalName("UPDATE_FAILED")] UpdateFailed = 0,
    [pbr::OriginalName("DB_UPDATE_CR_FAILED")] DbUpdateCrFailed = 1,
    [pbr::OriginalName("CR_UPDATE_SYNC_STATUS_FAILED")] CrUpdateSyncStatusFailed = 2,
    [pbr::OriginalName("UPDATE_SUCCESSFUL")] UpdateSuccessful = 3,
  }

  #endregion

  #region Messages
  public sealed partial class OtaSupplyDetailsRequest : pb::IMessage<OtaSupplyDetailsRequest> {
    private static readonly pb::MessageParser<OtaSupplyDetailsRequest> _parser = new pb::MessageParser<OtaSupplyDetailsRequest>(() => new OtaSupplyDetailsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtaSupplyDetailsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtaSupplyDetailsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtaSupplyDetailsRequest(OtaSupplyDetailsRequest other) : this() {
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtaSupplyDetailsRequest Clone() {
      return new OtaSupplyDetailsRequest(this);
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 1;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtaSupplyDetailsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtaSupplyDetailsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DateRange, other.DateRange)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dateRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DateRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtaSupplyDetailsRequest other) {
      if (other == null) {
        return;
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelAllocationPricing : pb::IMessage<ChannelAllocationPricing> {
    private static readonly pb::MessageParser<ChannelAllocationPricing> _parser = new pb::MessageParser<ChannelAllocationPricing>(() => new ChannelAllocationPricing());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAllocationPricing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationPricing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationPricing(ChannelAllocationPricing other) : this() {
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      Date = other.date_ != null ? other.Date.Clone() : null;
      OfferedPrice = other.offeredPrice_ != null ? other.OfferedPrice.Clone() : null;
      available_ = other.available_;
      OtaProvider = other.otaProvider_ != null ? other.OtaProvider.Clone() : null;
      isStopSell_ = other.isStopSell_;
      PriceRate = other.priceRate_ != null ? other.PriceRate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationPricing Clone() {
      return new ChannelAllocationPricing(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private global::HOLMS.Types.Primitive.PbLocalDate date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbLocalDate Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "offered_price" field.</summary>
    public const int OfferedPriceFieldNumber = 3;
    private global::HOLMS.Types.Primitive.MonetaryAmount offeredPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount OfferedPrice {
      get { return offeredPrice_; }
      set {
        offeredPrice_ = value;
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 4;
    private int available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "ota_provider" field.</summary>
    public const int OtaProviderFieldNumber = 5;
    private global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator otaProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator OtaProvider {
      get { return otaProvider_; }
      set {
        otaProvider_ = value;
      }
    }

    /// <summary>Field number for the "is_Stop_sell" field.</summary>
    public const int IsStopSellFieldNumber = 6;
    private bool isStopSell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStopSell {
      get { return isStopSell_; }
      set {
        isStopSell_ = value;
      }
    }

    /// <summary>Field number for the "price_rate" field.</summary>
    public const int PriceRateFieldNumber = 7;
    private global::HOLMS.Types.Primitive.FixedPointRatio priceRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.FixedPointRatio PriceRate {
      get { return priceRate_; }
      set {
        priceRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAllocationPricing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAllocationPricing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(OfferedPrice, other.OfferedPrice)) return false;
      if (Available != other.Available) return false;
      if (!object.Equals(OtaProvider, other.OtaProvider)) return false;
      if (IsStopSell != other.IsStopSell) return false;
      if (!object.Equals(PriceRate, other.PriceRate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (offeredPrice_ != null) hash ^= OfferedPrice.GetHashCode();
      if (Available != 0) hash ^= Available.GetHashCode();
      if (otaProvider_ != null) hash ^= OtaProvider.GetHashCode();
      if (IsStopSell != false) hash ^= IsStopSell.GetHashCode();
      if (priceRate_ != null) hash ^= PriceRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomType);
      }
      if (date_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Date);
      }
      if (offeredPrice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OfferedPrice);
      }
      if (Available != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Available);
      }
      if (otaProvider_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OtaProvider);
      }
      if (IsStopSell != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsStopSell);
      }
      if (priceRate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PriceRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (offeredPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OfferedPrice);
      }
      if (Available != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Available);
      }
      if (otaProvider_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtaProvider);
      }
      if (IsStopSell != false) {
        size += 1 + 1;
      }
      if (priceRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceRate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAllocationPricing other) {
      if (other == null) {
        return;
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.date_ != null) {
        if (date_ == null) {
          date_ = new global::HOLMS.Types.Primitive.PbLocalDate();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.offeredPrice_ != null) {
        if (offeredPrice_ == null) {
          offeredPrice_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        OfferedPrice.MergeFrom(other.OfferedPrice);
      }
      if (other.Available != 0) {
        Available = other.Available;
      }
      if (other.otaProvider_ != null) {
        if (otaProvider_ == null) {
          otaProvider_ = new global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator();
        }
        OtaProvider.MergeFrom(other.OtaProvider);
      }
      if (other.IsStopSell != false) {
        IsStopSell = other.IsStopSell;
      }
      if (other.priceRate_ != null) {
        if (priceRate_ == null) {
          priceRate_ = new global::HOLMS.Types.Primitive.FixedPointRatio();
        }
        PriceRate.MergeFrom(other.PriceRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 18: {
            if (date_ == null) {
              date_ = new global::HOLMS.Types.Primitive.PbLocalDate();
            }
            input.ReadMessage(date_);
            break;
          }
          case 26: {
            if (offeredPrice_ == null) {
              offeredPrice_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(offeredPrice_);
            break;
          }
          case 32: {
            Available = input.ReadInt32();
            break;
          }
          case 42: {
            if (otaProvider_ == null) {
              otaProvider_ = new global::HOLMS.Types.Booking.Channels.OTAChannelProviderIndicator();
            }
            input.ReadMessage(otaProvider_);
            break;
          }
          case 48: {
            IsStopSell = input.ReadBool();
            break;
          }
          case 58: {
            if (priceRate_ == null) {
              priceRate_ = new global::HOLMS.Types.Primitive.FixedPointRatio();
            }
            input.ReadMessage(priceRate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelStopSell : pb::IMessage<ChannelStopSell> {
    private static readonly pb::MessageParser<ChannelStopSell> _parser = new pb::MessageParser<ChannelStopSell>(() => new ChannelStopSell());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelStopSell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelStopSell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelStopSell(ChannelStopSell other) : this() {
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      Date = other.date_ != null ? other.Date.Clone() : null;
      isStopSell_ = other.isStopSell_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelStopSell Clone() {
      return new ChannelStopSell(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private global::HOLMS.Types.Primitive.PbLocalDate date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbLocalDate Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "is_Stop_sell" field.</summary>
    public const int IsStopSellFieldNumber = 3;
    private bool isStopSell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStopSell {
      get { return isStopSell_; }
      set {
        isStopSell_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelStopSell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelStopSell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (IsStopSell != other.IsStopSell) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (IsStopSell != false) hash ^= IsStopSell.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomType);
      }
      if (date_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Date);
      }
      if (IsStopSell != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsStopSell);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (IsStopSell != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelStopSell other) {
      if (other == null) {
        return;
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.date_ != null) {
        if (date_ == null) {
          date_ = new global::HOLMS.Types.Primitive.PbLocalDate();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.IsStopSell != false) {
        IsStopSell = other.IsStopSell;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 18: {
            if (date_ == null) {
              date_ = new global::HOLMS.Types.Primitive.PbLocalDate();
            }
            input.ReadMessage(date_);
            break;
          }
          case 24: {
            IsStopSell = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelAllocationUpdateRequest : pb::IMessage<ChannelAllocationUpdateRequest> {
    private static readonly pb::MessageParser<ChannelAllocationUpdateRequest> _parser = new pb::MessageParser<ChannelAllocationUpdateRequest>(() => new ChannelAllocationUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAllocationUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationUpdateRequest(ChannelAllocationUpdateRequest other) : this() {
      channelAllocationPricing_ = other.channelAllocationPricing_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationUpdateRequest Clone() {
      return new ChannelAllocationUpdateRequest(this);
    }

    /// <summary>Field number for the "channel_allocation_pricing" field.</summary>
    public const int ChannelAllocationPricingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing> _repeated_channelAllocationPricing_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing> channelAllocationPricing_ = new pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing> ChannelAllocationPricing {
      get { return channelAllocationPricing_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAllocationUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAllocationUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelAllocationPricing_.Equals(other.channelAllocationPricing_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelAllocationPricing_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelAllocationPricing_.WriteTo(output, _repeated_channelAllocationPricing_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelAllocationPricing_.CalculateSize(_repeated_channelAllocationPricing_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAllocationUpdateRequest other) {
      if (other == null) {
        return;
      }
      channelAllocationPricing_.Add(other.channelAllocationPricing_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            channelAllocationPricing_.AddEntriesFrom(input, _repeated_channelAllocationPricing_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelStopSellUpdateRequest : pb::IMessage<ChannelStopSellUpdateRequest> {
    private static readonly pb::MessageParser<ChannelStopSellUpdateRequest> _parser = new pb::MessageParser<ChannelStopSellUpdateRequest>(() => new ChannelStopSellUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelStopSellUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelStopSellUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelStopSellUpdateRequest(ChannelStopSellUpdateRequest other) : this() {
      channelStopSell_ = other.channelStopSell_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelStopSellUpdateRequest Clone() {
      return new ChannelStopSellUpdateRequest(this);
    }

    /// <summary>Field number for the "channel_stop_sell" field.</summary>
    public const int ChannelStopSellFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Supply.RPC.ChannelStopSell> _repeated_channelStopSell_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Supply.RPC.ChannelStopSell.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelStopSell> channelStopSell_ = new pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelStopSell>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelStopSell> ChannelStopSell {
      get { return channelStopSell_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelStopSellUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelStopSellUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelStopSell_.Equals(other.channelStopSell_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelStopSell_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelStopSell_.WriteTo(output, _repeated_channelStopSell_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelStopSell_.CalculateSize(_repeated_channelStopSell_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelStopSellUpdateRequest other) {
      if (other == null) {
        return;
      }
      channelStopSell_.Add(other.channelStopSell_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            channelStopSell_.AddEntriesFrom(input, _repeated_channelStopSell_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelAllocationUpdateResponse : pb::IMessage<ChannelAllocationUpdateResponse> {
    private static readonly pb::MessageParser<ChannelAllocationUpdateResponse> _parser = new pb::MessageParser<ChannelAllocationUpdateResponse>(() => new ChannelAllocationUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAllocationUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationUpdateResponse(ChannelAllocationUpdateResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAllocationUpdateResponse Clone() {
      return new ChannelAllocationUpdateResponse(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAllocationUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAllocationUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAllocationUpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtaSupplyDetailsResponse : pb::IMessage<OtaSupplyDetailsResponse> {
    private static readonly pb::MessageParser<OtaSupplyDetailsResponse> _parser = new pb::MessageParser<OtaSupplyDetailsResponse>(() => new OtaSupplyDetailsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtaSupplyDetailsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtaSupplyDetailsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtaSupplyDetailsResponse(OtaSupplyDetailsResponse other) : this() {
      channelAllocationPricing_ = other.channelAllocationPricing_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtaSupplyDetailsResponse Clone() {
      return new OtaSupplyDetailsResponse(this);
    }

    /// <summary>Field number for the "channel_allocation_pricing" field.</summary>
    public const int ChannelAllocationPricingFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing> _repeated_channelAllocationPricing_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing> channelAllocationPricing_ = new pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Supply.RPC.ChannelAllocationPricing> ChannelAllocationPricing {
      get { return channelAllocationPricing_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtaSupplyDetailsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtaSupplyDetailsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelAllocationPricing_.Equals(other.channelAllocationPricing_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelAllocationPricing_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelAllocationPricing_.WriteTo(output, _repeated_channelAllocationPricing_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelAllocationPricing_.CalculateSize(_repeated_channelAllocationPricing_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtaSupplyDetailsResponse other) {
      if (other == null) {
        return;
      }
      channelAllocationPricing_.Add(other.channelAllocationPricing_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            channelAllocationPricing_.AddEntriesFrom(input, _repeated_channelAllocationPricing_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

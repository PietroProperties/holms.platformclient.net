// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/incidental_items/incidental_item_availability_query.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Supply.IncidentalItems {

  /// <summary>Holder for reflection information generated from supply/incidental_items/incidental_item_availability_query.proto</summary>
  public static partial class IncidentalItemAvailabilityQueryReflection {

    #region Descriptor
    /// <summary>File descriptor for supply/incidental_items/incidental_item_availability_query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IncidentalItemAvailabilityQueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkBzdXBwbHkvaW5jaWRlbnRhbF9pdGVtcy9pbmNpZGVudGFsX2l0ZW1fYXZh",
            "aWxhYmlsaXR5X3F1ZXJ5LnByb3RvEiNob2xtcy50eXBlcy5zdXBwbHkuaW5j",
            "aWRlbnRhbF9pdGVtcxo+Ym9va2luZy9pbmRpY2F0b3JzL2luY2lkZW50YWxf",
            "aXRlbV9yZXNlcnZhdGlvbl9pbmRpY2F0b3IucHJvdG8aKnByaW1pdGl2ZS9w",
            "Yl9pbmNsdXNpdmVfb3BzZGF0ZV9yYW5nZS5wcm90bxo3c3VwcGx5L2luY2lk",
            "ZW50YWxfaXRlbXMvaW5jaWRlbnRhbF9pdGVtX2luZGljYXRvci5wcm90byLo",
            "AgofSW5jaWRlbnRhbEl0ZW1BdmFpbGFiaWxpdHlRdWVyeRJVCgllbnRpdHlf",
            "aWQYASABKAsyQi5ob2xtcy50eXBlcy5ib29raW5nLmluZGljYXRvcnMuSW5j",
            "aWRlbnRhbEl0ZW1SZXNlcnZhdGlvbkluZGljYXRvchImCh5pc19mb3JfZXhp",
            "c3RpbmdfaWlfcmVzZXJ2YXRpb24YAiABKAgSQgoKZGF0ZV9yYW5nZRgDIAEo",
            "CzIuLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5QYkluY2x1c2l2ZU9wc2RhdGVS",
            "YW5nZRJTCg1yZXNlcnZlZF9pdGVtGAQgASgLMjwuaG9sbXMudHlwZXMuc3Vw",
            "cGx5LmluY2lkZW50YWxfaXRlbXMuSW5jaWRlbnRhbEl0ZW1JbmRpY2F0b3IS",
            "LQolcXVhbnRpdHlfaGVsZF9ieV9leGlzdGluZ19yZXNlcnZhdGlvbhgFIAEo",
            "DUI+WhdzdXBwbHkvaW5jaWRlbnRhbHN1cHBseaoCIkhPTE1TLlR5cGVzLlN1",
            "cHBseS5JbmNpZGVudGFsSXRlbXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Indicators.IncidentalItemReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemAvailabilityQuery), global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemAvailabilityQuery.Parser, new[]{ "EntityId", "IsForExistingIiReservation", "DateRange", "ReservedItem", "QuantityHeldByExistingReservation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IncidentalItemAvailabilityQuery : pb::IMessage<IncidentalItemAvailabilityQuery> {
    private static readonly pb::MessageParser<IncidentalItemAvailabilityQuery> _parser = new pb::MessageParser<IncidentalItemAvailabilityQuery>(() => new IncidentalItemAvailabilityQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncidentalItemAvailabilityQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemAvailabilityQueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncidentalItemAvailabilityQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncidentalItemAvailabilityQuery(IncidentalItemAvailabilityQuery other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      isForExistingIiReservation_ = other.isForExistingIiReservation_;
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
      ReservedItem = other.reservedItem_ != null ? other.ReservedItem.Clone() : null;
      quantityHeldByExistingReservation_ = other.quantityHeldByExistingReservation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncidentalItemAvailabilityQuery Clone() {
      return new IncidentalItemAvailabilityQuery(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.IncidentalItemReservationIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.IncidentalItemReservationIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "is_for_existing_ii_reservation" field.</summary>
    public const int IsForExistingIiReservationFieldNumber = 2;
    private bool isForExistingIiReservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForExistingIiReservation {
      get { return isForExistingIiReservation_; }
      set {
        isForExistingIiReservation_ = value;
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 3;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "reserved_item" field.</summary>
    public const int ReservedItemFieldNumber = 4;
    private global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator reservedItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator ReservedItem {
      get { return reservedItem_; }
      set {
        reservedItem_ = value;
      }
    }

    /// <summary>Field number for the "quantity_held_by_existing_reservation" field.</summary>
    public const int QuantityHeldByExistingReservationFieldNumber = 5;
    private uint quantityHeldByExistingReservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QuantityHeldByExistingReservation {
      get { return quantityHeldByExistingReservation_; }
      set {
        quantityHeldByExistingReservation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncidentalItemAvailabilityQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncidentalItemAvailabilityQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (IsForExistingIiReservation != other.IsForExistingIiReservation) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (!object.Equals(ReservedItem, other.ReservedItem)) return false;
      if (QuantityHeldByExistingReservation != other.QuantityHeldByExistingReservation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (IsForExistingIiReservation != false) hash ^= IsForExistingIiReservation.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (reservedItem_ != null) hash ^= ReservedItem.GetHashCode();
      if (QuantityHeldByExistingReservation != 0) hash ^= QuantityHeldByExistingReservation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (IsForExistingIiReservation != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsForExistingIiReservation);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DateRange);
      }
      if (reservedItem_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReservedItem);
      }
      if (QuantityHeldByExistingReservation != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(QuantityHeldByExistingReservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (IsForExistingIiReservation != false) {
        size += 1 + 1;
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (reservedItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservedItem);
      }
      if (QuantityHeldByExistingReservation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuantityHeldByExistingReservation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncidentalItemAvailabilityQuery other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Booking.Indicators.IncidentalItemReservationIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.IsForExistingIiReservation != false) {
        IsForExistingIiReservation = other.IsForExistingIiReservation;
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.reservedItem_ != null) {
        if (reservedItem_ == null) {
          reservedItem_ = new global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator();
        }
        ReservedItem.MergeFrom(other.ReservedItem);
      }
      if (other.QuantityHeldByExistingReservation != 0) {
        QuantityHeldByExistingReservation = other.QuantityHeldByExistingReservation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Booking.Indicators.IncidentalItemReservationIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 16: {
            IsForExistingIiReservation = input.ReadBool();
            break;
          }
          case 26: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
          case 34: {
            if (reservedItem_ == null) {
              reservedItem_ = new global::HOLMS.Types.Supply.IncidentalItems.IncidentalItemIndicator();
            }
            input.ReadMessage(reservedItem_);
            break;
          }
          case 40: {
            QuantityHeldByExistingReservation = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/accounting/iif_export_configuration.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Money.Accounting {

  /// <summary>Holder for reflection information generated from money/accounting/iif_export_configuration.proto</summary>
  public static partial class IifExportConfigurationReflection {

    #region Descriptor
    /// <summary>File descriptor for money/accounting/iif_export_configuration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IifExportConfigurationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9tb25leS9hY2NvdW50aW5nL2lpZl9leHBvcnRfY29uZmlndXJhdGlvbi5w",
            "cm90bxIcaG9sbXMudHlwZXMubW9uZXkuYWNjb3VudGluZyI3ChZJSUZFeHBv",
            "cnRDb25maWd1cmF0aW9uEh0KFXJlY3VycmVuY2VfZGVzY3JpcHRvchgBIAEo",
            "CUIxWhBtb25leS9hY2NvdW50aW5nqgIcSE9MTVMuVHlwZXMuTW9uZXkuQWNj",
            "b3VudGluZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.Accounting.IIFExportConfiguration), global::HOLMS.Types.Money.Accounting.IIFExportConfiguration.Parser, new[]{ "RecurrenceDescriptor" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IIFExportConfiguration : pb::IMessage<IIFExportConfiguration> {
    private static readonly pb::MessageParser<IIFExportConfiguration> _parser = new pb::MessageParser<IIFExportConfiguration>(() => new IIFExportConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IIFExportConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.Accounting.IifExportConfigurationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IIFExportConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IIFExportConfiguration(IIFExportConfiguration other) : this() {
      recurrenceDescriptor_ = other.recurrenceDescriptor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IIFExportConfiguration Clone() {
      return new IIFExportConfiguration(this);
    }

    /// <summary>Field number for the "recurrence_descriptor" field.</summary>
    public const int RecurrenceDescriptorFieldNumber = 1;
    private string recurrenceDescriptor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecurrenceDescriptor {
      get { return recurrenceDescriptor_; }
      set {
        recurrenceDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IIFExportConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IIFExportConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecurrenceDescriptor != other.RecurrenceDescriptor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecurrenceDescriptor.Length != 0) hash ^= RecurrenceDescriptor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecurrenceDescriptor.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RecurrenceDescriptor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecurrenceDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecurrenceDescriptor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IIFExportConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.RecurrenceDescriptor.Length != 0) {
        RecurrenceDescriptor = other.RecurrenceDescriptor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RecurrenceDescriptor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

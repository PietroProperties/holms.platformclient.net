// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/rpc/card_processing_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Money.RPC {
  public static class CardProcessingSvc
  {
    static readonly string __ServiceName = "holms.types.money.rpc.CardProcessingSvc";

    static readonly Marshaller<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest> __Marshaller_CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> __Marshaller_CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Cards.CardMerchantIndicator> __Marshaller_CardMerchantIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Cards.CardMerchantIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse> __Marshaller_GetOpenBatchStateResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest> __Marshaller_CardProcessingSvcSearchHistoricalBatchesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse> __Marshaller_MerchantBatchEnumResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch> __Marshaller_ClosedMerchantBatch = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator> __Marshaller_PaymentCardSaleIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> __Marshaller_CardProcessingSvcVoidTransactionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator> __Marshaller_PaymentCardRefundIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest, global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> __Method_VerifyAndTokenizeNotPresentCard = new Method<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest, global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse>(
        MethodType.Unary,
        __ServiceName,
        "VerifyAndTokenizeNotPresentCard",
        __Marshaller_CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest,
        __Marshaller_CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse);

    static readonly Method<global::HOLMS.Types.Money.Cards.CardMerchantIndicator, global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse> __Method_GetCurrentBatchState = new Method<global::HOLMS.Types.Money.Cards.CardMerchantIndicator, global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetCurrentBatchState",
        __Marshaller_CardMerchantIndicator,
        __Marshaller_GetOpenBatchStateResponse);

    static readonly Method<global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest, global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse> __Method_SearchHistoricalBatches = new Method<global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest, global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse>(
        MethodType.Unary,
        __ServiceName,
        "SearchHistoricalBatches",
        __Marshaller_CardProcessingSvcSearchHistoricalBatchesRequest,
        __Marshaller_MerchantBatchEnumResponse);

    static readonly Method<global::HOLMS.Types.Money.Cards.CardMerchantIndicator, global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch> __Method_CloseProcessorBatch = new Method<global::HOLMS.Types.Money.Cards.CardMerchantIndicator, global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch>(
        MethodType.Unary,
        __ServiceName,
        "CloseProcessorBatch",
        __Marshaller_CardMerchantIndicator,
        __Marshaller_ClosedMerchantBatch);

    static readonly Method<global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator, global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> __Method_VoidSale = new Method<global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator, global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse>(
        MethodType.Unary,
        __ServiceName,
        "VoidSale",
        __Marshaller_PaymentCardSaleIndicator,
        __Marshaller_CardProcessingSvcVoidTransactionResponse);

    static readonly Method<global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator, global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> __Method_VoidRefund = new Method<global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator, global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse>(
        MethodType.Unary,
        __ServiceName,
        "VoidRefund",
        __Marshaller_PaymentCardRefundIndicator,
        __Marshaller_CardProcessingSvcVoidTransactionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Money.RPC.CardProcessingSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CardProcessingSvc</summary>
    public abstract class CardProcessingSvcBase
    {
      /// <summary>
      ///  Tokenize a new card
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> VerifyAndTokenizeNotPresentCard(global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Batches
      ///  Get info about batches
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse> GetCurrentBatchState(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse> SearchHistoricalBatches(global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Request batch closure
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch> CloseProcessorBatch(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  Post-creation card transaction management
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> VoidSale(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> VoidRefund(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CardProcessingSvc</summary>
    public class CardProcessingSvcClient : ClientBase<CardProcessingSvcClient>
    {
      /// <summary>Creates a new client for CardProcessingSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CardProcessingSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CardProcessingSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CardProcessingSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CardProcessingSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CardProcessingSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Tokenize a new card
      /// </summary>
      public virtual global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse VerifyAndTokenizeNotPresentCard(global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyAndTokenizeNotPresentCard(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Tokenize a new card
      /// </summary>
      public virtual global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse VerifyAndTokenizeNotPresentCard(global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyAndTokenizeNotPresentCard, null, options, request);
      }
      /// <summary>
      ///  Tokenize a new card
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> VerifyAndTokenizeNotPresentCardAsync(global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyAndTokenizeNotPresentCardAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Tokenize a new card
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardResponse> VerifyAndTokenizeNotPresentCardAsync(global::HOLMS.Types.Money.RPC.CardProcessingSvcVerifyAndTokenizeNotPresentCardRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyAndTokenizeNotPresentCard, null, options, request);
      }
      /// <summary>
      ///  Batches
      ///  Get info about batches
      /// </summary>
      public virtual global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse GetCurrentBatchState(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCurrentBatchState(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Batches
      ///  Get info about batches
      /// </summary>
      public virtual global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse GetCurrentBatchState(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCurrentBatchState, null, options, request);
      }
      /// <summary>
      ///  Batches
      ///  Get info about batches
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse> GetCurrentBatchStateAsync(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCurrentBatchStateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Batches
      ///  Get info about batches
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Cards.Transactions.GetOpenBatchStateResponse> GetCurrentBatchStateAsync(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCurrentBatchState, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse SearchHistoricalBatches(global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchHistoricalBatches(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse SearchHistoricalBatches(global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchHistoricalBatches, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse> SearchHistoricalBatchesAsync(global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SearchHistoricalBatchesAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.MerchantBatchEnumResponse> SearchHistoricalBatchesAsync(global::HOLMS.Types.Money.RPC.CardProcessingSvcSearchHistoricalBatchesRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchHistoricalBatches, null, options, request);
      }
      /// <summary>
      ///  Request batch closure
      /// </summary>
      public virtual global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch CloseProcessorBatch(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseProcessorBatch(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Request batch closure
      /// </summary>
      public virtual global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch CloseProcessorBatch(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseProcessorBatch, null, options, request);
      }
      /// <summary>
      ///  Request batch closure
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch> CloseProcessorBatchAsync(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseProcessorBatchAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Request batch closure
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Cards.Transactions.ClosedMerchantBatch> CloseProcessorBatchAsync(global::HOLMS.Types.Money.Cards.CardMerchantIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseProcessorBatch, null, options, request);
      }
      /// <summary>
      ///  Post-creation card transaction management
      /// </summary>
      public virtual global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse VoidSale(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VoidSale(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Post-creation card transaction management
      /// </summary>
      public virtual global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse VoidSale(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoidSale, null, options, request);
      }
      /// <summary>
      ///  Post-creation card transaction management
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> VoidSaleAsync(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VoidSaleAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Post-creation card transaction management
      /// </summary>
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> VoidSaleAsync(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardSaleIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoidSale, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse VoidRefund(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VoidRefund(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse VoidRefund(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoidRefund, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> VoidRefundAsync(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VoidRefundAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.CardProcessingSvcVoidTransactionResponse> VoidRefundAsync(global::HOLMS.Types.Money.Cards.Transactions.PaymentCardRefundIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoidRefund, null, options, request);
      }
      protected override CardProcessingSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CardProcessingSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CardProcessingSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_VerifyAndTokenizeNotPresentCard, serviceImpl.VerifyAndTokenizeNotPresentCard)
          .AddMethod(__Method_GetCurrentBatchState, serviceImpl.GetCurrentBatchState)
          .AddMethod(__Method_SearchHistoricalBatches, serviceImpl.SearchHistoricalBatches)
          .AddMethod(__Method_CloseProcessorBatch, serviceImpl.CloseProcessorBatch)
          .AddMethod(__Method_VoidSale, serviceImpl.VoidSale)
          .AddMethod(__Method_VoidRefund, serviceImpl.VoidRefund).Build();
    }

  }
}
#endregion

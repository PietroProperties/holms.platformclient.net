// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/pricing_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Supply.RPC {
  public static class PricingSvc
  {
    static readonly string __ServiceName = "holms.types.supply.rpc.PricingSvc";

    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest> __Marshaller_PricingSvcRoomTypeQueryRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> __Marshaller_PricingSvcQueryResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest> __Marshaller_PricingSvcPropertyQueryRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest> __Marshaller_PricingSvcUpdateRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest, global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> __Method_QueryByRoomType = new Method<global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest, global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse>(
        MethodType.Unary,
        __ServiceName,
        "QueryByRoomType",
        __Marshaller_PricingSvcRoomTypeQueryRequest,
        __Marshaller_PricingSvcQueryResponse);

    static readonly Method<global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest, global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> __Method_QueryByProperty = new Method<global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest, global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse>(
        MethodType.Unary,
        __ServiceName,
        "QueryByProperty",
        __Marshaller_PricingSvcPropertyQueryRequest,
        __Marshaller_PricingSvcQueryResponse);

    static readonly Method<global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Update = new Method<global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_PricingSvcUpdateRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Supply.RPC.PricingSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PricingSvc</summary>
    public abstract class PricingSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> QueryByRoomType(global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> QueryByProperty(global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Update(global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PricingSvc</summary>
    public class PricingSvcClient : ClientBase<PricingSvcClient>
    {
      /// <summary>Creates a new client for PricingSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PricingSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PricingSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PricingSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PricingSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PricingSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse QueryByRoomType(global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryByRoomType(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse QueryByRoomType(global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryByRoomType, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> QueryByRoomTypeAsync(global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryByRoomTypeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> QueryByRoomTypeAsync(global::HOLMS.Types.Supply.RPC.PricingSvcRoomTypeQueryRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryByRoomType, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse QueryByProperty(global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryByProperty(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse QueryByProperty(global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryByProperty, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> QueryByPropertyAsync(global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryByPropertyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingSvcQueryResponse> QueryByPropertyAsync(global::HOLMS.Types.Supply.RPC.PricingSvcPropertyQueryRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryByProperty, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Update(global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Update(global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateAsync(global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateAsync(global::HOLMS.Types.Supply.RPC.PricingSvcUpdateRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      protected override PricingSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PricingSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(PricingSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_QueryByRoomType, serviceImpl.QueryByRoomType)
          .AddMethod(__Method_QueryByProperty, serviceImpl.QueryByProperty)
          .AddMethod(__Method_Update, serviceImpl.Update).Build();
    }

  }
}
#endregion

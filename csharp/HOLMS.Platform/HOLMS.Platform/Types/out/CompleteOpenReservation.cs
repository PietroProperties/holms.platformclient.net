// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/reservations/complete_open_reservation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.Reservations {

  /// <summary>Holder for reflection information generated from booking/reservations/complete_open_reservation.proto</summary>
  public static partial class CompleteOpenReservationReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/reservations/complete_open_reservation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CompleteOpenReservationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRib29raW5nL3Jlc2VydmF0aW9ucy9jb21wbGV0ZV9vcGVuX3Jlc2VydmF0",
            "aW9uLnByb3RvEiBob2xtcy50eXBlcy5ib29raW5nLnJlc2VydmF0aW9ucxof",
            "cHJpbWl0aXZlL21vbmV0YXJ5X2Ftb3VudC5wcm90bxoqcHJpbWl0aXZlL3Bi",
            "X2luY2x1c2l2ZV9vcHNkYXRlX3JhbmdlLnByb3RvGi5ib29raW5nL2luZGlj",
            "YXRvcnMvcmVzZXJ2YXRpb25faW5kaWNhdG9yLnByb3RvGixib29raW5nL3Jl",
            "c2VydmF0aW9ucy9yZXNlcnZhdGlvbl9zdGF0ZS5wcm90bxoWY3JtL2d1ZXN0",
            "cy9ndWVzdC5wcm90bxohc3VwcGx5L3Jvb21fdHlwZXMvcm9vbV90eXBlLnBy",
            "b3RvGi9vcGVyYXRpb25zL2hvdXNla2VlcGluZy9ob3VzZWtlZXBpbmdfdGlt",
            "ZS5wcm90bxolb3BlcmF0aW9ucy9yb29tcy9yb29tX2luZGljYXRvci5wcm90",
            "bxo2Ym9va2luZy9pbmRpY2F0b3JzL2NhbmNlbGxhdGlvbl9wb2xpY3lfaW5k",
            "aWNhdG9yLnByb3RvIrAIChdDb21wbGV0ZU9wZW5SZXNlcnZhdGlvbhJHCgll",
            "bnRpdHlfaWQYASABKAsyNC5ob2xtcy50eXBlcy5ib29raW5nLmluZGljYXRv",
            "cnMuUmVzZXJ2YXRpb25JbmRpY2F0b3ISEgoKYm9va2luZ19pZBgCIAEoCRJB",
            "CgVzdGF0ZRgDIAEoDjIyLmhvbG1zLnR5cGVzLmJvb2tpbmcucmVzZXJ2YXRp",
            "b25zLlJlc2VydmF0aW9uU3RhdGUSLAoFZ3Vlc3QYBCABKAsyHS5ob2xtcy50",
            "eXBlcy5jcm0uZ3Vlc3RzLkd1ZXN0EkIKCmRhdGVfcmFuZ2UYBSABKAsyLi5o",
            "b2xtcy50eXBlcy5wcmltaXRpdmUuUGJJbmNsdXNpdmVPcHNkYXRlUmFuZ2US",
            "FQoNbnVtYmVyX2FkdWx0cxgGIAEoBRIXCg9udW1iZXJfY2hpbGRyZW4YByAB",
            "KAUSOgoJcm9vbV90eXBlGAggASgLMicuaG9sbXMudHlwZXMuc3VwcGx5LnJv",
            "b21fdHlwZXMuUm9vbVR5cGUSOAoRYWRkaXRpb25hbF9ndWVzdHMYCSADKAsy",
            "HS5ob2xtcy50eXBlcy5jcm0uZ3Vlc3RzLkd1ZXN0EhIKCnRheF9leGVtcHQY",
            "CyABKAgSRwoYdW5wYWlkX2d1YXJhbnRlZV9iYWxhbmNlGA0gASgLMiUuaG9s",
            "bXMudHlwZXMucHJpbWl0aXZlLk1vbmV0YXJ5QW1vdW50ElEKEmhrX3RpbWVf",
            "cHJlZmVyZW5jZRgPIAEoCzI1LmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMuaG91",
            "c2VrZWVwaW5nLkhvdXNla2VlcGluZ1RpbWUSIQoZdmVoaWNsZV9wbGF0ZV9p",
            "bmZvcm1hdGlvbhgQIAEoCRIkChxjdXJyZW50X29jY3VwaWVkX3Jvb21fbnVt",
            "YmVyGBEgASgJEkoKFWN1cnJlbnRfb2NjdXBpZWRfcm9vbRgSIAEoCzIrLmhv",
            "bG1zLnR5cGVzLm9wZXJhdGlvbnMucm9vbXMuUm9vbUluZGljYXRvchIlCh10",
            "ZXJtaW5hbF9vY2N1cGllZF9yb29tX251bWJlchgTIAEoCRJLChZ0ZXJtaW5h",
            "bF9vY2N1cGllZF9yb29tGBQgASgLMisuaG9sbXMudHlwZXMub3BlcmF0aW9u",
            "cy5yb29tcy5Sb29tSW5kaWNhdG9yEhMKC2FjdGl2ZV90YWdzGBUgAygJEhoK",
            "EmNoYW5uZWxfbWFuYWdlcl9pZBgWIAEoCRIZChFzb3VyY2VfY2hhbm5lbF9p",
            "ZBgXIAEoCRJYChNjYW5jZWxsYXRpb25fcG9saWN5GBggASgLMjsuaG9sbXMu",
            "dHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLkNhbmNlbGxhdGlvblBvbGljeUlu",
            "ZGljYXRvckI5WhRib29raW5nL3Jlc2VydmF0aW9uc6oCIEhPTE1TLlR5cGVz",
            "LkJvb2tpbmcuUmVzZXJ2YXRpb25zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor, global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.ReservationStateReflection.Descriptor, global::HOLMS.Types.CRM.Guests.GuestReflection.Descriptor, global::HOLMS.Types.Supply.RoomTypes.RoomTypeReflection.Descriptor, global::HOLMS.Types.Operations.Housekeeping.HousekeepingTimeReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.CancellationPolicyIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.Reservations.CompleteOpenReservation), global::HOLMS.Types.Booking.Reservations.CompleteOpenReservation.Parser, new[]{ "EntityId", "BookingId", "State", "Guest", "DateRange", "NumberAdults", "NumberChildren", "RoomType", "AdditionalGuests", "TaxExempt", "UnpaidGuaranteeBalance", "HkTimePreference", "VehiclePlateInformation", "CurrentOccupiedRoomNumber", "CurrentOccupiedRoom", "TerminalOccupiedRoomNumber", "TerminalOccupiedRoom", "ActiveTags", "ChannelManagerId", "SourceChannelId", "CancellationPolicy" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CompleteOpenReservation : pb::IMessage<CompleteOpenReservation> {
    private static readonly pb::MessageParser<CompleteOpenReservation> _parser = new pb::MessageParser<CompleteOpenReservation>(() => new CompleteOpenReservation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteOpenReservation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.Reservations.CompleteOpenReservationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOpenReservation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOpenReservation(CompleteOpenReservation other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      bookingId_ = other.bookingId_;
      state_ = other.state_;
      Guest = other.guest_ != null ? other.Guest.Clone() : null;
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
      numberAdults_ = other.numberAdults_;
      numberChildren_ = other.numberChildren_;
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      additionalGuests_ = other.additionalGuests_.Clone();
      taxExempt_ = other.taxExempt_;
      UnpaidGuaranteeBalance = other.unpaidGuaranteeBalance_ != null ? other.UnpaidGuaranteeBalance.Clone() : null;
      HkTimePreference = other.hkTimePreference_ != null ? other.HkTimePreference.Clone() : null;
      vehiclePlateInformation_ = other.vehiclePlateInformation_;
      currentOccupiedRoomNumber_ = other.currentOccupiedRoomNumber_;
      CurrentOccupiedRoom = other.currentOccupiedRoom_ != null ? other.CurrentOccupiedRoom.Clone() : null;
      terminalOccupiedRoomNumber_ = other.terminalOccupiedRoomNumber_;
      TerminalOccupiedRoom = other.terminalOccupiedRoom_ != null ? other.TerminalOccupiedRoom.Clone() : null;
      activeTags_ = other.activeTags_.Clone();
      channelManagerId_ = other.channelManagerId_;
      sourceChannelId_ = other.sourceChannelId_;
      CancellationPolicy = other.cancellationPolicy_ != null ? other.CancellationPolicy.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteOpenReservation Clone() {
      return new CompleteOpenReservation(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "booking_id" field.</summary>
    public const int BookingIdFieldNumber = 2;
    private string bookingId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookingId {
      get { return bookingId_; }
      set {
        bookingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::HOLMS.Types.Booking.Reservations.ReservationState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Reservations.ReservationState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "guest" field.</summary>
    public const int GuestFieldNumber = 4;
    private global::HOLMS.Types.CRM.Guests.Guest guest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.CRM.Guests.Guest Guest {
      get { return guest_; }
      set {
        guest_ = value;
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 5;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "number_adults" field.</summary>
    public const int NumberAdultsFieldNumber = 6;
    private int numberAdults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberAdults {
      get { return numberAdults_; }
      set {
        numberAdults_ = value;
      }
    }

    /// <summary>Field number for the "number_children" field.</summary>
    public const int NumberChildrenFieldNumber = 7;
    private int numberChildren_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberChildren {
      get { return numberChildren_; }
      set {
        numberChildren_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 8;
    private global::HOLMS.Types.Supply.RoomTypes.RoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomType RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "additional_guests" field.</summary>
    public const int AdditionalGuestsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::HOLMS.Types.CRM.Guests.Guest> _repeated_additionalGuests_codec
        = pb::FieldCodec.ForMessage(74, global::HOLMS.Types.CRM.Guests.Guest.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.CRM.Guests.Guest> additionalGuests_ = new pbc::RepeatedField<global::HOLMS.Types.CRM.Guests.Guest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.CRM.Guests.Guest> AdditionalGuests {
      get { return additionalGuests_; }
    }

    /// <summary>Field number for the "tax_exempt" field.</summary>
    public const int TaxExemptFieldNumber = 11;
    private bool taxExempt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TaxExempt {
      get { return taxExempt_; }
      set {
        taxExempt_ = value;
      }
    }

    /// <summary>Field number for the "unpaid_guarantee_balance" field.</summary>
    public const int UnpaidGuaranteeBalanceFieldNumber = 13;
    private global::HOLMS.Types.Primitive.MonetaryAmount unpaidGuaranteeBalance_;
    /// <summary>
    ///  Deprecated guarantee_status
    ///  holms.types.booking.reservations.ReservationGuaranteeStatus guarantee_status = 12;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount UnpaidGuaranteeBalance {
      get { return unpaidGuaranteeBalance_; }
      set {
        unpaidGuaranteeBalance_ = value;
      }
    }

    /// <summary>Field number for the "hk_time_preference" field.</summary>
    public const int HkTimePreferenceFieldNumber = 15;
    private global::HOLMS.Types.Operations.Housekeeping.HousekeepingTime hkTimePreference_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Housekeeping.HousekeepingTime HkTimePreference {
      get { return hkTimePreference_; }
      set {
        hkTimePreference_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_plate_information" field.</summary>
    public const int VehiclePlateInformationFieldNumber = 16;
    private string vehiclePlateInformation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehiclePlateInformation {
      get { return vehiclePlateInformation_; }
      set {
        vehiclePlateInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_occupied_room_number" field.</summary>
    public const int CurrentOccupiedRoomNumberFieldNumber = 17;
    private string currentOccupiedRoomNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentOccupiedRoomNumber {
      get { return currentOccupiedRoomNumber_; }
      set {
        currentOccupiedRoomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_occupied_room" field.</summary>
    public const int CurrentOccupiedRoomFieldNumber = 18;
    private global::HOLMS.Types.Operations.Rooms.RoomIndicator currentOccupiedRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.RoomIndicator CurrentOccupiedRoom {
      get { return currentOccupiedRoom_; }
      set {
        currentOccupiedRoom_ = value;
      }
    }

    /// <summary>Field number for the "terminal_occupied_room_number" field.</summary>
    public const int TerminalOccupiedRoomNumberFieldNumber = 19;
    private string terminalOccupiedRoomNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TerminalOccupiedRoomNumber {
      get { return terminalOccupiedRoomNumber_; }
      set {
        terminalOccupiedRoomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "terminal_occupied_room" field.</summary>
    public const int TerminalOccupiedRoomFieldNumber = 20;
    private global::HOLMS.Types.Operations.Rooms.RoomIndicator terminalOccupiedRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.RoomIndicator TerminalOccupiedRoom {
      get { return terminalOccupiedRoom_; }
      set {
        terminalOccupiedRoom_ = value;
      }
    }

    /// <summary>Field number for the "active_tags" field.</summary>
    public const int ActiveTagsFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_activeTags_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> activeTags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ActiveTags {
      get { return activeTags_; }
    }

    /// <summary>Field number for the "channel_manager_id" field.</summary>
    public const int ChannelManagerIdFieldNumber = 22;
    private string channelManagerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelManagerId {
      get { return channelManagerId_; }
      set {
        channelManagerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_channel_id" field.</summary>
    public const int SourceChannelIdFieldNumber = 23;
    private string sourceChannelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceChannelId {
      get { return sourceChannelId_; }
      set {
        sourceChannelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cancellation_policy" field.</summary>
    public const int CancellationPolicyFieldNumber = 24;
    private global::HOLMS.Types.Booking.Indicators.CancellationPolicyIndicator cancellationPolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.CancellationPolicyIndicator CancellationPolicy {
      get { return cancellationPolicy_; }
      set {
        cancellationPolicy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteOpenReservation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteOpenReservation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (BookingId != other.BookingId) return false;
      if (State != other.State) return false;
      if (!object.Equals(Guest, other.Guest)) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (NumberAdults != other.NumberAdults) return false;
      if (NumberChildren != other.NumberChildren) return false;
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if(!additionalGuests_.Equals(other.additionalGuests_)) return false;
      if (TaxExempt != other.TaxExempt) return false;
      if (!object.Equals(UnpaidGuaranteeBalance, other.UnpaidGuaranteeBalance)) return false;
      if (!object.Equals(HkTimePreference, other.HkTimePreference)) return false;
      if (VehiclePlateInformation != other.VehiclePlateInformation) return false;
      if (CurrentOccupiedRoomNumber != other.CurrentOccupiedRoomNumber) return false;
      if (!object.Equals(CurrentOccupiedRoom, other.CurrentOccupiedRoom)) return false;
      if (TerminalOccupiedRoomNumber != other.TerminalOccupiedRoomNumber) return false;
      if (!object.Equals(TerminalOccupiedRoom, other.TerminalOccupiedRoom)) return false;
      if(!activeTags_.Equals(other.activeTags_)) return false;
      if (ChannelManagerId != other.ChannelManagerId) return false;
      if (SourceChannelId != other.SourceChannelId) return false;
      if (!object.Equals(CancellationPolicy, other.CancellationPolicy)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (BookingId.Length != 0) hash ^= BookingId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (guest_ != null) hash ^= Guest.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (NumberAdults != 0) hash ^= NumberAdults.GetHashCode();
      if (NumberChildren != 0) hash ^= NumberChildren.GetHashCode();
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      hash ^= additionalGuests_.GetHashCode();
      if (TaxExempt != false) hash ^= TaxExempt.GetHashCode();
      if (unpaidGuaranteeBalance_ != null) hash ^= UnpaidGuaranteeBalance.GetHashCode();
      if (hkTimePreference_ != null) hash ^= HkTimePreference.GetHashCode();
      if (VehiclePlateInformation.Length != 0) hash ^= VehiclePlateInformation.GetHashCode();
      if (CurrentOccupiedRoomNumber.Length != 0) hash ^= CurrentOccupiedRoomNumber.GetHashCode();
      if (currentOccupiedRoom_ != null) hash ^= CurrentOccupiedRoom.GetHashCode();
      if (TerminalOccupiedRoomNumber.Length != 0) hash ^= TerminalOccupiedRoomNumber.GetHashCode();
      if (terminalOccupiedRoom_ != null) hash ^= TerminalOccupiedRoom.GetHashCode();
      hash ^= activeTags_.GetHashCode();
      if (ChannelManagerId.Length != 0) hash ^= ChannelManagerId.GetHashCode();
      if (SourceChannelId.Length != 0) hash ^= SourceChannelId.GetHashCode();
      if (cancellationPolicy_ != null) hash ^= CancellationPolicy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (BookingId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BookingId);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (guest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Guest);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DateRange);
      }
      if (NumberAdults != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumberAdults);
      }
      if (NumberChildren != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NumberChildren);
      }
      if (roomType_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RoomType);
      }
      additionalGuests_.WriteTo(output, _repeated_additionalGuests_codec);
      if (TaxExempt != false) {
        output.WriteRawTag(88);
        output.WriteBool(TaxExempt);
      }
      if (unpaidGuaranteeBalance_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(UnpaidGuaranteeBalance);
      }
      if (hkTimePreference_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(HkTimePreference);
      }
      if (VehiclePlateInformation.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(VehiclePlateInformation);
      }
      if (CurrentOccupiedRoomNumber.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CurrentOccupiedRoomNumber);
      }
      if (currentOccupiedRoom_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CurrentOccupiedRoom);
      }
      if (TerminalOccupiedRoomNumber.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(TerminalOccupiedRoomNumber);
      }
      if (terminalOccupiedRoom_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(TerminalOccupiedRoom);
      }
      activeTags_.WriteTo(output, _repeated_activeTags_codec);
      if (ChannelManagerId.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ChannelManagerId);
      }
      if (SourceChannelId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SourceChannelId);
      }
      if (cancellationPolicy_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(CancellationPolicy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (BookingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookingId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (guest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guest);
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (NumberAdults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberAdults);
      }
      if (NumberChildren != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberChildren);
      }
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      size += additionalGuests_.CalculateSize(_repeated_additionalGuests_codec);
      if (TaxExempt != false) {
        size += 1 + 1;
      }
      if (unpaidGuaranteeBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnpaidGuaranteeBalance);
      }
      if (hkTimePreference_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HkTimePreference);
      }
      if (VehiclePlateInformation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VehiclePlateInformation);
      }
      if (CurrentOccupiedRoomNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrentOccupiedRoomNumber);
      }
      if (currentOccupiedRoom_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurrentOccupiedRoom);
      }
      if (TerminalOccupiedRoomNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TerminalOccupiedRoomNumber);
      }
      if (terminalOccupiedRoom_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TerminalOccupiedRoom);
      }
      size += activeTags_.CalculateSize(_repeated_activeTags_codec);
      if (ChannelManagerId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChannelManagerId);
      }
      if (SourceChannelId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SourceChannelId);
      }
      if (cancellationPolicy_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CancellationPolicy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteOpenReservation other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.BookingId.Length != 0) {
        BookingId = other.BookingId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.guest_ != null) {
        if (guest_ == null) {
          guest_ = new global::HOLMS.Types.CRM.Guests.Guest();
        }
        Guest.MergeFrom(other.Guest);
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.NumberAdults != 0) {
        NumberAdults = other.NumberAdults;
      }
      if (other.NumberChildren != 0) {
        NumberChildren = other.NumberChildren;
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomType();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      additionalGuests_.Add(other.additionalGuests_);
      if (other.TaxExempt != false) {
        TaxExempt = other.TaxExempt;
      }
      if (other.unpaidGuaranteeBalance_ != null) {
        if (unpaidGuaranteeBalance_ == null) {
          unpaidGuaranteeBalance_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        UnpaidGuaranteeBalance.MergeFrom(other.UnpaidGuaranteeBalance);
      }
      if (other.hkTimePreference_ != null) {
        if (hkTimePreference_ == null) {
          hkTimePreference_ = new global::HOLMS.Types.Operations.Housekeeping.HousekeepingTime();
        }
        HkTimePreference.MergeFrom(other.HkTimePreference);
      }
      if (other.VehiclePlateInformation.Length != 0) {
        VehiclePlateInformation = other.VehiclePlateInformation;
      }
      if (other.CurrentOccupiedRoomNumber.Length != 0) {
        CurrentOccupiedRoomNumber = other.CurrentOccupiedRoomNumber;
      }
      if (other.currentOccupiedRoom_ != null) {
        if (currentOccupiedRoom_ == null) {
          currentOccupiedRoom_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
        }
        CurrentOccupiedRoom.MergeFrom(other.CurrentOccupiedRoom);
      }
      if (other.TerminalOccupiedRoomNumber.Length != 0) {
        TerminalOccupiedRoomNumber = other.TerminalOccupiedRoomNumber;
      }
      if (other.terminalOccupiedRoom_ != null) {
        if (terminalOccupiedRoom_ == null) {
          terminalOccupiedRoom_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
        }
        TerminalOccupiedRoom.MergeFrom(other.TerminalOccupiedRoom);
      }
      activeTags_.Add(other.activeTags_);
      if (other.ChannelManagerId.Length != 0) {
        ChannelManagerId = other.ChannelManagerId;
      }
      if (other.SourceChannelId.Length != 0) {
        SourceChannelId = other.SourceChannelId;
      }
      if (other.cancellationPolicy_ != null) {
        if (cancellationPolicy_ == null) {
          cancellationPolicy_ = new global::HOLMS.Types.Booking.Indicators.CancellationPolicyIndicator();
        }
        CancellationPolicy.MergeFrom(other.CancellationPolicy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 18: {
            BookingId = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::HOLMS.Types.Booking.Reservations.ReservationState) input.ReadEnum();
            break;
          }
          case 34: {
            if (guest_ == null) {
              guest_ = new global::HOLMS.Types.CRM.Guests.Guest();
            }
            input.ReadMessage(guest_);
            break;
          }
          case 42: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
          case 48: {
            NumberAdults = input.ReadInt32();
            break;
          }
          case 56: {
            NumberChildren = input.ReadInt32();
            break;
          }
          case 66: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomType();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 74: {
            additionalGuests_.AddEntriesFrom(input, _repeated_additionalGuests_codec);
            break;
          }
          case 88: {
            TaxExempt = input.ReadBool();
            break;
          }
          case 106: {
            if (unpaidGuaranteeBalance_ == null) {
              unpaidGuaranteeBalance_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(unpaidGuaranteeBalance_);
            break;
          }
          case 122: {
            if (hkTimePreference_ == null) {
              hkTimePreference_ = new global::HOLMS.Types.Operations.Housekeeping.HousekeepingTime();
            }
            input.ReadMessage(hkTimePreference_);
            break;
          }
          case 130: {
            VehiclePlateInformation = input.ReadString();
            break;
          }
          case 138: {
            CurrentOccupiedRoomNumber = input.ReadString();
            break;
          }
          case 146: {
            if (currentOccupiedRoom_ == null) {
              currentOccupiedRoom_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
            }
            input.ReadMessage(currentOccupiedRoom_);
            break;
          }
          case 154: {
            TerminalOccupiedRoomNumber = input.ReadString();
            break;
          }
          case 162: {
            if (terminalOccupiedRoom_ == null) {
              terminalOccupiedRoom_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
            }
            input.ReadMessage(terminalOccupiedRoom_);
            break;
          }
          case 170: {
            activeTags_.AddEntriesFrom(input, _repeated_activeTags_codec);
            break;
          }
          case 178: {
            ChannelManagerId = input.ReadString();
            break;
          }
          case 186: {
            SourceChannelId = input.ReadString();
            break;
          }
          case 194: {
            if (cancellationPolicy_ == null) {
              cancellationPolicy_ = new global::HOLMS.Types.Booking.Indicators.CancellationPolicyIndicator();
            }
            input.ReadMessage(cancellationPolicy_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

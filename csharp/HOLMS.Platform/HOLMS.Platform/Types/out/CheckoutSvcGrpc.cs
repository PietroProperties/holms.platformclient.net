// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/rpc/checkout_svc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace HOLMS.Types.Booking.RPC {
  public static partial class CheckoutSvc
  {
    static readonly string __ServiceName = "holms.types.booking.rpc.CheckoutSvc";

    static readonly grpc::Marshaller<global::HOLMS.Types.Booking.Indicators.ReservationIndicator> __Marshaller_ReservationIndicator = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Booking.Indicators.ReservationIndicator.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability> __Marshaller_CheckoutCandidateViability = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse> __Marshaller_CheckoutSvcCheckOutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse> __Marshaller_CheckoutSvcAmendForEarlyImmediateCheckoutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse> __Marshaller_CheckoutUndoSvcResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability> __Method_GetCheckoutCandidateViability = new grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCheckoutCandidateViability",
        __Marshaller_ReservationIndicator,
        __Marshaller_CheckoutCandidateViability);

    static readonly grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse> __Method_CheckOutReservation = new grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckOutReservation",
        __Marshaller_ReservationIndicator,
        __Marshaller_CheckoutSvcCheckOutResponse);

    static readonly grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse> __Method_AmendForEarlyImmediateCheckout = new grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AmendForEarlyImmediateCheckout",
        __Marshaller_ReservationIndicator,
        __Marshaller_CheckoutSvcAmendForEarlyImmediateCheckoutResponse);

    static readonly grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse> __Method_UndoCheckout = new grpc::Method<global::HOLMS.Types.Booking.Indicators.ReservationIndicator, global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndoCheckout",
        __Marshaller_ReservationIndicator,
        __Marshaller_CheckoutUndoSvcResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Booking.RPC.CheckoutSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CheckoutSvc</summary>
    public abstract partial class CheckoutSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability> GetCheckoutCandidateViability(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse> CheckOutReservation(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse> AmendForEarlyImmediateCheckout(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse> UndoCheckout(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CheckoutSvc</summary>
    public partial class CheckoutSvcClient : grpc::ClientBase<CheckoutSvcClient>
    {
      /// <summary>Creates a new client for CheckoutSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CheckoutSvcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CheckoutSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CheckoutSvcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CheckoutSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CheckoutSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability GetCheckoutCandidateViability(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCheckoutCandidateViability(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability GetCheckoutCandidateViability(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCheckoutCandidateViability, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability> GetCheckoutCandidateViabilityAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCheckoutCandidateViabilityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.Checkout.CheckoutCandidateViability> GetCheckoutCandidateViabilityAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCheckoutCandidateViability, null, options, request);
      }
      public virtual global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse CheckOutReservation(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckOutReservation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse CheckOutReservation(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckOutReservation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse> CheckOutReservationAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckOutReservationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.RPC.CheckoutSvcCheckOutResponse> CheckOutReservationAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckOutReservation, null, options, request);
      }
      public virtual global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse AmendForEarlyImmediateCheckout(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AmendForEarlyImmediateCheckout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse AmendForEarlyImmediateCheckout(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AmendForEarlyImmediateCheckout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse> AmendForEarlyImmediateCheckoutAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AmendForEarlyImmediateCheckoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.RPC.CheckoutSvcAmendForEarlyImmediateCheckoutResponse> AmendForEarlyImmediateCheckoutAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AmendForEarlyImmediateCheckout, null, options, request);
      }
      public virtual global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse UndoCheckout(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UndoCheckout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse UndoCheckout(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndoCheckout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse> UndoCheckoutAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UndoCheckoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Booking.RPC.CheckoutUndoSvcResponse> UndoCheckoutAsync(global::HOLMS.Types.Booking.Indicators.ReservationIndicator request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndoCheckout, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CheckoutSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CheckoutSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CheckoutSvcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCheckoutCandidateViability, serviceImpl.GetCheckoutCandidateViability)
          .AddMethod(__Method_CheckOutReservation, serviceImpl.CheckOutReservation)
          .AddMethod(__Method_AmendForEarlyImmediateCheckout, serviceImpl.AmendForEarlyImmediateCheckout)
          .AddMethod(__Method_UndoCheckout, serviceImpl.UndoCheckout).Build();
    }

  }
}
#endregion

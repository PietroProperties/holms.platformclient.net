// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/room_claims/room_claim.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Operations.RoomClaims {

  /// <summary>Holder for reflection information generated from operations/room_claims/room_claim.proto</summary>
  public static partial class RoomClaimReflection {

    #region Descriptor
    /// <summary>File descriptor for operations/room_claims/room_claim.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomClaimReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidvcGVyYXRpb25zL3Jvb21fY2xhaW1zL3Jvb21fY2xhaW0ucHJvdG8SImhv",
            "bG1zLnR5cGVzLm9wZXJhdGlvbnMucm9vbV9jbGFpbXMaLmJvb2tpbmcvaW5k",
            "aWNhdG9ycy9yZXNlcnZhdGlvbl9pbmRpY2F0b3IucHJvdG8aKnByaW1pdGl2",
            "ZS9wYl9pbmNsdXNpdmVfb3BzZGF0ZV9yYW5nZS5wcm90bxoxb3BlcmF0aW9u",
            "cy9yb29tX2NsYWltcy9yb29tX2NsYWltX2luZGljYXRvci5wcm90bxosb3Bl",
            "cmF0aW9ucy9yb29tX2NsYWltcy9yb29tX2NsYWltX3R5cGUucHJvdG8aG29w",
            "ZXJhdGlvbnMvcm9vbXMvcm9vbS5wcm90byL/AgoJUm9vbUNsYWltEkkKCWVu",
            "dGl0eV9pZBgBIAEoCzI2LmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMucm9vbV9j",
            "bGFpbXMuUm9vbUNsYWltSW5kaWNhdG9yEkUKCmNsYWltX3R5cGUYAiABKA4y",
            "MS5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJvb21fY2xhaW1zLlJvb21DbGFp",
            "bVR5cGUSQgoKZGF0ZV9yYW5nZRgDIAEoCzIuLmhvbG1zLnR5cGVzLnByaW1p",
            "dGl2ZS5QYkluY2x1c2l2ZU9wc2RhdGVSYW5nZRIwCgRyb29tGAQgASgLMiIu",
            "aG9sbXMudHlwZXMub3BlcmF0aW9ucy5yb29tcy5Sb29tEh8KF21haW50ZW5h",
            "bmNlX2hvbGRfcmVhc29uGAUgASgJEkkKC3Jlc2VydmF0aW9uGAYgASgLMjQu",
            "aG9sbXMudHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLlJlc2VydmF0aW9uSW5k",
            "aWNhdG9yQjtaFW9wZXJhdGlvbnMvcm9vbWNsYWltc6oCIUhPTE1TLlR5cGVz",
            "Lk9wZXJhdGlvbnMuUm9vbUNsYWltc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Operations.RoomClaims.RoomClaimIndicatorReflection.Descriptor, global::HOLMS.Types.Operations.RoomClaims.RoomClaimTypeReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RoomClaims.RoomClaim), global::HOLMS.Types.Operations.RoomClaims.RoomClaim.Parser, new[]{ "EntityId", "ClaimType", "DateRange", "Room", "MaintenanceHoldReason", "Reservation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoomClaim : pb::IMessage<RoomClaim> {
    private static readonly pb::MessageParser<RoomClaim> _parser = new pb::MessageParser<RoomClaim>(() => new RoomClaim());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RoomClaims.RoomClaimReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaim(RoomClaim other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      claimType_ = other.claimType_;
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
      Room = other.room_ != null ? other.Room.Clone() : null;
      maintenanceHoldReason_ = other.maintenanceHoldReason_;
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaim Clone() {
      return new RoomClaim(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Operations.RoomClaims.RoomClaimIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RoomClaims.RoomClaimIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "claim_type" field.</summary>
    public const int ClaimTypeFieldNumber = 2;
    private global::HOLMS.Types.Operations.RoomClaims.RoomClaimType claimType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RoomClaims.RoomClaimType ClaimType {
      get { return claimType_; }
      set {
        claimType_ = value;
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 3;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 4;
    private global::HOLMS.Types.Operations.Rooms.Room room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_hold_reason" field.</summary>
    public const int MaintenanceHoldReasonFieldNumber = 5;
    private string maintenanceHoldReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaintenanceHoldReason {
      get { return maintenanceHoldReason_; }
      set {
        maintenanceHoldReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 6;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    /// <summary>
    ///  Following are only non-null for case of a reservation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (ClaimType != other.ClaimType) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if (MaintenanceHoldReason != other.MaintenanceHoldReason) return false;
      if (!object.Equals(Reservation, other.Reservation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (ClaimType != 0) hash ^= ClaimType.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (MaintenanceHoldReason.Length != 0) hash ^= MaintenanceHoldReason.GetHashCode();
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (ClaimType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ClaimType);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DateRange);
      }
      if (room_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Room);
      }
      if (MaintenanceHoldReason.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MaintenanceHoldReason);
      }
      if (reservation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (ClaimType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClaimType);
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (MaintenanceHoldReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaintenanceHoldReason);
      }
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaim other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Operations.RoomClaims.RoomClaimIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.ClaimType != 0) {
        ClaimType = other.ClaimType;
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::HOLMS.Types.Operations.Rooms.Room();
        }
        Room.MergeFrom(other.Room);
      }
      if (other.MaintenanceHoldReason.Length != 0) {
        MaintenanceHoldReason = other.MaintenanceHoldReason;
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Operations.RoomClaims.RoomClaimIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 16: {
            claimType_ = (global::HOLMS.Types.Operations.RoomClaims.RoomClaimType) input.ReadEnum();
            break;
          }
          case 26: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
          case 34: {
            if (room_ == null) {
              room_ = new global::HOLMS.Types.Operations.Rooms.Room();
            }
            input.ReadMessage(room_);
            break;
          }
          case 42: {
            MaintenanceHoldReason = input.ReadString();
            break;
          }
          case 50: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

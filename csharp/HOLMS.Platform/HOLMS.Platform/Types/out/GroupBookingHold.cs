// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/group_booking_hold.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Supply {

  /// <summary>Holder for reflection information generated from supply/group_booking_hold.proto</summary>
  public static partial class GroupBookingHoldReflection {

    #region Descriptor
    /// <summary>File descriptor for supply/group_booking_hold.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GroupBookingHoldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9zdXBwbHkvZ3JvdXBfYm9va2luZ19ob2xkLnByb3RvEhJob2xtcy50eXBl",
            "cy5zdXBwbHkaMGJvb2tpbmcvaW5kaWNhdG9ycy9ncm91cF9ib29raW5nX2lu",
            "ZGljYXRvci5wcm90bxorc3VwcGx5L3Jvb21fdHlwZXMvcm9vbV90eXBlX2lu",
            "ZGljYXRvci5wcm90byLOAQoQR3JvdXBCb29raW5nSG9sZBJGCgdib29raW5n",
            "GAEgASgLMjUuaG9sbXMudHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLkdyb3Vw",
            "Qm9va2luZ0luZGljYXRvchJDCglyb29tX3R5cGUYAiABKAsyMC5ob2xtcy50",
            "eXBlcy5zdXBwbHkucm9vbV90eXBlcy5Sb29tVHlwZUluZGljYXRvchIWCg50",
            "b3RhbF9xdWFudGl0eRgDIAEoDRIVCg11c2VkX3F1YW50aXR5GAQgASgNQh1a",
            "BnN1cHBseaoCEkhPTE1TLlR5cGVzLlN1cHBseWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Indicators.GroupBookingIndicatorReflection.Descriptor, global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.GroupBookingHold), global::HOLMS.Types.Supply.GroupBookingHold.Parser, new[]{ "Booking", "RoomType", "TotalQuantity", "UsedQuantity" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GroupBookingHold : pb::IMessage<GroupBookingHold> {
    private static readonly pb::MessageParser<GroupBookingHold> _parser = new pb::MessageParser<GroupBookingHold>(() => new GroupBookingHold());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupBookingHold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.GroupBookingHoldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupBookingHold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupBookingHold(GroupBookingHold other) : this() {
      Booking = other.booking_ != null ? other.Booking.Clone() : null;
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      totalQuantity_ = other.totalQuantity_;
      usedQuantity_ = other.usedQuantity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupBookingHold Clone() {
      return new GroupBookingHold(this);
    }

    /// <summary>Field number for the "booking" field.</summary>
    public const int BookingFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.GroupBookingIndicator booking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.GroupBookingIndicator Booking {
      get { return booking_; }
      set {
        booking_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "total_quantity" field.</summary>
    public const int TotalQuantityFieldNumber = 3;
    private uint totalQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalQuantity {
      get { return totalQuantity_; }
      set {
        totalQuantity_ = value;
      }
    }

    /// <summary>Field number for the "used_quantity" field.</summary>
    public const int UsedQuantityFieldNumber = 4;
    private uint usedQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsedQuantity {
      get { return usedQuantity_; }
      set {
        usedQuantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupBookingHold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupBookingHold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Booking, other.Booking)) return false;
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (TotalQuantity != other.TotalQuantity) return false;
      if (UsedQuantity != other.UsedQuantity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (booking_ != null) hash ^= Booking.GetHashCode();
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (TotalQuantity != 0) hash ^= TotalQuantity.GetHashCode();
      if (UsedQuantity != 0) hash ^= UsedQuantity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (booking_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Booking);
      }
      if (roomType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomType);
      }
      if (TotalQuantity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalQuantity);
      }
      if (UsedQuantity != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UsedQuantity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (booking_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Booking);
      }
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (TotalQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalQuantity);
      }
      if (UsedQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedQuantity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupBookingHold other) {
      if (other == null) {
        return;
      }
      if (other.booking_ != null) {
        if (booking_ == null) {
          booking_ = new global::HOLMS.Types.Booking.Indicators.GroupBookingIndicator();
        }
        Booking.MergeFrom(other.Booking);
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.TotalQuantity != 0) {
        TotalQuantity = other.TotalQuantity;
      }
      if (other.UsedQuantity != 0) {
        UsedQuantity = other.UsedQuantity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (booking_ == null) {
              booking_ = new global::HOLMS.Types.Booking.Indicators.GroupBookingIndicator();
            }
            input.ReadMessage(booking_);
            break;
          }
          case 18: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 24: {
            TotalQuantity = input.ReadUInt32();
            break;
          }
          case 32: {
            UsedQuantity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

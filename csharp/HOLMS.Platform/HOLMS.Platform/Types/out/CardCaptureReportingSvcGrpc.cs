// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting/rpc/card_capture_reporting_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Reporting.RPC {
  public static class CardCaptureReportingSvc
  {
    static readonly string __ServiceName = "holms.types.reporting.rpc.CardCaptureReportingSvc";

    static readonly Marshaller<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest> __Marshaller_CardCaptureReportingSvcGetPendingTransactionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> __Marshaller_CardCaptureReportingSvcReportResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest> __Marshaller_CardCaptureReportSvcGetSettledTransactionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest, global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> __Method_GetPendingTransactionsReport = new Method<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest, global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetPendingTransactionsReport",
        __Marshaller_CardCaptureReportingSvcGetPendingTransactionsRequest,
        __Marshaller_CardCaptureReportingSvcReportResponse);

    static readonly Method<global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest, global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> __Method_GetSettledTransactionsReport = new Method<global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest, global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetSettledTransactionsReport",
        __Marshaller_CardCaptureReportSvcGetSettledTransactionsRequest,
        __Marshaller_CardCaptureReportingSvcReportResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CardCaptureReportingSvc</summary>
    public abstract class CardCaptureReportingSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> GetPendingTransactionsReport(global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> GetSettledTransactionsReport(global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CardCaptureReportingSvc</summary>
    public class CardCaptureReportingSvcClient : ClientBase<CardCaptureReportingSvcClient>
    {
      /// <summary>Creates a new client for CardCaptureReportingSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CardCaptureReportingSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CardCaptureReportingSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CardCaptureReportingSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CardCaptureReportingSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CardCaptureReportingSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse GetPendingTransactionsReport(global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPendingTransactionsReport(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse GetPendingTransactionsReport(global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPendingTransactionsReport, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> GetPendingTransactionsReportAsync(global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPendingTransactionsReportAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> GetPendingTransactionsReportAsync(global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcGetPendingTransactionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPendingTransactionsReport, null, options, request);
      }
      public virtual global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse GetSettledTransactionsReport(global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSettledTransactionsReport(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse GetSettledTransactionsReport(global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSettledTransactionsReport, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> GetSettledTransactionsReportAsync(global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSettledTransactionsReportAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Reporting.RPC.CardCaptureReportingSvcReportResponse> GetSettledTransactionsReportAsync(global::HOLMS.Types.Reporting.RPC.CardCaptureReportSvcGetSettledTransactionsRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSettledTransactionsReport, null, options, request);
      }
      protected override CardCaptureReportingSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CardCaptureReportingSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CardCaptureReportingSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPendingTransactionsReport, serviceImpl.GetPendingTransactionsReport)
          .AddMethod(__Method_GetSettledTransactionsReport, serviceImpl.GetSettledTransactionsReport).Build();
    }

  }
}
#endregion

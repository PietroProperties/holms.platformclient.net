// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenancy_config/room_status_colors.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.TenancyConfig {

  /// <summary>Holder for reflection information generated from tenancy_config/room_status_colors.proto</summary>
  public static partial class RoomStatusColorsReflection {

    #region Descriptor
    /// <summary>File descriptor for tenancy_config/room_status_colors.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomStatusColorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cid0ZW5hbmN5X2NvbmZpZy9yb29tX3N0YXR1c19jb2xvcnMucHJvdG8SGmhv",
            "bG1zLnR5cGVzLnRlbmFuY3lfY29uZmlnGhxwcmltaXRpdmUvc3RhdHVzX2Nv",
            "bG9yLnByb3RvIqQFChBSb29tU3RhdHVzQ29sb3JzEjcKC2NsZWFuX2NvbG9y",
            "GAEgASgOMiIuaG9sbXMudHlwZXMucHJpbWl0aXZlLlN0YXR1c0NvbG9yEjcK",
            "C2RpcnR5X2NvbG9yGAIgASgOMiIuaG9sbXMudHlwZXMucHJpbWl0aXZlLlN0",
            "YXR1c0NvbG9yEjwKEGRlZXBfY2xlYW5fY29sb3IYAyABKA4yIi5ob2xtcy50",
            "eXBlcy5wcmltaXRpdmUuU3RhdHVzQ29sb3ISOQoNaW5zcGVjdF9jb2xvchgE",
            "IAEoDjIiLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5TdGF0dXNDb2xvchI2Cgpk",
            "dXN0X2NvbG9yGAUgASgOMiIuaG9sbXMudHlwZXMucHJpbWl0aXZlLlN0YXR1",
            "c0NvbG9yEj4KEm91dF9vZl9vcmRlcl9jb2xvchgGIAEoDjIiLmhvbG1zLnR5",
            "cGVzLnByaW1pdGl2ZS5TdGF0dXNDb2xvchI5Cg1ibG9ja2VkX2NvbG9yGAcg",
            "ASgOMiIuaG9sbXMudHlwZXMucHJpbWl0aXZlLlN0YXR1c0NvbG9yEj4KEm1h",
            "aWRfaW5fcm9vbV9jb2xvchgIIAEoDjIiLmhvbG1zLnR5cGVzLnByaW1pdGl2",
            "ZS5TdGF0dXNDb2xvchI7Cg9zaG93X3Jvb21fY29sb3IYCSABKA4yIi5ob2xt",
            "cy50eXBlcy5wcmltaXRpdmUuU3RhdHVzQ29sb3ISPAoQbGVmdF9kaXJ0eV9j",
            "b2xvchgKIAEoDjIiLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5TdGF0dXNDb2xv",
            "chI3Cgtob2xkc19jb2xvchgLIAEoDjIiLmhvbG1zLnR5cGVzLnByaW1pdGl2",
            "ZS5TdGF0dXNDb2xvckIrWg10ZW5hbmN5Y29uZmlnqgIZSE9MTVMuVHlwZXMu",
            "VGVuYW5jeUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Primitive.StatusColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.TenancyConfig.RoomStatusColors), global::HOLMS.Types.TenancyConfig.RoomStatusColors.Parser, new[]{ "CleanColor", "DirtyColor", "DeepCleanColor", "InspectColor", "DustColor", "OutOfOrderColor", "BlockedColor", "MaidInRoomColor", "ShowRoomColor", "LeftDirtyColor", "HoldsColor" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoomStatusColors : pb::IMessage<RoomStatusColors> {
    private static readonly pb::MessageParser<RoomStatusColors> _parser = new pb::MessageParser<RoomStatusColors>(() => new RoomStatusColors());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomStatusColors> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.TenancyConfig.RoomStatusColorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatusColors() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatusColors(RoomStatusColors other) : this() {
      cleanColor_ = other.cleanColor_;
      dirtyColor_ = other.dirtyColor_;
      deepCleanColor_ = other.deepCleanColor_;
      inspectColor_ = other.inspectColor_;
      dustColor_ = other.dustColor_;
      outOfOrderColor_ = other.outOfOrderColor_;
      blockedColor_ = other.blockedColor_;
      maidInRoomColor_ = other.maidInRoomColor_;
      showRoomColor_ = other.showRoomColor_;
      leftDirtyColor_ = other.leftDirtyColor_;
      holdsColor_ = other.holdsColor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomStatusColors Clone() {
      return new RoomStatusColors(this);
    }

    /// <summary>Field number for the "clean_color" field.</summary>
    public const int CleanColorFieldNumber = 1;
    private global::HOLMS.Types.Primitive.StatusColor cleanColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor CleanColor {
      get { return cleanColor_; }
      set {
        cleanColor_ = value;
      }
    }

    /// <summary>Field number for the "dirty_color" field.</summary>
    public const int DirtyColorFieldNumber = 2;
    private global::HOLMS.Types.Primitive.StatusColor dirtyColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor DirtyColor {
      get { return dirtyColor_; }
      set {
        dirtyColor_ = value;
      }
    }

    /// <summary>Field number for the "deep_clean_color" field.</summary>
    public const int DeepCleanColorFieldNumber = 3;
    private global::HOLMS.Types.Primitive.StatusColor deepCleanColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor DeepCleanColor {
      get { return deepCleanColor_; }
      set {
        deepCleanColor_ = value;
      }
    }

    /// <summary>Field number for the "inspect_color" field.</summary>
    public const int InspectColorFieldNumber = 4;
    private global::HOLMS.Types.Primitive.StatusColor inspectColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor InspectColor {
      get { return inspectColor_; }
      set {
        inspectColor_ = value;
      }
    }

    /// <summary>Field number for the "dust_color" field.</summary>
    public const int DustColorFieldNumber = 5;
    private global::HOLMS.Types.Primitive.StatusColor dustColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor DustColor {
      get { return dustColor_; }
      set {
        dustColor_ = value;
      }
    }

    /// <summary>Field number for the "out_of_order_color" field.</summary>
    public const int OutOfOrderColorFieldNumber = 6;
    private global::HOLMS.Types.Primitive.StatusColor outOfOrderColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor OutOfOrderColor {
      get { return outOfOrderColor_; }
      set {
        outOfOrderColor_ = value;
      }
    }

    /// <summary>Field number for the "blocked_color" field.</summary>
    public const int BlockedColorFieldNumber = 7;
    private global::HOLMS.Types.Primitive.StatusColor blockedColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor BlockedColor {
      get { return blockedColor_; }
      set {
        blockedColor_ = value;
      }
    }

    /// <summary>Field number for the "maid_in_room_color" field.</summary>
    public const int MaidInRoomColorFieldNumber = 8;
    private global::HOLMS.Types.Primitive.StatusColor maidInRoomColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor MaidInRoomColor {
      get { return maidInRoomColor_; }
      set {
        maidInRoomColor_ = value;
      }
    }

    /// <summary>Field number for the "show_room_color" field.</summary>
    public const int ShowRoomColorFieldNumber = 9;
    private global::HOLMS.Types.Primitive.StatusColor showRoomColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor ShowRoomColor {
      get { return showRoomColor_; }
      set {
        showRoomColor_ = value;
      }
    }

    /// <summary>Field number for the "left_dirty_color" field.</summary>
    public const int LeftDirtyColorFieldNumber = 10;
    private global::HOLMS.Types.Primitive.StatusColor leftDirtyColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor LeftDirtyColor {
      get { return leftDirtyColor_; }
      set {
        leftDirtyColor_ = value;
      }
    }

    /// <summary>Field number for the "holds_color" field.</summary>
    public const int HoldsColorFieldNumber = 11;
    private global::HOLMS.Types.Primitive.StatusColor holdsColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.StatusColor HoldsColor {
      get { return holdsColor_; }
      set {
        holdsColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomStatusColors);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomStatusColors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CleanColor != other.CleanColor) return false;
      if (DirtyColor != other.DirtyColor) return false;
      if (DeepCleanColor != other.DeepCleanColor) return false;
      if (InspectColor != other.InspectColor) return false;
      if (DustColor != other.DustColor) return false;
      if (OutOfOrderColor != other.OutOfOrderColor) return false;
      if (BlockedColor != other.BlockedColor) return false;
      if (MaidInRoomColor != other.MaidInRoomColor) return false;
      if (ShowRoomColor != other.ShowRoomColor) return false;
      if (LeftDirtyColor != other.LeftDirtyColor) return false;
      if (HoldsColor != other.HoldsColor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CleanColor != 0) hash ^= CleanColor.GetHashCode();
      if (DirtyColor != 0) hash ^= DirtyColor.GetHashCode();
      if (DeepCleanColor != 0) hash ^= DeepCleanColor.GetHashCode();
      if (InspectColor != 0) hash ^= InspectColor.GetHashCode();
      if (DustColor != 0) hash ^= DustColor.GetHashCode();
      if (OutOfOrderColor != 0) hash ^= OutOfOrderColor.GetHashCode();
      if (BlockedColor != 0) hash ^= BlockedColor.GetHashCode();
      if (MaidInRoomColor != 0) hash ^= MaidInRoomColor.GetHashCode();
      if (ShowRoomColor != 0) hash ^= ShowRoomColor.GetHashCode();
      if (LeftDirtyColor != 0) hash ^= LeftDirtyColor.GetHashCode();
      if (HoldsColor != 0) hash ^= HoldsColor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CleanColor != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CleanColor);
      }
      if (DirtyColor != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DirtyColor);
      }
      if (DeepCleanColor != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DeepCleanColor);
      }
      if (InspectColor != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) InspectColor);
      }
      if (DustColor != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DustColor);
      }
      if (OutOfOrderColor != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) OutOfOrderColor);
      }
      if (BlockedColor != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BlockedColor);
      }
      if (MaidInRoomColor != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) MaidInRoomColor);
      }
      if (ShowRoomColor != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ShowRoomColor);
      }
      if (LeftDirtyColor != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) LeftDirtyColor);
      }
      if (HoldsColor != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) HoldsColor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CleanColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CleanColor);
      }
      if (DirtyColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DirtyColor);
      }
      if (DeepCleanColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeepCleanColor);
      }
      if (InspectColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InspectColor);
      }
      if (DustColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DustColor);
      }
      if (OutOfOrderColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutOfOrderColor);
      }
      if (BlockedColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockedColor);
      }
      if (MaidInRoomColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MaidInRoomColor);
      }
      if (ShowRoomColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShowRoomColor);
      }
      if (LeftDirtyColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LeftDirtyColor);
      }
      if (HoldsColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HoldsColor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomStatusColors other) {
      if (other == null) {
        return;
      }
      if (other.CleanColor != 0) {
        CleanColor = other.CleanColor;
      }
      if (other.DirtyColor != 0) {
        DirtyColor = other.DirtyColor;
      }
      if (other.DeepCleanColor != 0) {
        DeepCleanColor = other.DeepCleanColor;
      }
      if (other.InspectColor != 0) {
        InspectColor = other.InspectColor;
      }
      if (other.DustColor != 0) {
        DustColor = other.DustColor;
      }
      if (other.OutOfOrderColor != 0) {
        OutOfOrderColor = other.OutOfOrderColor;
      }
      if (other.BlockedColor != 0) {
        BlockedColor = other.BlockedColor;
      }
      if (other.MaidInRoomColor != 0) {
        MaidInRoomColor = other.MaidInRoomColor;
      }
      if (other.ShowRoomColor != 0) {
        ShowRoomColor = other.ShowRoomColor;
      }
      if (other.LeftDirtyColor != 0) {
        LeftDirtyColor = other.LeftDirtyColor;
      }
      if (other.HoldsColor != 0) {
        HoldsColor = other.HoldsColor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            cleanColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 16: {
            dirtyColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 24: {
            deepCleanColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 32: {
            inspectColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 40: {
            dustColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 48: {
            outOfOrderColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 56: {
            blockedColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 64: {
            maidInRoomColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 72: {
            showRoomColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 80: {
            leftDirtyColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
          case 88: {
            holdsColor_ = (global::HOLMS.Types.Primitive.StatusColor) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

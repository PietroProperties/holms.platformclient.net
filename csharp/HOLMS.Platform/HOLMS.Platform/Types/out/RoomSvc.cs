// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/rpc/room_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Operations.RPC {

  /// <summary>Holder for reflection information generated from operations/rpc/room_svc.proto</summary>
  public static partial class RoomSvcReflection {

    #region Descriptor
    /// <summary>File descriptor for operations/rpc/room_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomSvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1vcGVyYXRpb25zL3JwYy9yb29tX3N2Yy5wcm90bxIaaG9sbXMudHlwZXMu",
            "b3BlcmF0aW9ucy5ycGMaLmJvb2tpbmcvaW5kaWNhdG9ycy9yZXNlcnZhdGlv",
            "bl9pbmRpY2F0b3IucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90",
            "bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxo2b3BlcmF0aW9u",
            "cy9ob3VzZWtlZXBpbmcvaG91c2VrZWVwaW5nX3Jvb21fc3RhdHVzLnByb3Rv",
            "GhtvcGVyYXRpb25zL3Jvb21zL3Jvb20ucHJvdG8aJW9wZXJhdGlvbnMvcm9v",
            "bXMvcm9vbV9pbmRpY2F0b3IucHJvdG8aKnByaW1pdGl2ZS9zZXJ2ZXJfYWN0",
            "aW9uX2NvbmZpcm1hdGlvbi5wcm90bxoydGVuYW5jeV9jb25maWcvaW5kaWNh",
            "dG9ycy9wcm9wZXJ0eV9pbmRpY2F0b3IucHJvdG8iRwoSUm9vbVN2Y0FsbFJl",
            "c3BvbnNlEjEKBXJvb21zGAEgAygLMiIuaG9sbXMudHlwZXMub3BlcmF0aW9u",
            "cy5yb29tcy5Sb29tIosBChNSb29tU3ZjQ1JVRFJlc3BvbnNlEkIKC2NydWRf",
            "cmVzdWx0GAEgASgOMi0uaG9sbXMudHlwZXMub3BlcmF0aW9ucy5ycGMuUm9v",
            "bVN2Y0NSVURSZXN1bHQSMAoEcm9vbRgCIAEoCzIiLmhvbG1zLnR5cGVzLm9w",
            "ZXJhdGlvbnMucm9vbXMuUm9vbSKfAQoXUm9vbVN2Y09jY3VwYW5jeVJlcXVl",
            "c3QSOQoEcm9vbRgBIAEoCzIrLmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMucm9v",
            "bXMuUm9vbUluZGljYXRvchJJCgtyZXNlcnZhdGlvbhgCIAEoCzI0LmhvbG1z",
            "LnR5cGVzLmJvb2tpbmcuaW5kaWNhdG9ycy5SZXNlcnZhdGlvbkluZGljYXRv",
            "ciJoCh1Sb29tU3ZjQ2xhaW1PY2N1cGFuY3lSZXNwb25zZRJHCgZyZXN1bHQY",
            "ASABKA4yNy5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJwYy5Sb29tU3ZjT2Nj",
            "dXBhbmN5Q2xhaW1SZXN1bHQibAofUm9vbVN2Y1JlbGVhc2VPY2N1cGFuY3lS",
            "ZXNwb25zZRJJCgZyZXN1bHQYASABKA4yOS5ob2xtcy50eXBlcy5vcGVyYXRp",
            "b25zLnJwYy5Sb29tU3ZjT2NjdXBhbmN5UmVsZWFzZVJlc3VsdCKIAQooUm9v",
            "bVN2Y0dldEJ5T2NjdXB5aW5nUmVzZXJ2YXRpb25SZXNwb25zZRIiChpyZXNl",
            "cnZhdGlvbl9oYXNfcm9vbV9jbGFpbRgBIAEoCBI4CgxjbGFpbWVkX3Jvb20Y",
            "AiABKAsyIi5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJvb21zLlJvb20ixAEK",
            "GlJvb21TdmNJc3N1ZVJvb21LZXlSZXF1ZXN0EkkKC3Jlc2VydmF0aW9uGAEg",
            "ASgLMjQuaG9sbXMudHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLlJlc2VydmF0",
            "aW9uSW5kaWNhdG9yEi8KC2V4cGlyeV90aW1lGAIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIWCg5udW1iZXJfb2Zfa2V5cxgDIAEoBRISCgpp",
            "c19uZXdfa2V5GAQgASgIImkKG1Jvb21TdmNJc3N1ZVJvb21LZXlSZXNwb25z",
            "ZRJKCgZyZXN1bHQYASABKA4yOi5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJw",
            "Yy5ST09NX1NWQ19JU1NVRV9ST09NX0tFWV9SRVNVTFQieQooUm9vbVN2Y0dl",
            "dEhvdXNla2VlcGluZ1Jvb21TdGF0dXNSZXNwb25zZRJNCghzdGF0dXNlcxgB",
            "IAMoCzI7LmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMuaG91c2VrZWVwaW5nLkhv",
            "dXNla2VlcGluZ1Jvb21TdGF0dXMqUAoRUm9vbVN2Y0NSVURSZXN1bHQSEAoM",
            "Q1JVRF9TVUNDRVNTEAASEQoNVU5LTk9XTl9FUlJPUhABEhYKEkRVUExJQ0FU",
            "RV9UUlVOS19JRBACKsMBChtSb29tU3ZjT2NjdXBhbmN5Q2xhaW1SZXN1bHQS",
            "GwoXT0NDVVBBTkNZX0NMQUlNX1NVQ0NFU1MQABIeChpGQUlMX1JPT01fQUxS",
            "RUFEWV9PQ0NVUElFRBABEicKI0ZBSUxfUkVTRVJWQVRJT05fSEFTX0VYSVNU",
            "SU5HX0NMQUlNEAISLAooT0NDVVBBTkNZX0NMQUlNX1JFU1VMVF9ST09NX05P",
            "VF9BU1NJR05FRBADEhAKDEZBSUxfVU5LTk9XThAEKqQBCh1Sb29tU3ZjT2Nj",
            "dXBhbmN5UmVsZWFzZVJlc3VsdBIdChlPQ0NVUEFOQ1lfUkVMRUFTRV9TVUND",
            "RVNTEAASJAogRkFJTF9OT19FWElTVElOR19PQ0NVUEFOQ1lfQ0xBSU0QARIt",
            "CilGQUlMX1JFU0VSVkFUSU9OX09DQ1VQWUlOR19ESUZGRVJFTlRfUk9PTRAC",
            "Eg8KC0ZBSUxfVU5OT1dOEAQqWwoeUk9PTV9TVkNfSVNTVUVfUk9PTV9LRVlf",
            "UkVTVUxUEgsKB1NVQ0NFU1MQABILCgdUSU1FT1VUEAESEgoOSU5WQUxJRF9D",
            "T05GSUcQAhILCgdGQUlMVVJFEAMynAkKB1Jvb21TdmMSTQoDQWxsEhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5Gi4uaG9sbXMudHlwZXMub3BlcmF0aW9ucy5y",
            "cGMuUm9vbVN2Y0FsbFJlc3BvbnNlEl0KBkNyZWF0ZRIiLmhvbG1zLnR5cGVz",
            "Lm9wZXJhdGlvbnMucm9vbXMuUm9vbRovLmhvbG1zLnR5cGVzLm9wZXJhdGlv",
            "bnMucnBjLlJvb21TdmNDUlVEUmVzcG9uc2USXQoGVXBkYXRlEiIuaG9sbXMu",
            "dHlwZXMub3BlcmF0aW9ucy5yb29tcy5Sb29tGi8uaG9sbXMudHlwZXMub3Bl",
            "cmF0aW9ucy5ycGMuUm9vbVN2Y0NSVURSZXNwb25zZRJdCgZEZWxldGUSIi5o",
            "b2xtcy50eXBlcy5vcGVyYXRpb25zLnJvb21zLlJvb20aLy5ob2xtcy50eXBl",
            "cy5wcmltaXRpdmUuU2VydmVyQWN0aW9uQ29uZmlybWF0aW9uEloKB0dldEJ5",
            "SWQSKy5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJvb21zLlJvb21JbmRpY2F0",
            "b3IaIi5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJvb21zLlJvb20SlwEKGUdl",
            "dEJ5T2NjdXB5aW5nUmVzZXJ2YXRpb24SNC5ob2xtcy50eXBlcy5ib29raW5n",
            "LmluZGljYXRvcnMuUmVzZXJ2YXRpb25JbmRpY2F0b3IaRC5ob2xtcy50eXBl",
            "cy5vcGVyYXRpb25zLnJwYy5Sb29tU3ZjR2V0QnlPY2N1cHlpbmdSZXNlcnZh",
            "dGlvblJlc3BvbnNlEoQBChJDbGFpbVJvb21PY2N1cGFuY3kSMy5ob2xtcy50",
            "eXBlcy5vcGVyYXRpb25zLnJwYy5Sb29tU3ZjT2NjdXBhbmN5UmVxdWVzdBo5",
            "LmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMucnBjLlJvb21TdmNDbGFpbU9jY3Vw",
            "YW5jeVJlc3BvbnNlEogBChRSZWxlYXNlUm9vbU9jY3VwYW5jeRIzLmhvbG1z",
            "LnR5cGVzLm9wZXJhdGlvbnMucnBjLlJvb21TdmNPY2N1cGFuY3lSZXF1ZXN0",
            "GjsuaG9sbXMudHlwZXMub3BlcmF0aW9ucy5ycGMuUm9vbVN2Y1JlbGVhc2VP",
            "Y2N1cGFuY3lSZXNwb25zZRJ/CgxJc3N1ZVJvb21LZXkSNi5ob2xtcy50eXBl",
            "cy5vcGVyYXRpb25zLnJwYy5Sb29tU3ZjSXNzdWVSb29tS2V5UmVxdWVzdBo3",
            "LmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMucnBjLlJvb21TdmNJc3N1ZVJvb21L",
            "ZXlSZXNwb25zZRKbAQoZR2V0SG91c2VrZWVwaW5nUm9vbVN0YXR1cxI4Lmhv",
            "bG1zLnR5cGVzLnRlbmFuY3lfY29uZmlnLmluZGljYXRvcnMuUHJvcGVydHlJ",
            "bmRpY2F0b3IaRC5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJwYy5Sb29tU3Zj",
            "R2V0SG91c2VrZWVwaW5nUm9vbVN0YXR1c1Jlc3BvbnNlQh2qAhpIT0xNUy5U",
            "eXBlcy5PcGVyYXRpb25zLlJQQ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::HOLMS.Types.Operations.Housekeeping.HousekeepingRoomStatusReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.ServerActionConfirmationReflection.Descriptor, global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResult), typeof(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyClaimResult), typeof(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyReleaseResult), typeof(global::HOLMS.Types.Operations.RPC.ROOM_SVC_ISSUE_ROOM_KEY_RESULT), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse), global::HOLMS.Types.Operations.RPC.RoomSvcAllResponse.Parser, new[]{ "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse), global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResponse.Parser, new[]{ "CrudResult", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest), global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyRequest.Parser, new[]{ "Room", "Reservation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse), global::HOLMS.Types.Operations.RPC.RoomSvcClaimOccupancyResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse), global::HOLMS.Types.Operations.RPC.RoomSvcReleaseOccupancyResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse), global::HOLMS.Types.Operations.RPC.RoomSvcGetByOccupyingReservationResponse.Parser, new[]{ "ReservationHasRoomClaim", "ClaimedRoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest), global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyRequest.Parser, new[]{ "Reservation", "ExpiryTime", "NumberOfKeys", "IsNewKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse), global::HOLMS.Types.Operations.RPC.RoomSvcIssueRoomKeyResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse), global::HOLMS.Types.Operations.RPC.RoomSvcGetHousekeepingRoomStatusResponse.Parser, new[]{ "Statuses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RoomSvcCRUDResult {
    [pbr::OriginalName("CRUD_SUCCESS")] CrudSuccess = 0,
    [pbr::OriginalName("UNKNOWN_ERROR")] UnknownError = 1,
    [pbr::OriginalName("DUPLICATE_TRUNK_ID")] DuplicateTrunkId = 2,
  }

  public enum RoomSvcOccupancyClaimResult {
    [pbr::OriginalName("OCCUPANCY_CLAIM_SUCCESS")] OccupancyClaimSuccess = 0,
    [pbr::OriginalName("FAIL_ROOM_ALREADY_OCCUPIED")] FailRoomAlreadyOccupied = 1,
    [pbr::OriginalName("FAIL_RESERVATION_HAS_EXISTING_CLAIM")] FailReservationHasExistingClaim = 2,
    [pbr::OriginalName("OCCUPANCY_CLAIM_RESULT_ROOM_NOT_ASSIGNED")] OccupancyClaimResultRoomNotAssigned = 3,
    [pbr::OriginalName("FAIL_UNKNOWN")] FailUnknown = 4,
  }

  public enum RoomSvcOccupancyReleaseResult {
    [pbr::OriginalName("OCCUPANCY_RELEASE_SUCCESS")] OccupancyReleaseSuccess = 0,
    [pbr::OriginalName("FAIL_NO_EXISTING_OCCUPANCY_CLAIM")] FailNoExistingOccupancyClaim = 1,
    [pbr::OriginalName("FAIL_RESERVATION_OCCUPYING_DIFFERENT_ROOM")] FailReservationOccupyingDifferentRoom = 2,
    [pbr::OriginalName("FAIL_UNNOWN")] FailUnnown = 4,
  }

  public enum ROOM_SVC_ISSUE_ROOM_KEY_RESULT {
    [pbr::OriginalName("SUCCESS")] Success = 0,
    [pbr::OriginalName("TIMEOUT")] Timeout = 1,
    [pbr::OriginalName("INVALID_CONFIG")] InvalidConfig = 2,
    [pbr::OriginalName("FAILURE")] Failure = 3,
  }

  #endregion

  #region Messages
  public sealed partial class RoomSvcAllResponse : pb::IMessage<RoomSvcAllResponse> {
    private static readonly pb::MessageParser<RoomSvcAllResponse> _parser = new pb::MessageParser<RoomSvcAllResponse>(() => new RoomSvcAllResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcAllResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcAllResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcAllResponse(RoomSvcAllResponse other) : this() {
      rooms_ = other.rooms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcAllResponse Clone() {
      return new RoomSvcAllResponse(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.Rooms.Room> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.Rooms.Room.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.Room> rooms_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.Room>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.Room> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcAllResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcAllResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcAllResponse other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcCRUDResponse : pb::IMessage<RoomSvcCRUDResponse> {
    private static readonly pb::MessageParser<RoomSvcCRUDResponse> _parser = new pb::MessageParser<RoomSvcCRUDResponse>(() => new RoomSvcCRUDResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcCRUDResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcCRUDResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcCRUDResponse(RoomSvcCRUDResponse other) : this() {
      crudResult_ = other.crudResult_;
      Room = other.room_ != null ? other.Room.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcCRUDResponse Clone() {
      return new RoomSvcCRUDResponse(this);
    }

    /// <summary>Field number for the "crud_result" field.</summary>
    public const int CrudResultFieldNumber = 1;
    private global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResult crudResult_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResult CrudResult {
      get { return crudResult_; }
      set {
        crudResult_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 2;
    private global::HOLMS.Types.Operations.Rooms.Room room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.Room Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcCRUDResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcCRUDResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CrudResult != other.CrudResult) return false;
      if (!object.Equals(Room, other.Room)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CrudResult != 0) hash ^= CrudResult.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CrudResult != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CrudResult);
      }
      if (room_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CrudResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CrudResult);
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcCRUDResponse other) {
      if (other == null) {
        return;
      }
      if (other.CrudResult != 0) {
        CrudResult = other.CrudResult;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::HOLMS.Types.Operations.Rooms.Room();
        }
        Room.MergeFrom(other.Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            crudResult_ = (global::HOLMS.Types.Operations.RPC.RoomSvcCRUDResult) input.ReadEnum();
            break;
          }
          case 18: {
            if (room_ == null) {
              room_ = new global::HOLMS.Types.Operations.Rooms.Room();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcOccupancyRequest : pb::IMessage<RoomSvcOccupancyRequest> {
    private static readonly pb::MessageParser<RoomSvcOccupancyRequest> _parser = new pb::MessageParser<RoomSvcOccupancyRequest>(() => new RoomSvcOccupancyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcOccupancyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcOccupancyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcOccupancyRequest(RoomSvcOccupancyRequest other) : this() {
      Room = other.room_ != null ? other.Room.Clone() : null;
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcOccupancyRequest Clone() {
      return new RoomSvcOccupancyRequest(this);
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private global::HOLMS.Types.Operations.Rooms.RoomIndicator room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.RoomIndicator Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 2;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcOccupancyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcOccupancyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Room, other.Room)) return false;
      if (!object.Equals(Reservation, other.Reservation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (room_ != null) hash ^= Room.GetHashCode();
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (room_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Room);
      }
      if (reservation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcOccupancyRequest other) {
      if (other == null) {
        return;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
        }
        Room.MergeFrom(other.Room);
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (room_ == null) {
              room_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
            }
            input.ReadMessage(room_);
            break;
          }
          case 18: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcClaimOccupancyResponse : pb::IMessage<RoomSvcClaimOccupancyResponse> {
    private static readonly pb::MessageParser<RoomSvcClaimOccupancyResponse> _parser = new pb::MessageParser<RoomSvcClaimOccupancyResponse>(() => new RoomSvcClaimOccupancyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcClaimOccupancyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcClaimOccupancyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcClaimOccupancyResponse(RoomSvcClaimOccupancyResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcClaimOccupancyResponse Clone() {
      return new RoomSvcClaimOccupancyResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyClaimResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyClaimResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcClaimOccupancyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcClaimOccupancyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcClaimOccupancyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyClaimResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcReleaseOccupancyResponse : pb::IMessage<RoomSvcReleaseOccupancyResponse> {
    private static readonly pb::MessageParser<RoomSvcReleaseOccupancyResponse> _parser = new pb::MessageParser<RoomSvcReleaseOccupancyResponse>(() => new RoomSvcReleaseOccupancyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcReleaseOccupancyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcReleaseOccupancyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcReleaseOccupancyResponse(RoomSvcReleaseOccupancyResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcReleaseOccupancyResponse Clone() {
      return new RoomSvcReleaseOccupancyResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyReleaseResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyReleaseResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcReleaseOccupancyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcReleaseOccupancyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcReleaseOccupancyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Operations.RPC.RoomSvcOccupancyReleaseResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcGetByOccupyingReservationResponse : pb::IMessage<RoomSvcGetByOccupyingReservationResponse> {
    private static readonly pb::MessageParser<RoomSvcGetByOccupyingReservationResponse> _parser = new pb::MessageParser<RoomSvcGetByOccupyingReservationResponse>(() => new RoomSvcGetByOccupyingReservationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcGetByOccupyingReservationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcGetByOccupyingReservationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcGetByOccupyingReservationResponse(RoomSvcGetByOccupyingReservationResponse other) : this() {
      reservationHasRoomClaim_ = other.reservationHasRoomClaim_;
      ClaimedRoom = other.claimedRoom_ != null ? other.ClaimedRoom.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcGetByOccupyingReservationResponse Clone() {
      return new RoomSvcGetByOccupyingReservationResponse(this);
    }

    /// <summary>Field number for the "reservation_has_room_claim" field.</summary>
    public const int ReservationHasRoomClaimFieldNumber = 1;
    private bool reservationHasRoomClaim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReservationHasRoomClaim {
      get { return reservationHasRoomClaim_; }
      set {
        reservationHasRoomClaim_ = value;
      }
    }

    /// <summary>Field number for the "claimed_room" field.</summary>
    public const int ClaimedRoomFieldNumber = 2;
    private global::HOLMS.Types.Operations.Rooms.Room claimedRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.Room ClaimedRoom {
      get { return claimedRoom_; }
      set {
        claimedRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcGetByOccupyingReservationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcGetByOccupyingReservationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReservationHasRoomClaim != other.ReservationHasRoomClaim) return false;
      if (!object.Equals(ClaimedRoom, other.ClaimedRoom)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReservationHasRoomClaim != false) hash ^= ReservationHasRoomClaim.GetHashCode();
      if (claimedRoom_ != null) hash ^= ClaimedRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationHasRoomClaim != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReservationHasRoomClaim);
      }
      if (claimedRoom_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClaimedRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReservationHasRoomClaim != false) {
        size += 1 + 1;
      }
      if (claimedRoom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimedRoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcGetByOccupyingReservationResponse other) {
      if (other == null) {
        return;
      }
      if (other.ReservationHasRoomClaim != false) {
        ReservationHasRoomClaim = other.ReservationHasRoomClaim;
      }
      if (other.claimedRoom_ != null) {
        if (claimedRoom_ == null) {
          claimedRoom_ = new global::HOLMS.Types.Operations.Rooms.Room();
        }
        ClaimedRoom.MergeFrom(other.ClaimedRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationHasRoomClaim = input.ReadBool();
            break;
          }
          case 18: {
            if (claimedRoom_ == null) {
              claimedRoom_ = new global::HOLMS.Types.Operations.Rooms.Room();
            }
            input.ReadMessage(claimedRoom_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcIssueRoomKeyRequest : pb::IMessage<RoomSvcIssueRoomKeyRequest> {
    private static readonly pb::MessageParser<RoomSvcIssueRoomKeyRequest> _parser = new pb::MessageParser<RoomSvcIssueRoomKeyRequest>(() => new RoomSvcIssueRoomKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcIssueRoomKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcIssueRoomKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcIssueRoomKeyRequest(RoomSvcIssueRoomKeyRequest other) : this() {
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
      ExpiryTime = other.expiryTime_ != null ? other.ExpiryTime.Clone() : null;
      numberOfKeys_ = other.numberOfKeys_;
      isNewKey_ = other.isNewKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcIssueRoomKeyRequest Clone() {
      return new RoomSvcIssueRoomKeyRequest(this);
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    /// <summary>Field number for the "number_of_keys" field.</summary>
    public const int NumberOfKeysFieldNumber = 3;
    private int numberOfKeys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfKeys {
      get { return numberOfKeys_; }
      set {
        numberOfKeys_ = value;
      }
    }

    /// <summary>Field number for the "is_new_key" field.</summary>
    public const int IsNewKeyFieldNumber = 4;
    private bool isNewKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNewKey {
      get { return isNewKey_; }
      set {
        isNewKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcIssueRoomKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcIssueRoomKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reservation, other.Reservation)) return false;
      if (!object.Equals(ExpiryTime, other.ExpiryTime)) return false;
      if (NumberOfKeys != other.NumberOfKeys) return false;
      if (IsNewKey != other.IsNewKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      if (expiryTime_ != null) hash ^= ExpiryTime.GetHashCode();
      if (NumberOfKeys != 0) hash ^= NumberOfKeys.GetHashCode();
      if (IsNewKey != false) hash ^= IsNewKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reservation);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExpiryTime);
      }
      if (NumberOfKeys != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumberOfKeys);
      }
      if (IsNewKey != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsNewKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      if (expiryTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryTime);
      }
      if (NumberOfKeys != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfKeys);
      }
      if (IsNewKey != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcIssueRoomKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
      if (other.expiryTime_ != null) {
        if (expiryTime_ == null) {
          expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryTime.MergeFrom(other.ExpiryTime);
      }
      if (other.NumberOfKeys != 0) {
        NumberOfKeys = other.NumberOfKeys;
      }
      if (other.IsNewKey != false) {
        IsNewKey = other.IsNewKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
          case 18: {
            if (expiryTime_ == null) {
              expiryTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expiryTime_);
            break;
          }
          case 24: {
            NumberOfKeys = input.ReadInt32();
            break;
          }
          case 32: {
            IsNewKey = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcIssueRoomKeyResponse : pb::IMessage<RoomSvcIssueRoomKeyResponse> {
    private static readonly pb::MessageParser<RoomSvcIssueRoomKeyResponse> _parser = new pb::MessageParser<RoomSvcIssueRoomKeyResponse>(() => new RoomSvcIssueRoomKeyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcIssueRoomKeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcIssueRoomKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcIssueRoomKeyResponse(RoomSvcIssueRoomKeyResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcIssueRoomKeyResponse Clone() {
      return new RoomSvcIssueRoomKeyResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Operations.RPC.ROOM_SVC_ISSUE_ROOM_KEY_RESULT result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RPC.ROOM_SVC_ISSUE_ROOM_KEY_RESULT Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcIssueRoomKeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcIssueRoomKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcIssueRoomKeyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Operations.RPC.ROOM_SVC_ISSUE_ROOM_KEY_RESULT) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomSvcGetHousekeepingRoomStatusResponse : pb::IMessage<RoomSvcGetHousekeepingRoomStatusResponse> {
    private static readonly pb::MessageParser<RoomSvcGetHousekeepingRoomStatusResponse> _parser = new pb::MessageParser<RoomSvcGetHousekeepingRoomStatusResponse>(() => new RoomSvcGetHousekeepingRoomStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSvcGetHousekeepingRoomStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomSvcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcGetHousekeepingRoomStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcGetHousekeepingRoomStatusResponse(RoomSvcGetHousekeepingRoomStatusResponse other) : this() {
      statuses_ = other.statuses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSvcGetHousekeepingRoomStatusResponse Clone() {
      return new RoomSvcGetHousekeepingRoomStatusResponse(this);
    }

    /// <summary>Field number for the "statuses" field.</summary>
    public const int StatusesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.Housekeeping.HousekeepingRoomStatus> _repeated_statuses_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.Housekeeping.HousekeepingRoomStatus.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.Housekeeping.HousekeepingRoomStatus> statuses_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.Housekeeping.HousekeepingRoomStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.Housekeeping.HousekeepingRoomStatus> Statuses {
      get { return statuses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSvcGetHousekeepingRoomStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSvcGetHousekeepingRoomStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statuses_.Equals(other.statuses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statuses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statuses_.WriteTo(output, _repeated_statuses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statuses_.CalculateSize(_repeated_statuses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSvcGetHousekeepingRoomStatusResponse other) {
      if (other == null) {
        return;
      }
      statuses_.Add(other.statuses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            statuses_.AddEntriesFrom(input, _repeated_statuses_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

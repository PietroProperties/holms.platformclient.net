// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reporting/rpc/management_reporting_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Reporting.RPC {

  /// <summary>Holder for reflection information generated from reporting/rpc/management_reporting_svc.proto</summary>
  public static partial class ManagementReportingSvcReflection {

    #region Descriptor
    /// <summary>File descriptor for reporting/rpc/management_reporting_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ManagementReportingSvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixyZXBvcnRpbmcvcnBjL21hbmFnZW1lbnRfcmVwb3J0aW5nX3N2Yy5wcm90",
            "bxIZaG9sbXMudHlwZXMucmVwb3J0aW5nLnJwYxo4cmVwb3J0aW5nL2lucHV0",
            "X3BhcmFtcy9tYW5hZ2VtZW50X3JlcG9ydF9tYW5pZmVzdHMucHJvdG8aLHJl",
            "cG9ydGluZy9vdXRwdXRzL2h0bWxfcmVwb3J0X3Jlc3BvbnNlLnByb3RvGjJ0",
            "ZW5hbmN5X2NvbmZpZy9pbmRpY2F0b3JzL3Byb3BlcnR5X2luZGljYXRvci5w",
            "cm90byK4AwonTWFuYWdtZW50UmVwb3J0aW5nU3ZjQmF0Y2hSZXBvcnRSZXF1",
            "ZXN0EkwKCnByb3BlcnRpZXMYASADKAsyOC5ob2xtcy50eXBlcy50ZW5hbmN5",
            "X2NvbmZpZy5pbmRpY2F0b3JzLlByb3BlcnR5SW5kaWNhdG9yEmYKFWN1cnJl",
            "bnRfdGltZV9tYW5pZmVzdBgCIAEoCzJHLmhvbG1zLnR5cGVzLnJlcG9ydGlu",
            "Zy5pbnB1dF9wYXJhbXMuTWFuYWdlbWVudEN1cnJlbnRUaW1lUmVwb3J0TWFu",
            "aWZlc3QSbQoZY2xvY2tfdGltZV9yYW5nZV9tYW5pZmVzdBgDIAEoCzJKLmhv",
            "bG1zLnR5cGVzLnJlcG9ydGluZy5pbnB1dF9wYXJhbXMuTWFuYWdlbWVudENs",
            "b2NrVGltZVJhbmdlUmVwb3J0TWFuaWZlc3QSaAoWb3BzZGF0ZV9yYW5nZV9t",
            "YW5pZmVzdBgEIAEoCzJILmhvbG1zLnR5cGVzLnJlcG9ydGluZy5pbnB1dF9w",
            "YXJhbXMuTWFuYWdlbWVudE9wc2RhdGVSYW5nZVJlcG9ydE1hbmlmZXN0IrEB",
            "CjhNYW5hZ2VtZW50UmVwb3J0aW5nU3ZjSG91c2VrZWVwZXJNYW5hZ2VtZW50",
            "UmVwb3J0UmVxdWVzdBIcChRvbmx5X2F0dGVudGlvbl9yb29tcxgBIAEoCBJX",
            "Cg5ub3RlX3NlbGVjdGlvbhgCIAEoDjI/LmhvbG1zLnR5cGVzLnJlcG9ydGlu",
            "Zy5ycGMuTWFuYWdlbWVudFJlcG9ydGluZ1N2Y05vdGVzU2VsZWN0aW9uKm0K",
            "JE1hbmFnZW1lbnRSZXBvcnRpbmdTdmNOb3Rlc1NlbGVjdGlvbhINCglhbGxf",
            "bm90ZXMQABIbChdvbmx5X2hvdXNla2VlcGluZ19ub3RlcxABEhkKFW9ubHlf",
            "ZnJvbnRfZGVza19ub3RlcxACMt4CChZNYW5hZ2VtZW50UmVwb3J0aW5nU3Zj",
            "EpEBChhHZXRNYW5hZ2VtZW50UmVwb3J0QmF0Y2gSQi5ob2xtcy50eXBlcy5y",
            "ZXBvcnRpbmcucnBjLk1hbmFnbWVudFJlcG9ydGluZ1N2Y0JhdGNoUmVwb3J0",
            "UmVxdWVzdBoxLmhvbG1zLnR5cGVzLnJlcG9ydGluZy5vdXRwdXRzLkh0bWxS",
            "ZXBvcnRSZXNwb25zZRKvAQolR2V0Q3VycmVudEhvdXNla2VlcGVyTWFuYWdl",
            "bWVudFJlcG9ydBJTLmhvbG1zLnR5cGVzLnJlcG9ydGluZy5ycGMuTWFuYWdl",
            "bWVudFJlcG9ydGluZ1N2Y0hvdXNla2VlcGVyTWFuYWdlbWVudFJlcG9ydFJl",
            "cXVlc3QaMS5ob2xtcy50eXBlcy5yZXBvcnRpbmcub3V0cHV0cy5IdG1sUmVw",
            "b3J0UmVzcG9uc2VCHKoCGUhPTE1TLlR5cGVzLlJlcG9ydGluZy5SUENiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Reporting.ReportParams.ManagementReportManifestsReflection.Descriptor, global::HOLMS.Types.Reporting.Outputs.HtmlReportResponseReflection.Descriptor, global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcNotesSelection), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest), global::HOLMS.Types.Reporting.RPC.ManagmentReportingSvcBatchReportRequest.Parser, new[]{ "Properties", "CurrentTimeManifest", "ClockTimeRangeManifest", "OpsdateRangeManifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest), global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcHousekeeperManagementReportRequest.Parser, new[]{ "OnlyAttentionRooms", "NoteSelection" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ManagementReportingSvcNotesSelection {
    [pbr::OriginalName("all_notes")] AllNotes = 0,
    [pbr::OriginalName("only_housekeeping_notes")] OnlyHousekeepingNotes = 1,
    [pbr::OriginalName("only_front_desk_notes")] OnlyFrontDeskNotes = 2,
  }

  #endregion

  #region Messages
  public sealed partial class ManagmentReportingSvcBatchReportRequest : pb::IMessage<ManagmentReportingSvcBatchReportRequest> {
    private static readonly pb::MessageParser<ManagmentReportingSvcBatchReportRequest> _parser = new pb::MessageParser<ManagmentReportingSvcBatchReportRequest>(() => new ManagmentReportingSvcBatchReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagmentReportingSvcBatchReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagmentReportingSvcBatchReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagmentReportingSvcBatchReportRequest(ManagmentReportingSvcBatchReportRequest other) : this() {
      properties_ = other.properties_.Clone();
      CurrentTimeManifest = other.currentTimeManifest_ != null ? other.CurrentTimeManifest.Clone() : null;
      ClockTimeRangeManifest = other.clockTimeRangeManifest_ != null ? other.ClockTimeRangeManifest.Clone() : null;
      OpsdateRangeManifest = other.opsdateRangeManifest_ != null ? other.OpsdateRangeManifest.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagmentReportingSvcBatchReportRequest Clone() {
      return new ManagmentReportingSvcBatchReportRequest(this);
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator> properties_ = new pbc::RepeatedField<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "current_time_manifest" field.</summary>
    public const int CurrentTimeManifestFieldNumber = 2;
    private global::HOLMS.Types.Reporting.ReportParams.ManagementCurrentTimeReportManifest currentTimeManifest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Reporting.ReportParams.ManagementCurrentTimeReportManifest CurrentTimeManifest {
      get { return currentTimeManifest_; }
      set {
        currentTimeManifest_ = value;
      }
    }

    /// <summary>Field number for the "clock_time_range_manifest" field.</summary>
    public const int ClockTimeRangeManifestFieldNumber = 3;
    private global::HOLMS.Types.Reporting.ReportParams.ManagementClockTimeRangeReportManifest clockTimeRangeManifest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Reporting.ReportParams.ManagementClockTimeRangeReportManifest ClockTimeRangeManifest {
      get { return clockTimeRangeManifest_; }
      set {
        clockTimeRangeManifest_ = value;
      }
    }

    /// <summary>Field number for the "opsdate_range_manifest" field.</summary>
    public const int OpsdateRangeManifestFieldNumber = 4;
    private global::HOLMS.Types.Reporting.ReportParams.ManagementOpsdateRangeReportManifest opsdateRangeManifest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Reporting.ReportParams.ManagementOpsdateRangeReportManifest OpsdateRangeManifest {
      get { return opsdateRangeManifest_; }
      set {
        opsdateRangeManifest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagmentReportingSvcBatchReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagmentReportingSvcBatchReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!properties_.Equals(other.properties_)) return false;
      if (!object.Equals(CurrentTimeManifest, other.CurrentTimeManifest)) return false;
      if (!object.Equals(ClockTimeRangeManifest, other.ClockTimeRangeManifest)) return false;
      if (!object.Equals(OpsdateRangeManifest, other.OpsdateRangeManifest)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= properties_.GetHashCode();
      if (currentTimeManifest_ != null) hash ^= CurrentTimeManifest.GetHashCode();
      if (clockTimeRangeManifest_ != null) hash ^= ClockTimeRangeManifest.GetHashCode();
      if (opsdateRangeManifest_ != null) hash ^= OpsdateRangeManifest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      properties_.WriteTo(output, _repeated_properties_codec);
      if (currentTimeManifest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentTimeManifest);
      }
      if (clockTimeRangeManifest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ClockTimeRangeManifest);
      }
      if (opsdateRangeManifest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OpsdateRangeManifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (currentTimeManifest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTimeManifest);
      }
      if (clockTimeRangeManifest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClockTimeRangeManifest);
      }
      if (opsdateRangeManifest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpsdateRangeManifest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagmentReportingSvcBatchReportRequest other) {
      if (other == null) {
        return;
      }
      properties_.Add(other.properties_);
      if (other.currentTimeManifest_ != null) {
        if (currentTimeManifest_ == null) {
          currentTimeManifest_ = new global::HOLMS.Types.Reporting.ReportParams.ManagementCurrentTimeReportManifest();
        }
        CurrentTimeManifest.MergeFrom(other.CurrentTimeManifest);
      }
      if (other.clockTimeRangeManifest_ != null) {
        if (clockTimeRangeManifest_ == null) {
          clockTimeRangeManifest_ = new global::HOLMS.Types.Reporting.ReportParams.ManagementClockTimeRangeReportManifest();
        }
        ClockTimeRangeManifest.MergeFrom(other.ClockTimeRangeManifest);
      }
      if (other.opsdateRangeManifest_ != null) {
        if (opsdateRangeManifest_ == null) {
          opsdateRangeManifest_ = new global::HOLMS.Types.Reporting.ReportParams.ManagementOpsdateRangeReportManifest();
        }
        OpsdateRangeManifest.MergeFrom(other.OpsdateRangeManifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 18: {
            if (currentTimeManifest_ == null) {
              currentTimeManifest_ = new global::HOLMS.Types.Reporting.ReportParams.ManagementCurrentTimeReportManifest();
            }
            input.ReadMessage(currentTimeManifest_);
            break;
          }
          case 26: {
            if (clockTimeRangeManifest_ == null) {
              clockTimeRangeManifest_ = new global::HOLMS.Types.Reporting.ReportParams.ManagementClockTimeRangeReportManifest();
            }
            input.ReadMessage(clockTimeRangeManifest_);
            break;
          }
          case 34: {
            if (opsdateRangeManifest_ == null) {
              opsdateRangeManifest_ = new global::HOLMS.Types.Reporting.ReportParams.ManagementOpsdateRangeReportManifest();
            }
            input.ReadMessage(opsdateRangeManifest_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ManagementReportingSvcHousekeeperManagementReportRequest : pb::IMessage<ManagementReportingSvcHousekeeperManagementReportRequest> {
    private static readonly pb::MessageParser<ManagementReportingSvcHousekeeperManagementReportRequest> _parser = new pb::MessageParser<ManagementReportingSvcHousekeeperManagementReportRequest>(() => new ManagementReportingSvcHousekeeperManagementReportRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagementReportingSvcHousekeeperManagementReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementReportingSvcHousekeeperManagementReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementReportingSvcHousekeeperManagementReportRequest(ManagementReportingSvcHousekeeperManagementReportRequest other) : this() {
      onlyAttentionRooms_ = other.onlyAttentionRooms_;
      noteSelection_ = other.noteSelection_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagementReportingSvcHousekeeperManagementReportRequest Clone() {
      return new ManagementReportingSvcHousekeeperManagementReportRequest(this);
    }

    /// <summary>Field number for the "only_attention_rooms" field.</summary>
    public const int OnlyAttentionRoomsFieldNumber = 1;
    private bool onlyAttentionRooms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyAttentionRooms {
      get { return onlyAttentionRooms_; }
      set {
        onlyAttentionRooms_ = value;
      }
    }

    /// <summary>Field number for the "note_selection" field.</summary>
    public const int NoteSelectionFieldNumber = 2;
    private global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcNotesSelection noteSelection_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcNotesSelection NoteSelection {
      get { return noteSelection_; }
      set {
        noteSelection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagementReportingSvcHousekeeperManagementReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagementReportingSvcHousekeeperManagementReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyAttentionRooms != other.OnlyAttentionRooms) return false;
      if (NoteSelection != other.NoteSelection) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyAttentionRooms != false) hash ^= OnlyAttentionRooms.GetHashCode();
      if (NoteSelection != 0) hash ^= NoteSelection.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyAttentionRooms != false) {
        output.WriteRawTag(8);
        output.WriteBool(OnlyAttentionRooms);
      }
      if (NoteSelection != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NoteSelection);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyAttentionRooms != false) {
        size += 1 + 1;
      }
      if (NoteSelection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NoteSelection);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagementReportingSvcHousekeeperManagementReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.OnlyAttentionRooms != false) {
        OnlyAttentionRooms = other.OnlyAttentionRooms;
      }
      if (other.NoteSelection != 0) {
        NoteSelection = other.NoteSelection;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OnlyAttentionRooms = input.ReadBool();
            break;
          }
          case 16: {
            noteSelection_ = (global::HOLMS.Types.Reporting.RPC.ManagementReportingSvcNotesSelection) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

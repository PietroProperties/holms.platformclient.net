// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenancy_config/rpc/zip_code_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.TenancyConfig.RPC {
  public static class ZipCodeSvc
  {
    static readonly string __ServiceName = "holms.types.tenancy_config.rpc.ZipCodeSvc";

    static readonly Marshaller<global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq> __Marshaller_ZipCodeSvcGetCityStateByZipReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Primitive.ZipCode> __Marshaller_ZipCode = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Primitive.ZipCode.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq, global::HOLMS.Types.Primitive.ZipCode> __Method_GetCityStateByZip = new Method<global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq, global::HOLMS.Types.Primitive.ZipCode>(
        MethodType.Unary,
        __ServiceName,
        "GetCityStateByZip",
        __Marshaller_ZipCodeSvcGetCityStateByZipReq,
        __Marshaller_ZipCode);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ZipCodeSvc</summary>
    public abstract class ZipCodeSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Primitive.ZipCode> GetCityStateByZip(global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ZipCodeSvc</summary>
    public class ZipCodeSvcClient : ClientBase<ZipCodeSvcClient>
    {
      /// <summary>Creates a new client for ZipCodeSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ZipCodeSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ZipCodeSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ZipCodeSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ZipCodeSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ZipCodeSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Primitive.ZipCode GetCityStateByZip(global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCityStateByZip(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Primitive.ZipCode GetCityStateByZip(global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCityStateByZip, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ZipCode> GetCityStateByZipAsync(global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCityStateByZipAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ZipCode> GetCityStateByZipAsync(global::HOLMS.Types.TenancyConfig.RPC.ZipCodeSvcGetCityStateByZipReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCityStateByZip, null, options, request);
      }
      protected override ZipCodeSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ZipCodeSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ZipCodeSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCityStateByZip, serviceImpl.GetCityStateByZip).Build();
    }

  }
}
#endregion

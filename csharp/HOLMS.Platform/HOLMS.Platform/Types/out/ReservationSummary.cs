// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/reservations/reservation_summary.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.Reservations {

  /// <summary>Holder for reflection information generated from booking/reservations/reservation_summary.proto</summary>
  public static partial class ReservationSummaryReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/reservations/reservation_summary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReservationSummaryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5ib29raW5nL3Jlc2VydmF0aW9ucy9yZXNlcnZhdGlvbl9zdW1tYXJ5LnBy",
            "b3RvEiBob2xtcy50eXBlcy5ib29raW5nLnJlc2VydmF0aW9ucxo3Ym9va2lu",
            "Zy9yZXNlcnZhdGlvbnMvcmVzZXJ2YXRpb25fZ3VhcmFudGVlX3N0YXR1cy5w",
            "cm90bxouYm9va2luZy9pbmRpY2F0b3JzL3Jlc2VydmF0aW9uX2luZGljYXRv",
            "ci5wcm90bxosYm9va2luZy9yZXNlcnZhdGlvbnMvcmVzZXJ2YXRpb25fc3Rh",
            "dGUucHJvdG8aFmNybS9ndWVzdHMvZ3Vlc3QucHJvdG8aKnByaW1pdGl2ZS9w",
            "Yl9pbmNsdXNpdmVfb3BzZGF0ZV9yYW5nZS5wcm90bxohc3VwcGx5L3Jvb21f",
            "dHlwZXMvcm9vbV90eXBlLnByb3RvGhtpYW0vdGVuYW5jeV9pbmRpY2F0b3Iu",
            "cHJvdG8aMnRlbmFuY3lfY29uZmlnL2luZGljYXRvcnMvcHJvcGVydHlfaW5k",
            "aWNhdG9yLnByb3RvGiVvcGVyYXRpb25zL3Jvb21zL3Jvb21faW5kaWNhdG9y",
            "LnByb3RvIoEGChJSZXNlcnZhdGlvblN1bW1hcnkSRwoJZW50aXR5X2lkGAEg",
            "ASgLMjQuaG9sbXMudHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLlJlc2VydmF0",
            "aW9uSW5kaWNhdG9yEhIKCmJvb2tpbmdfaWQYAiABKAkSQQoFc3RhdGUYAyAB",
            "KA4yMi5ob2xtcy50eXBlcy5ib29raW5nLnJlc2VydmF0aW9ucy5SZXNlcnZh",
            "dGlvblN0YXRlEiwKBWd1ZXN0GAQgASgLMh0uaG9sbXMudHlwZXMuY3JtLmd1",
            "ZXN0cy5HdWVzdBJCCgpkYXRlX3JhbmdlGAUgASgLMi4uaG9sbXMudHlwZXMu",
            "cHJpbWl0aXZlLlBiSW5jbHVzaXZlT3BzZGF0ZVJhbmdlEjoKCXJvb21fdHlw",
            "ZRgGIAEoCzInLmhvbG1zLnR5cGVzLnN1cHBseS5yb29tX3R5cGVzLlJvb21U",
            "eXBlElYKEGd1YXJhbnRlZV9zdGF0dXMYByABKA4yPC5ob2xtcy50eXBlcy5i",
            "b29raW5nLnJlc2VydmF0aW9ucy5SZXNlcnZhdGlvbkd1YXJhbnRlZVN0YXR1",
            "cxIyCgd0ZW5hbmN5GAggASgLMiEuaG9sbXMudHlwZXMuaWFtLlRlbmFuY3lJ",
            "bmRpY2F0b3ISSgoIcHJvcGVydHkYCSABKAsyOC5ob2xtcy50eXBlcy50ZW5h",
            "bmN5X2NvbmZpZy5pbmRpY2F0b3JzLlByb3BlcnR5SW5kaWNhdG9yEhgKEGdy",
            "b3VwX2Jvb2tpbmdfaWQYCiABKAkSIQoZdmVoaWNsZV9wbGF0ZV9pbmZvcm1h",
            "dGlvbhgLIAEoCRIwCihjdXJyZW50X29yX3Rlcm1pbmFsX29jY3VwaWVkX3Jv",
            "b21fbnVtYmVyGAwgASgJElYKIWN1cnJlbnRfb3JfdGVybWluYWxfb2NjdXBp",
            "ZWRfcm9vbRgNIAEoCzIrLmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMucm9vbXMu",
            "Um9vbUluZGljYXRvckI5WhRib29raW5nL3Jlc2VydmF0aW9uc6oCIEhPTE1T",
            "LlR5cGVzLkJvb2tpbmcuUmVzZXJ2YXRpb25zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Reservations.ReservationGuaranteeStatusReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.ReservationStateReflection.Descriptor, global::HOLMS.Types.CRM.Guests.GuestReflection.Descriptor, global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Supply.RoomTypes.RoomTypeReflection.Descriptor, global::HOLMS.Types.IAM.TenancyIndicatorReflection.Descriptor, global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicatorReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.Reservations.ReservationSummary), global::HOLMS.Types.Booking.Reservations.ReservationSummary.Parser, new[]{ "EntityId", "BookingId", "State", "Guest", "DateRange", "RoomType", "GuaranteeStatus", "Tenancy", "Property", "GroupBookingId", "VehiclePlateInformation", "CurrentOrTerminalOccupiedRoomNumber", "CurrentOrTerminalOccupiedRoom" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReservationSummary : pb::IMessage<ReservationSummary> {
    private static readonly pb::MessageParser<ReservationSummary> _parser = new pb::MessageParser<ReservationSummary>(() => new ReservationSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservationSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.Reservations.ReservationSummaryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationSummary(ReservationSummary other) : this() {
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
      bookingId_ = other.bookingId_;
      state_ = other.state_;
      Guest = other.guest_ != null ? other.Guest.Clone() : null;
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      guaranteeStatus_ = other.guaranteeStatus_;
      Tenancy = other.tenancy_ != null ? other.Tenancy.Clone() : null;
      Property = other.property_ != null ? other.Property.Clone() : null;
      groupBookingId_ = other.groupBookingId_;
      vehiclePlateInformation_ = other.vehiclePlateInformation_;
      currentOrTerminalOccupiedRoomNumber_ = other.currentOrTerminalOccupiedRoomNumber_;
      CurrentOrTerminalOccupiedRoom = other.currentOrTerminalOccupiedRoom_ != null ? other.CurrentOrTerminalOccupiedRoom.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationSummary Clone() {
      return new ReservationSummary(this);
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "booking_id" field.</summary>
    public const int BookingIdFieldNumber = 2;
    private string bookingId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookingId {
      get { return bookingId_; }
      set {
        bookingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::HOLMS.Types.Booking.Reservations.ReservationState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Reservations.ReservationState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "guest" field.</summary>
    public const int GuestFieldNumber = 4;
    private global::HOLMS.Types.CRM.Guests.Guest guest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.CRM.Guests.Guest Guest {
      get { return guest_; }
      set {
        guest_ = value;
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 5;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 6;
    private global::HOLMS.Types.Supply.RoomTypes.RoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomType RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "guarantee_status" field.</summary>
    public const int GuaranteeStatusFieldNumber = 7;
    private global::HOLMS.Types.Booking.Reservations.ReservationGuaranteeStatus guaranteeStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Reservations.ReservationGuaranteeStatus GuaranteeStatus {
      get { return guaranteeStatus_; }
      set {
        guaranteeStatus_ = value;
      }
    }

    /// <summary>Field number for the "tenancy" field.</summary>
    public const int TenancyFieldNumber = 8;
    private global::HOLMS.Types.IAM.TenancyIndicator tenancy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.IAM.TenancyIndicator Tenancy {
      get { return tenancy_; }
      set {
        tenancy_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 9;
    private global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "group_booking_id" field.</summary>
    public const int GroupBookingIdFieldNumber = 10;
    private string groupBookingId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupBookingId {
      get { return groupBookingId_; }
      set {
        groupBookingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicle_plate_information" field.</summary>
    public const int VehiclePlateInformationFieldNumber = 11;
    private string vehiclePlateInformation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehiclePlateInformation {
      get { return vehiclePlateInformation_; }
      set {
        vehiclePlateInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_or_terminal_occupied_room_number" field.</summary>
    public const int CurrentOrTerminalOccupiedRoomNumberFieldNumber = 12;
    private string currentOrTerminalOccupiedRoomNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentOrTerminalOccupiedRoomNumber {
      get { return currentOrTerminalOccupiedRoomNumber_; }
      set {
        currentOrTerminalOccupiedRoomNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_or_terminal_occupied_room" field.</summary>
    public const int CurrentOrTerminalOccupiedRoomFieldNumber = 13;
    private global::HOLMS.Types.Operations.Rooms.RoomIndicator currentOrTerminalOccupiedRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.Rooms.RoomIndicator CurrentOrTerminalOccupiedRoom {
      get { return currentOrTerminalOccupiedRoom_; }
      set {
        currentOrTerminalOccupiedRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservationSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservationSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityId, other.EntityId)) return false;
      if (BookingId != other.BookingId) return false;
      if (State != other.State) return false;
      if (!object.Equals(Guest, other.Guest)) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (GuaranteeStatus != other.GuaranteeStatus) return false;
      if (!object.Equals(Tenancy, other.Tenancy)) return false;
      if (!object.Equals(Property, other.Property)) return false;
      if (GroupBookingId != other.GroupBookingId) return false;
      if (VehiclePlateInformation != other.VehiclePlateInformation) return false;
      if (CurrentOrTerminalOccupiedRoomNumber != other.CurrentOrTerminalOccupiedRoomNumber) return false;
      if (!object.Equals(CurrentOrTerminalOccupiedRoom, other.CurrentOrTerminalOccupiedRoom)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      if (BookingId.Length != 0) hash ^= BookingId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (guest_ != null) hash ^= Guest.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (GuaranteeStatus != 0) hash ^= GuaranteeStatus.GetHashCode();
      if (tenancy_ != null) hash ^= Tenancy.GetHashCode();
      if (property_ != null) hash ^= Property.GetHashCode();
      if (GroupBookingId.Length != 0) hash ^= GroupBookingId.GetHashCode();
      if (VehiclePlateInformation.Length != 0) hash ^= VehiclePlateInformation.GetHashCode();
      if (CurrentOrTerminalOccupiedRoomNumber.Length != 0) hash ^= CurrentOrTerminalOccupiedRoomNumber.GetHashCode();
      if (currentOrTerminalOccupiedRoom_ != null) hash ^= CurrentOrTerminalOccupiedRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entityId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityId);
      }
      if (BookingId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BookingId);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (guest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Guest);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DateRange);
      }
      if (roomType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RoomType);
      }
      if (GuaranteeStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) GuaranteeStatus);
      }
      if (tenancy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Tenancy);
      }
      if (property_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Property);
      }
      if (GroupBookingId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GroupBookingId);
      }
      if (VehiclePlateInformation.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(VehiclePlateInformation);
      }
      if (CurrentOrTerminalOccupiedRoomNumber.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CurrentOrTerminalOccupiedRoomNumber);
      }
      if (currentOrTerminalOccupiedRoom_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CurrentOrTerminalOccupiedRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      if (BookingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookingId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (guest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guest);
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (GuaranteeStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GuaranteeStatus);
      }
      if (tenancy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tenancy);
      }
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (GroupBookingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupBookingId);
      }
      if (VehiclePlateInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehiclePlateInformation);
      }
      if (CurrentOrTerminalOccupiedRoomNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentOrTerminalOccupiedRoomNumber);
      }
      if (currentOrTerminalOccupiedRoom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentOrTerminalOccupiedRoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservationSummary other) {
      if (other == null) {
        return;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
      if (other.BookingId.Length != 0) {
        BookingId = other.BookingId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.guest_ != null) {
        if (guest_ == null) {
          guest_ = new global::HOLMS.Types.CRM.Guests.Guest();
        }
        Guest.MergeFrom(other.Guest);
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomType();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.GuaranteeStatus != 0) {
        GuaranteeStatus = other.GuaranteeStatus;
      }
      if (other.tenancy_ != null) {
        if (tenancy_ == null) {
          tenancy_ = new global::HOLMS.Types.IAM.TenancyIndicator();
        }
        Tenancy.MergeFrom(other.Tenancy);
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.GroupBookingId.Length != 0) {
        GroupBookingId = other.GroupBookingId;
      }
      if (other.VehiclePlateInformation.Length != 0) {
        VehiclePlateInformation = other.VehiclePlateInformation;
      }
      if (other.CurrentOrTerminalOccupiedRoomNumber.Length != 0) {
        CurrentOrTerminalOccupiedRoomNumber = other.CurrentOrTerminalOccupiedRoomNumber;
      }
      if (other.currentOrTerminalOccupiedRoom_ != null) {
        if (currentOrTerminalOccupiedRoom_ == null) {
          currentOrTerminalOccupiedRoom_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
        }
        CurrentOrTerminalOccupiedRoom.MergeFrom(other.CurrentOrTerminalOccupiedRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
          case 18: {
            BookingId = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::HOLMS.Types.Booking.Reservations.ReservationState) input.ReadEnum();
            break;
          }
          case 34: {
            if (guest_ == null) {
              guest_ = new global::HOLMS.Types.CRM.Guests.Guest();
            }
            input.ReadMessage(guest_);
            break;
          }
          case 42: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
          case 50: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomType();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 56: {
            guaranteeStatus_ = (global::HOLMS.Types.Booking.Reservations.ReservationGuaranteeStatus) input.ReadEnum();
            break;
          }
          case 66: {
            if (tenancy_ == null) {
              tenancy_ = new global::HOLMS.Types.IAM.TenancyIndicator();
            }
            input.ReadMessage(tenancy_);
            break;
          }
          case 74: {
            if (property_ == null) {
              property_ = new global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator();
            }
            input.ReadMessage(property_);
            break;
          }
          case 82: {
            GroupBookingId = input.ReadString();
            break;
          }
          case 90: {
            VehiclePlateInformation = input.ReadString();
            break;
          }
          case 98: {
            CurrentOrTerminalOccupiedRoomNumber = input.ReadString();
            break;
          }
          case 106: {
            if (currentOrTerminalOccupiedRoom_ == null) {
              currentOrTerminalOccupiedRoom_ = new global::HOLMS.Types.Operations.Rooms.RoomIndicator();
            }
            input.ReadMessage(currentOrTerminalOccupiedRoom_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iam/rpc/department_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.IAM.RPC {
  public static class DepartmentSvc
  {
    static readonly string __ServiceName = "holms.types.iam.rpc.DepartmentSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse> __Marshaller_DepartmentSvcAllResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.DepartmentIndicator> __Marshaller_DepartmentIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.DepartmentIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.Department> __Marshaller_Department = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.Department.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Primitive.ServerActionConfirmation> __Marshaller_ServerActionConfirmation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Primitive.ServerActionConfirmation.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse> __Method_All = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_Empty,
        __Marshaller_DepartmentSvcAllResponse);

    static readonly Method<global::HOLMS.Types.IAM.DepartmentIndicator, global::HOLMS.Types.IAM.Department> __Method_GetById = new Method<global::HOLMS.Types.IAM.DepartmentIndicator, global::HOLMS.Types.IAM.Department>(
        MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_DepartmentIndicator,
        __Marshaller_Department);

    static readonly Method<global::HOLMS.Types.IAM.Department, global::HOLMS.Types.IAM.Department> __Method_Create = new Method<global::HOLMS.Types.IAM.Department, global::HOLMS.Types.IAM.Department>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Department,
        __Marshaller_Department);

    static readonly Method<global::HOLMS.Types.IAM.Department, global::HOLMS.Types.IAM.Department> __Method_Update = new Method<global::HOLMS.Types.IAM.Department, global::HOLMS.Types.IAM.Department>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Department,
        __Marshaller_Department);

    static readonly Method<global::HOLMS.Types.IAM.Department, global::HOLMS.Types.Primitive.ServerActionConfirmation> __Method_Delete = new Method<global::HOLMS.Types.IAM.Department, global::HOLMS.Types.Primitive.ServerActionConfirmation>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Department,
        __Marshaller_ServerActionConfirmation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.IAM.RPC.DepartmentSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DepartmentSvc</summary>
    public abstract class DepartmentSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse> All(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.Department> GetById(global::HOLMS.Types.IAM.DepartmentIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.Department> Create(global::HOLMS.Types.IAM.Department request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.Department> Update(global::HOLMS.Types.IAM.Department request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Primitive.ServerActionConfirmation> Delete(global::HOLMS.Types.IAM.Department request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DepartmentSvc</summary>
    public class DepartmentSvcClient : ClientBase<DepartmentSvcClient>
    {
      /// <summary>Creates a new client for DepartmentSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DepartmentSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DepartmentSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DepartmentSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DepartmentSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DepartmentSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return All(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.DepartmentSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      public virtual global::HOLMS.Types.IAM.Department GetById(global::HOLMS.Types.IAM.DepartmentIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetById(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.Department GetById(global::HOLMS.Types.IAM.DepartmentIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.Department> GetByIdAsync(global::HOLMS.Types.IAM.DepartmentIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.Department> GetByIdAsync(global::HOLMS.Types.IAM.DepartmentIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual global::HOLMS.Types.IAM.Department Create(global::HOLMS.Types.IAM.Department request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.Department Create(global::HOLMS.Types.IAM.Department request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.Department> CreateAsync(global::HOLMS.Types.IAM.Department request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.Department> CreateAsync(global::HOLMS.Types.IAM.Department request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::HOLMS.Types.IAM.Department Update(global::HOLMS.Types.IAM.Department request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.Department Update(global::HOLMS.Types.IAM.Department request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.Department> UpdateAsync(global::HOLMS.Types.IAM.Department request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.Department> UpdateAsync(global::HOLMS.Types.IAM.Department request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.IAM.Department request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Primitive.ServerActionConfirmation Delete(global::HOLMS.Types.IAM.Department request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.IAM.Department request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Primitive.ServerActionConfirmation> DeleteAsync(global::HOLMS.Types.IAM.Department request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      protected override DepartmentSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DepartmentSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(DepartmentSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

  }
}
#endregion

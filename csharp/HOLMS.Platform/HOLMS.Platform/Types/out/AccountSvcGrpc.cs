// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/rpc/account_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Money.RPC {
  public static class AccountSvc
  {
    static readonly string __ServiceName = "holms.types.money.rpc.AccountSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> __Marshaller_AccountSvcEnumResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Accounting.AccountIndicator> __Marshaller_AccountIndicator = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Accounting.AccountIndicator.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Accounting.Account> __Marshaller_Account = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Accounting.Account.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse> __Marshaller_AccountSvcCreateResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse> __Marshaller_AccountSvcUpdateResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse> __Marshaller_AccountSvcDeleteResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq> __Marshaller_AccountSvcAllByCategoryReq = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Money.Accounting.AccountActivityLedger> __Marshaller_AccountActivityLedger = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Money.Accounting.AccountActivityLedger.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> __Method_All = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse>(
        MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_Empty,
        __Marshaller_AccountSvcEnumResponse);

    static readonly Method<global::HOLMS.Types.Money.Accounting.AccountIndicator, global::HOLMS.Types.Money.Accounting.Account> __Method_GetById = new Method<global::HOLMS.Types.Money.Accounting.AccountIndicator, global::HOLMS.Types.Money.Accounting.Account>(
        MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_AccountIndicator,
        __Marshaller_Account);

    static readonly Method<global::HOLMS.Types.Money.Accounting.Account, global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse> __Method_Create = new Method<global::HOLMS.Types.Money.Accounting.Account, global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Account,
        __Marshaller_AccountSvcCreateResponse);

    static readonly Method<global::HOLMS.Types.Money.Accounting.Account, global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse> __Method_Update = new Method<global::HOLMS.Types.Money.Accounting.Account, global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse>(
        MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Account,
        __Marshaller_AccountSvcUpdateResponse);

    static readonly Method<global::HOLMS.Types.Money.Accounting.Account, global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse> __Method_Delete = new Method<global::HOLMS.Types.Money.Accounting.Account, global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Account,
        __Marshaller_AccountSvcDeleteResponse);

    static readonly Method<global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq, global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> __Method_AllByCategory = new Method<global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq, global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse>(
        MethodType.Unary,
        __ServiceName,
        "AllByCategory",
        __Marshaller_AccountSvcAllByCategoryReq,
        __Marshaller_AccountSvcEnumResponse);

    static readonly Method<global::HOLMS.Types.Money.Accounting.AccountIndicator, global::HOLMS.Types.Money.Accounting.AccountActivityLedger> __Method_GetLedgerForAccount = new Method<global::HOLMS.Types.Money.Accounting.AccountIndicator, global::HOLMS.Types.Money.Accounting.AccountActivityLedger>(
        MethodType.Unary,
        __ServiceName,
        "GetLedgerForAccount",
        __Marshaller_AccountIndicator,
        __Marshaller_AccountActivityLedger);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Money.RPC.AccountSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AccountSvc</summary>
    public abstract class AccountSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> All(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.Accounting.Account> GetById(global::HOLMS.Types.Money.Accounting.AccountIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse> Create(global::HOLMS.Types.Money.Accounting.Account request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse> Update(global::HOLMS.Types.Money.Accounting.Account request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse> Delete(global::HOLMS.Types.Money.Accounting.Account request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> AllByCategory(global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Money.Accounting.AccountActivityLedger> GetLedgerForAccount(global::HOLMS.Types.Money.Accounting.AccountIndicator request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AccountSvc</summary>
    public class AccountSvcClient : ClientBase<AccountSvcClient>
    {
      /// <summary>Creates a new client for AccountSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AccountSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AccountSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AccountSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AccountSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AccountSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return All(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.Accounting.Account GetById(global::HOLMS.Types.Money.Accounting.AccountIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetById(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.Accounting.Account GetById(global::HOLMS.Types.Money.Accounting.AccountIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Accounting.Account> GetByIdAsync(global::HOLMS.Types.Money.Accounting.AccountIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Accounting.Account> GetByIdAsync(global::HOLMS.Types.Money.Accounting.AccountIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse Create(global::HOLMS.Types.Money.Accounting.Account request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse Create(global::HOLMS.Types.Money.Accounting.Account request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse> CreateAsync(global::HOLMS.Types.Money.Accounting.Account request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcCreateResponse> CreateAsync(global::HOLMS.Types.Money.Accounting.Account request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse Update(global::HOLMS.Types.Money.Accounting.Account request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Update(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse Update(global::HOLMS.Types.Money.Accounting.Account request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse> UpdateAsync(global::HOLMS.Types.Money.Accounting.Account request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcUpdateResponse> UpdateAsync(global::HOLMS.Types.Money.Accounting.Account request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse Delete(global::HOLMS.Types.Money.Accounting.Account request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse Delete(global::HOLMS.Types.Money.Accounting.Account request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse> DeleteAsync(global::HOLMS.Types.Money.Accounting.Account request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcDeleteResponse> DeleteAsync(global::HOLMS.Types.Money.Accounting.Account request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse AllByCategory(global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllByCategory(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse AllByCategory(global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllByCategory, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> AllByCategoryAsync(global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllByCategoryAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.RPC.AccountSvcEnumResponse> AllByCategoryAsync(global::HOLMS.Types.Money.RPC.AccountSvcAllByCategoryReq request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllByCategory, null, options, request);
      }
      public virtual global::HOLMS.Types.Money.Accounting.AccountActivityLedger GetLedgerForAccount(global::HOLMS.Types.Money.Accounting.AccountIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLedgerForAccount(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Money.Accounting.AccountActivityLedger GetLedgerForAccount(global::HOLMS.Types.Money.Accounting.AccountIndicator request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLedgerForAccount, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Accounting.AccountActivityLedger> GetLedgerForAccountAsync(global::HOLMS.Types.Money.Accounting.AccountIndicator request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLedgerForAccountAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Money.Accounting.AccountActivityLedger> GetLedgerForAccountAsync(global::HOLMS.Types.Money.Accounting.AccountIndicator request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLedgerForAccount, null, options, request);
      }
      protected override AccountSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AccountSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(AccountSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_AllByCategory, serviceImpl.AllByCategory)
          .AddMethod(__Method_GetLedgerForAccount, serviceImpl.GetLedgerForAccount).Build();
    }

  }
}
#endregion

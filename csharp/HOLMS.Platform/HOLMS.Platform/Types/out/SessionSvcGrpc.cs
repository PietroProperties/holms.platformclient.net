// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iam/rpc/session_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.IAM.RPC {
  public static class SessionSvc
  {
    static readonly string __ServiceName = "holms.types.iam.rpc.SessionSvc";

    static readonly Marshaller<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest> __Marshaller_SessionSvcStartSessionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> __Marshaller_SessionSvcStartSessionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.RPC.TokenRefreshRequest> __Marshaller_TokenRefreshRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.RPC.TokenRefreshRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest> __Marshaller_TokenInvalidationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse> __Marshaller_TokenInvalidationResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse.Parser.ParseFrom);

    static readonly Method<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest, global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> __Method_TryStartSession = new Method<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest, global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse>(
        MethodType.Unary,
        __ServiceName,
        "TryStartSession",
        __Marshaller_SessionSvcStartSessionRequest,
        __Marshaller_SessionSvcStartSessionResponse);

    static readonly Method<global::HOLMS.Types.IAM.RPC.TokenRefreshRequest, global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> __Method_RefreshAccessToken = new Method<global::HOLMS.Types.IAM.RPC.TokenRefreshRequest, global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse>(
        MethodType.Unary,
        __ServiceName,
        "RefreshAccessToken",
        __Marshaller_TokenRefreshRequest,
        __Marshaller_SessionSvcStartSessionResponse);

    static readonly Method<global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest, global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse> __Method_InvalidateRefreshToken = new Method<global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest, global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse>(
        MethodType.Unary,
        __ServiceName,
        "InvalidateRefreshToken",
        __Marshaller_TokenInvalidationRequest,
        __Marshaller_TokenInvalidationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.IAM.RPC.SessionSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SessionSvc</summary>
    public abstract class SessionSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> TryStartSession(global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> RefreshAccessToken(global::HOLMS.Types.IAM.RPC.TokenRefreshRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse> InvalidateRefreshToken(global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SessionSvc</summary>
    public class SessionSvcClient : ClientBase<SessionSvcClient>
    {
      /// <summary>Creates a new client for SessionSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SessionSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SessionSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SessionSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SessionSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SessionSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse TryStartSession(global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TryStartSession(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse TryStartSession(global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TryStartSession, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> TryStartSessionAsync(global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TryStartSessionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> TryStartSessionAsync(global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TryStartSession, null, options, request);
      }
      public virtual global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse RefreshAccessToken(global::HOLMS.Types.IAM.RPC.TokenRefreshRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshAccessToken(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse RefreshAccessToken(global::HOLMS.Types.IAM.RPC.TokenRefreshRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshAccessToken, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> RefreshAccessTokenAsync(global::HOLMS.Types.IAM.RPC.TokenRefreshRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshAccessTokenAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.SessionSvcStartSessionResponse> RefreshAccessTokenAsync(global::HOLMS.Types.IAM.RPC.TokenRefreshRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshAccessToken, null, options, request);
      }
      public virtual global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse InvalidateRefreshToken(global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InvalidateRefreshToken(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse InvalidateRefreshToken(global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InvalidateRefreshToken, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse> InvalidateRefreshTokenAsync(global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InvalidateRefreshTokenAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.IAM.RPC.TokenInvalidationResponse> InvalidateRefreshTokenAsync(global::HOLMS.Types.IAM.RPC.TokenInvalidationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InvalidateRefreshToken, null, options, request);
      }
      protected override SessionSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SessionSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SessionSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TryStartSession, serviceImpl.TryStartSession)
          .AddMethod(__Method_RefreshAccessToken, serviceImpl.RefreshAccessToken)
          .AddMethod(__Method_InvalidateRefreshToken, serviceImpl.InvalidateRefreshToken).Build();
    }

  }
}
#endregion

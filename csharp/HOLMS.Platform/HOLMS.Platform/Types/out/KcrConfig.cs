// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tenancy_config/kcr_config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.TenancyConfig {

  /// <summary>Holder for reflection information generated from tenancy_config/kcr_config.proto</summary>
  public static partial class KcrConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for tenancy_config/kcr_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KcrConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch90ZW5hbmN5X2NvbmZpZy9rY3JfY29uZmlnLnByb3RvEhpob2xtcy50eXBl",
            "cy50ZW5hbmN5X2NvbmZpZyKoAQoJS0NSQ29uZmlnEiEKGXBvc3RfY2hlY2tv",
            "dXRfZ3JhY2VfaG91cnMYASABKA0SGQoRc2FmZWxva19zZXJ2ZXJfaXAYAiAB",
            "KAkSGwoTc2FmZWxva19zZXJ2ZXJfcG9ydBgDIAEoDRIfChdzYWZlbG9rX3Nl",
            "cnZlcl9wYXNzd29yZBgEIAEoCRIfChdzYWZlbG9rX2VuY29kZXJfc3RhdGlv",
            "bhgFIAEoDUIrWg10ZW5hbmN5Y29uZmlnqgIZSE9MTVMuVHlwZXMuVGVuYW5j",
            "eUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.TenancyConfig.KCRConfig), global::HOLMS.Types.TenancyConfig.KCRConfig.Parser, new[]{ "PostCheckoutGraceHours", "SafelokServerIp", "SafelokServerPort", "SafelokServerPassword", "SafelokEncoderStation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class KCRConfig : pb::IMessage<KCRConfig> {
    private static readonly pb::MessageParser<KCRConfig> _parser = new pb::MessageParser<KCRConfig>(() => new KCRConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KCRConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.TenancyConfig.KcrConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KCRConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KCRConfig(KCRConfig other) : this() {
      postCheckoutGraceHours_ = other.postCheckoutGraceHours_;
      safelokServerIp_ = other.safelokServerIp_;
      safelokServerPort_ = other.safelokServerPort_;
      safelokServerPassword_ = other.safelokServerPassword_;
      safelokEncoderStation_ = other.safelokEncoderStation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KCRConfig Clone() {
      return new KCRConfig(this);
    }

    /// <summary>Field number for the "post_checkout_grace_hours" field.</summary>
    public const int PostCheckoutGraceHoursFieldNumber = 1;
    private uint postCheckoutGraceHours_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PostCheckoutGraceHours {
      get { return postCheckoutGraceHours_; }
      set {
        postCheckoutGraceHours_ = value;
      }
    }

    /// <summary>Field number for the "safelok_server_ip" field.</summary>
    public const int SafelokServerIpFieldNumber = 2;
    private string safelokServerIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SafelokServerIp {
      get { return safelokServerIp_; }
      set {
        safelokServerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safelok_server_port" field.</summary>
    public const int SafelokServerPortFieldNumber = 3;
    private uint safelokServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SafelokServerPort {
      get { return safelokServerPort_; }
      set {
        safelokServerPort_ = value;
      }
    }

    /// <summary>Field number for the "safelok_server_password" field.</summary>
    public const int SafelokServerPasswordFieldNumber = 4;
    private string safelokServerPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SafelokServerPassword {
      get { return safelokServerPassword_; }
      set {
        safelokServerPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safelok_encoder_station" field.</summary>
    public const int SafelokEncoderStationFieldNumber = 5;
    private uint safelokEncoderStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SafelokEncoderStation {
      get { return safelokEncoderStation_; }
      set {
        safelokEncoderStation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KCRConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KCRConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PostCheckoutGraceHours != other.PostCheckoutGraceHours) return false;
      if (SafelokServerIp != other.SafelokServerIp) return false;
      if (SafelokServerPort != other.SafelokServerPort) return false;
      if (SafelokServerPassword != other.SafelokServerPassword) return false;
      if (SafelokEncoderStation != other.SafelokEncoderStation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PostCheckoutGraceHours != 0) hash ^= PostCheckoutGraceHours.GetHashCode();
      if (SafelokServerIp.Length != 0) hash ^= SafelokServerIp.GetHashCode();
      if (SafelokServerPort != 0) hash ^= SafelokServerPort.GetHashCode();
      if (SafelokServerPassword.Length != 0) hash ^= SafelokServerPassword.GetHashCode();
      if (SafelokEncoderStation != 0) hash ^= SafelokEncoderStation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PostCheckoutGraceHours != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PostCheckoutGraceHours);
      }
      if (SafelokServerIp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SafelokServerIp);
      }
      if (SafelokServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SafelokServerPort);
      }
      if (SafelokServerPassword.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SafelokServerPassword);
      }
      if (SafelokEncoderStation != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SafelokEncoderStation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PostCheckoutGraceHours != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PostCheckoutGraceHours);
      }
      if (SafelokServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SafelokServerIp);
      }
      if (SafelokServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SafelokServerPort);
      }
      if (SafelokServerPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SafelokServerPassword);
      }
      if (SafelokEncoderStation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SafelokEncoderStation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KCRConfig other) {
      if (other == null) {
        return;
      }
      if (other.PostCheckoutGraceHours != 0) {
        PostCheckoutGraceHours = other.PostCheckoutGraceHours;
      }
      if (other.SafelokServerIp.Length != 0) {
        SafelokServerIp = other.SafelokServerIp;
      }
      if (other.SafelokServerPort != 0) {
        SafelokServerPort = other.SafelokServerPort;
      }
      if (other.SafelokServerPassword.Length != 0) {
        SafelokServerPassword = other.SafelokServerPassword;
      }
      if (other.SafelokEncoderStation != 0) {
        SafelokEncoderStation = other.SafelokEncoderStation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PostCheckoutGraceHours = input.ReadUInt32();
            break;
          }
          case 18: {
            SafelokServerIp = input.ReadString();
            break;
          }
          case 24: {
            SafelokServerPort = input.ReadUInt32();
            break;
          }
          case 34: {
            SafelokServerPassword = input.ReadString();
            break;
          }
          case 40: {
            SafelokEncoderStation = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

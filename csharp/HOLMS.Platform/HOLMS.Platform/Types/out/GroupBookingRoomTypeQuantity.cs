// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/groups/group_booking_room_type_quantity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.Groups {

  /// <summary>Holder for reflection information generated from booking/groups/group_booking_room_type_quantity.proto</summary>
  public static partial class GroupBookingRoomTypeQuantityReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/groups/group_booking_room_type_quantity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GroupBookingRoomTypeQuantityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjVib29raW5nL2dyb3Vwcy9ncm91cF9ib29raW5nX3Jvb21fdHlwZV9xdWFu",
            "dGl0eS5wcm90bxIaaG9sbXMudHlwZXMuYm9va2luZy5ncm91cHMaK3N1cHBs",
            "eS9yb29tX3R5cGVzL3Jvb21fdHlwZV9pbmRpY2F0b3IucHJvdG8ilQEKHEdy",
            "b3VwQm9va2luZ1Jvb21UeXBlUXVhbnRpdHkSQwoJcm9vbV90eXBlGAEgASgL",
            "MjAuaG9sbXMudHlwZXMuc3VwcGx5LnJvb21fdHlwZXMuUm9vbVR5cGVJbmRp",
            "Y2F0b3ISFwoPaG9sZHNfcmVxdWVzdGVkGAIgASgNEhcKD2hvbGRzX2NvbW1p",
            "dHRlZBgDIAEoDUItWg5ib29raW5nL2dyb3Vwc6oCGkhPTE1TLlR5cGVzLkJv",
            "b2tpbmcuR3JvdXBzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.Groups.GroupBookingRoomTypeQuantity), global::HOLMS.Types.Booking.Groups.GroupBookingRoomTypeQuantity.Parser, new[]{ "RoomType", "HoldsRequested", "HoldsCommitted" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GroupBookingRoomTypeQuantity : pb::IMessage<GroupBookingRoomTypeQuantity> {
    private static readonly pb::MessageParser<GroupBookingRoomTypeQuantity> _parser = new pb::MessageParser<GroupBookingRoomTypeQuantity>(() => new GroupBookingRoomTypeQuantity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupBookingRoomTypeQuantity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.Groups.GroupBookingRoomTypeQuantityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupBookingRoomTypeQuantity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupBookingRoomTypeQuantity(GroupBookingRoomTypeQuantity other) : this() {
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      holdsRequested_ = other.holdsRequested_;
      holdsCommitted_ = other.holdsCommitted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupBookingRoomTypeQuantity Clone() {
      return new GroupBookingRoomTypeQuantity(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "holds_requested" field.</summary>
    public const int HoldsRequestedFieldNumber = 2;
    private uint holdsRequested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HoldsRequested {
      get { return holdsRequested_; }
      set {
        holdsRequested_ = value;
      }
    }

    /// <summary>Field number for the "holds_committed" field.</summary>
    public const int HoldsCommittedFieldNumber = 3;
    private uint holdsCommitted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HoldsCommitted {
      get { return holdsCommitted_; }
      set {
        holdsCommitted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupBookingRoomTypeQuantity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupBookingRoomTypeQuantity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (HoldsRequested != other.HoldsRequested) return false;
      if (HoldsCommitted != other.HoldsCommitted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (HoldsRequested != 0) hash ^= HoldsRequested.GetHashCode();
      if (HoldsCommitted != 0) hash ^= HoldsCommitted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomType);
      }
      if (HoldsRequested != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HoldsRequested);
      }
      if (HoldsCommitted != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HoldsCommitted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (HoldsRequested != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HoldsRequested);
      }
      if (HoldsCommitted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HoldsCommitted);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupBookingRoomTypeQuantity other) {
      if (other == null) {
        return;
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.HoldsRequested != 0) {
        HoldsRequested = other.HoldsRequested;
      }
      if (other.HoldsCommitted != 0) {
        HoldsCommitted = other.HoldsCommitted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomTypeIndicator();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 16: {
            HoldsRequested = input.ReadUInt32();
            break;
          }
          case 24: {
            HoldsCommitted = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

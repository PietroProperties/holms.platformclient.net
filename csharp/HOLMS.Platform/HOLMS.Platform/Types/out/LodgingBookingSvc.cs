// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking/rpc/lodging_booking_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Booking.RPC {

  /// <summary>Holder for reflection information generated from booking/rpc/lodging_booking_svc.proto</summary>
  public static partial class LodgingBookingSvcReflection {

    #region Descriptor
    /// <summary>File descriptor for booking/rpc/lodging_booking_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LodgingBookingSvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVib29raW5nL3JwYy9sb2RnaW5nX2Jvb2tpbmdfc3ZjLnByb3RvEhdob2xt",
            "cy50eXBlcy5ib29raW5nLnJwYxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnBy",
            "b3RvGjtib29raW5nL3Jlc2VydmF0aW9ucy9ib29rX2dlbmVzaXNfcmVzZXJ2",
            "YXRpb25fcmVxdWVzdC5wcm90bxoxYm9va2luZy9yZXNlcnZhdGlvbnMvZ2Vu",
            "ZXNpc19ib29raW5nX3Jlc3VsdC5wcm90bxouYm9va2luZy9pbmRpY2F0b3Jz",
            "L3Jlc2VydmF0aW9uX2luZGljYXRvci5wcm90bxo0Ym9va2luZy9yZXNlcnZh",
            "dGlvbnMvY29tcGxldGVfb3Blbl9yZXNlcnZhdGlvbi5wcm90bxo7Ym9va2lu",
            "Zy9yZXNlcnZhdGlvbnMvYWRkX2d1ZXN0X3RvX3Jlc2VydmF0aW9uX3JlcXVl",
            "c3QucHJvdG8aQGJvb2tpbmcvcmVzZXJ2YXRpb25zL3JlbW92ZV9ndWVzdF9m",
            "cm9tX3Jlc2VydmF0aW9uX3JlcXVlc3QucHJvdG8aPGJvb2tpbmcvcmVzZXJ2",
            "YXRpb25zL3Jlc2VydmF0aW9uX2ZycF9hbWVuZG1lbnRfcmVxdWVzdC5wcm90",
            "bxoxYm9va2luZy9yZXNlcnZhdGlvbnMvZnJwX2FtZW5kbWVudF9yZXNwb25z",
            "ZS5wcm90bxpAYm9va2luZy9yZXNlcnZhdGlvbnMvcmVzZXJ2YXRpb25fY2hh",
            "bm5lbF9hbWVuZG1lbnRfcmVxdWVzdC5wcm90bxo8dGVuYW5jeV9jb25maWcv",
            "aW5kaWNhdG9ycy9yZXNlcnZhdGlvbl9zb3VyY2VfaW5kaWNhdG9yLnByb3Rv",
            "InIKGkdldFJlc2VydmF0aW9uTmFtZXNSZXF1ZXN0ElQKFnJlc2VydmF0aW9u",
            "X2luZGljYXRvcnMYASADKAsyNC5ob2xtcy50eXBlcy5ib29raW5nLmluZGlj",
            "YXRvcnMuUmVzZXJ2YXRpb25JbmRpY2F0b3IiNQoYUmVzZXJ2YXRpb25OYW1l",
            "c1Jlc3BvbnNlEhkKEXJlc2VydmF0aW9uX25hbWVzGAEgAygJIpIBChJTd2Fw",
            "Q2hhcmdlc1JlcXVlc3QSUwoVcmVzZXJ2YXRpb25faW5kaWNhdG9yGAEgASgL",
            "MjQuaG9sbXMudHlwZXMuYm9va2luZy5pbmRpY2F0b3JzLlJlc2VydmF0aW9u",
            "SW5kaWNhdG9yEicKH2lzX21hc3Rlcl9yZXNlcnZhdGlvbl9pbmRpY2F0b3IY",
            "AiABKAgiOAoTU3dhcENoYXJnZXNSZXNwb25zZRIhChljaGFyZ2VzX3ByZXNl",
            "bnRfYW5kX21vdmVkGAEgASgIIsYBChpTb3VyY2VPZlJlc2VydmF0aW9uUmVx",
            "dWVzdBJJCgtyZXNlcnZhdGlvbhgBIAEoCzI0LmhvbG1zLnR5cGVzLmJvb2tp",
            "bmcuaW5kaWNhdG9ycy5SZXNlcnZhdGlvbkluZGljYXRvchJdChJyZXNlcnZh",
            "dGlvbl9zb3VyY2UYAiABKAsyQS5ob2xtcy50eXBlcy50ZW5hbmN5X2NvbmZp",
            "Zy5pbmRpY2F0b3JzLlJlc2VydmF0aW9uU291cmNlSW5kaWNhdG9yMqwKChFM",
            "b2RnaW5nQm9va2luZ1N2YxKRAQoWQm9va0dlbmVzaXNSZXNlcnZhdGlvbhI/",
            "LmhvbG1zLnR5cGVzLmJvb2tpbmcucmVzZXJ2YXRpb25zLkJvb2tHZW5lc2lz",
            "UmVzZXJ2YXRpb25SZXF1ZXN0GjYuaG9sbXMudHlwZXMuYm9va2luZy5yZXNl",
            "cnZhdGlvbnMuR2VuZXNpc0Jvb2tpbmdSZXN1bHQShQEKEkdldE9wZW5SZXNl",
            "cnZhdGlvbhI0LmhvbG1zLnR5cGVzLmJvb2tpbmcuaW5kaWNhdG9ycy5SZXNl",
            "cnZhdGlvbkluZGljYXRvcho5LmhvbG1zLnR5cGVzLmJvb2tpbmcucmVzZXJ2",
            "YXRpb25zLkNvbXBsZXRlT3BlblJlc2VydmF0aW9uEnYKHFJlcXVlc3RBZGRH",
            "dWVzdFRvUmVzZXJ2YXRpb24SPi5ob2xtcy50eXBlcy5ib29raW5nLnJlc2Vy",
            "dmF0aW9ucy5BZGRHdWVzdFRvUmVzZXJ2YXRpb25SZXF1ZXN0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5EoABCiFSZXF1ZXN0UmVtb3ZlR3Vlc3RGcm9tUmVz",
            "ZXJ2YXRpb24SQy5ob2xtcy50eXBlcy5ib29raW5nLnJlc2VydmF0aW9ucy5S",
            "ZW1vdmVHdWVzdEZyb21SZXNlcnZhdGlvblJlcXVlc3QaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkSmgEKHkFtZW5kT3BlblJlc2VydmF0aW9uUGFyYW1ldGVy",
            "cxJALmhvbG1zLnR5cGVzLmJvb2tpbmcucmVzZXJ2YXRpb25zLlJlc2VydmF0",
            "aW9uRlJQQW1lbmRtZW50UmVxdWVzdBo2LmhvbG1zLnR5cGVzLmJvb2tpbmcu",
            "cmVzZXJ2YXRpb25zLkZSUEFtZW5kbWVudFJlc3BvbnNlEoABCiZSZXF1ZXN0",
            "Q2hhbmdlUHJpbWFyeUd1ZXN0SW5SZXNlcnZhdGlvbhI+LmhvbG1zLnR5cGVz",
            "LmJvb2tpbmcucmVzZXJ2YXRpb25zLkFkZEd1ZXN0VG9SZXNlcnZhdGlvblJl",
            "cXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkShgEKJlJlcXVlc3RVcGRh",
            "dGVDaGFubmVsRGV0YWlsc1Jlc2VydmF0aW9uEkQuaG9sbXMudHlwZXMuYm9v",
            "a2luZy5yZXNlcnZhdGlvbnMuUmVzZXJ2YXRpb25DaGFubmVsQW1lbmRtZW50",
            "UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRJ9ChNHZXRSZXNlcnZh",
            "dGlvbk5hbWVzEjMuaG9sbXMudHlwZXMuYm9va2luZy5ycGMuR2V0UmVzZXJ2",
            "YXRpb25OYW1lc1JlcXVlc3QaMS5ob2xtcy50eXBlcy5ib29raW5nLnJwYy5S",
            "ZXNlcnZhdGlvbk5hbWVzUmVzcG9uc2UScQoUU3dhcEV4dHJhU3RheUNoYXJn",
            "ZXMSKy5ob2xtcy50eXBlcy5ib29raW5nLnJwYy5Td2FwQ2hhcmdlc1JlcXVl",
            "c3QaLC5ob2xtcy50eXBlcy5ib29raW5nLnJwYy5Td2FwQ2hhcmdlc1Jlc3Bv",
            "bnNlEmUKFlNldFNvdXJjZU9mUmVzZXJ2YXRpb24SMy5ob2xtcy50eXBlcy5i",
            "b29raW5nLnJwYy5Tb3VyY2VPZlJlc2VydmF0aW9uUmVxdWVzdBoWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eUInWgtib29raW5nL3JwY6oCF0hPTE1TLlR5cGVz",
            "LkJvb2tpbmcuUlBDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.BookGenesisReservationRequestReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.GenesisBookingResultReflection.Descriptor, global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.CompleteOpenReservationReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.AddGuestToReservationRequestReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.RemoveGuestFromReservationRequestReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.ReservationFrpAmendmentRequestReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.FrpAmendmentResponseReflection.Descriptor, global::HOLMS.Types.Booking.Reservations.ReservationChannelAmendmentRequestReflection.Descriptor, global::HOLMS.Types.TenancyConfig.Indicators.ReservationSourceIndicatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.RPC.GetReservationNamesRequest), global::HOLMS.Types.Booking.RPC.GetReservationNamesRequest.Parser, new[]{ "ReservationIndicators" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.RPC.ReservationNamesResponse), global::HOLMS.Types.Booking.RPC.ReservationNamesResponse.Parser, new[]{ "ReservationNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.RPC.SwapChargesRequest), global::HOLMS.Types.Booking.RPC.SwapChargesRequest.Parser, new[]{ "ReservationIndicator", "IsMasterReservationIndicator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.RPC.SwapChargesResponse), global::HOLMS.Types.Booking.RPC.SwapChargesResponse.Parser, new[]{ "ChargesPresentAndMoved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Booking.RPC.SourceOfReservationRequest), global::HOLMS.Types.Booking.RPC.SourceOfReservationRequest.Parser, new[]{ "Reservation", "ReservationSource" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetReservationNamesRequest : pb::IMessage<GetReservationNamesRequest> {
    private static readonly pb::MessageParser<GetReservationNamesRequest> _parser = new pb::MessageParser<GetReservationNamesRequest>(() => new GetReservationNamesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReservationNamesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.RPC.LodgingBookingSvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservationNamesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservationNamesRequest(GetReservationNamesRequest other) : this() {
      reservationIndicators_ = other.reservationIndicators_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservationNamesRequest Clone() {
      return new GetReservationNamesRequest(this);
    }

    /// <summary>Field number for the "reservation_indicators" field.</summary>
    public const int ReservationIndicatorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Booking.Indicators.ReservationIndicator> _repeated_reservationIndicators_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Booking.Indicators.ReservationIndicator.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Booking.Indicators.ReservationIndicator> reservationIndicators_ = new pbc::RepeatedField<global::HOLMS.Types.Booking.Indicators.ReservationIndicator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Booking.Indicators.ReservationIndicator> ReservationIndicators {
      get { return reservationIndicators_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReservationNamesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReservationNamesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reservationIndicators_.Equals(other.reservationIndicators_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reservationIndicators_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reservationIndicators_.WriteTo(output, _repeated_reservationIndicators_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reservationIndicators_.CalculateSize(_repeated_reservationIndicators_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReservationNamesRequest other) {
      if (other == null) {
        return;
      }
      reservationIndicators_.Add(other.reservationIndicators_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reservationIndicators_.AddEntriesFrom(input, _repeated_reservationIndicators_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReservationNamesResponse : pb::IMessage<ReservationNamesResponse> {
    private static readonly pb::MessageParser<ReservationNamesResponse> _parser = new pb::MessageParser<ReservationNamesResponse>(() => new ReservationNamesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservationNamesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.RPC.LodgingBookingSvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationNamesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationNamesResponse(ReservationNamesResponse other) : this() {
      reservationNames_ = other.reservationNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservationNamesResponse Clone() {
      return new ReservationNamesResponse(this);
    }

    /// <summary>Field number for the "reservation_names" field.</summary>
    public const int ReservationNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_reservationNames_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> reservationNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReservationNames {
      get { return reservationNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservationNamesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservationNamesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reservationNames_.Equals(other.reservationNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reservationNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reservationNames_.WriteTo(output, _repeated_reservationNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reservationNames_.CalculateSize(_repeated_reservationNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservationNamesResponse other) {
      if (other == null) {
        return;
      }
      reservationNames_.Add(other.reservationNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reservationNames_.AddEntriesFrom(input, _repeated_reservationNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapChargesRequest : pb::IMessage<SwapChargesRequest> {
    private static readonly pb::MessageParser<SwapChargesRequest> _parser = new pb::MessageParser<SwapChargesRequest>(() => new SwapChargesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapChargesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.RPC.LodgingBookingSvcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapChargesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapChargesRequest(SwapChargesRequest other) : this() {
      ReservationIndicator = other.reservationIndicator_ != null ? other.ReservationIndicator.Clone() : null;
      isMasterReservationIndicator_ = other.isMasterReservationIndicator_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapChargesRequest Clone() {
      return new SwapChargesRequest(this);
    }

    /// <summary>Field number for the "reservation_indicator" field.</summary>
    public const int ReservationIndicatorFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservationIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator ReservationIndicator {
      get { return reservationIndicator_; }
      set {
        reservationIndicator_ = value;
      }
    }

    /// <summary>Field number for the "is_master_reservation_indicator" field.</summary>
    public const int IsMasterReservationIndicatorFieldNumber = 2;
    private bool isMasterReservationIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMasterReservationIndicator {
      get { return isMasterReservationIndicator_; }
      set {
        isMasterReservationIndicator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapChargesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapChargesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReservationIndicator, other.ReservationIndicator)) return false;
      if (IsMasterReservationIndicator != other.IsMasterReservationIndicator) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservationIndicator_ != null) hash ^= ReservationIndicator.GetHashCode();
      if (IsMasterReservationIndicator != false) hash ^= IsMasterReservationIndicator.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservationIndicator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReservationIndicator);
      }
      if (IsMasterReservationIndicator != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsMasterReservationIndicator);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservationIndicator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservationIndicator);
      }
      if (IsMasterReservationIndicator != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapChargesRequest other) {
      if (other == null) {
        return;
      }
      if (other.reservationIndicator_ != null) {
        if (reservationIndicator_ == null) {
          reservationIndicator_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        ReservationIndicator.MergeFrom(other.ReservationIndicator);
      }
      if (other.IsMasterReservationIndicator != false) {
        IsMasterReservationIndicator = other.IsMasterReservationIndicator;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reservationIndicator_ == null) {
              reservationIndicator_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservationIndicator_);
            break;
          }
          case 16: {
            IsMasterReservationIndicator = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapChargesResponse : pb::IMessage<SwapChargesResponse> {
    private static readonly pb::MessageParser<SwapChargesResponse> _parser = new pb::MessageParser<SwapChargesResponse>(() => new SwapChargesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapChargesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.RPC.LodgingBookingSvcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapChargesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapChargesResponse(SwapChargesResponse other) : this() {
      chargesPresentAndMoved_ = other.chargesPresentAndMoved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapChargesResponse Clone() {
      return new SwapChargesResponse(this);
    }

    /// <summary>Field number for the "charges_present_and_moved" field.</summary>
    public const int ChargesPresentAndMovedFieldNumber = 1;
    private bool chargesPresentAndMoved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChargesPresentAndMoved {
      get { return chargesPresentAndMoved_; }
      set {
        chargesPresentAndMoved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapChargesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapChargesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChargesPresentAndMoved != other.ChargesPresentAndMoved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChargesPresentAndMoved != false) hash ^= ChargesPresentAndMoved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChargesPresentAndMoved != false) {
        output.WriteRawTag(8);
        output.WriteBool(ChargesPresentAndMoved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChargesPresentAndMoved != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapChargesResponse other) {
      if (other == null) {
        return;
      }
      if (other.ChargesPresentAndMoved != false) {
        ChargesPresentAndMoved = other.ChargesPresentAndMoved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChargesPresentAndMoved = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SourceOfReservationRequest : pb::IMessage<SourceOfReservationRequest> {
    private static readonly pb::MessageParser<SourceOfReservationRequest> _parser = new pb::MessageParser<SourceOfReservationRequest>(() => new SourceOfReservationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceOfReservationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Booking.RPC.LodgingBookingSvcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOfReservationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOfReservationRequest(SourceOfReservationRequest other) : this() {
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
      ReservationSource = other.reservationSource_ != null ? other.ReservationSource.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOfReservationRequest Clone() {
      return new SourceOfReservationRequest(this);
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    /// <summary>Field number for the "reservation_source" field.</summary>
    public const int ReservationSourceFieldNumber = 2;
    private global::HOLMS.Types.TenancyConfig.Indicators.ReservationSourceIndicator reservationSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.TenancyConfig.Indicators.ReservationSourceIndicator ReservationSource {
      get { return reservationSource_; }
      set {
        reservationSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceOfReservationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceOfReservationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reservation, other.Reservation)) return false;
      if (!object.Equals(ReservationSource, other.ReservationSource)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      if (reservationSource_ != null) hash ^= ReservationSource.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reservation);
      }
      if (reservationSource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReservationSource);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      if (reservationSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservationSource);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceOfReservationRequest other) {
      if (other == null) {
        return;
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
      if (other.reservationSource_ != null) {
        if (reservationSource_ == null) {
          reservationSource_ = new global::HOLMS.Types.TenancyConfig.Indicators.ReservationSourceIndicator();
        }
        ReservationSource.MergeFrom(other.ReservationSource);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
          case 18: {
            if (reservationSource_ == null) {
              reservationSource_ = new global::HOLMS.Types.TenancyConfig.Indicators.ReservationSourceIndicator();
            }
            input.ReadMessage(reservationSource_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

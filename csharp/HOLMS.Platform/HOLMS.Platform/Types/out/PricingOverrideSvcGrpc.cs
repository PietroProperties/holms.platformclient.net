// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/pricing_override_svc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace HOLMS.Types.Supply.RPC {
  public static partial class PricingOverrideSvc
  {
    static readonly string __ServiceName = "holms.types.supply.rpc.PricingOverrideSvc";

    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.PricingDetailsRequest> __Marshaller_PricingDetailsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingDetailsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.PricingDetailsResponse> __Marshaller_PricingDetailsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingDetailsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.PricingUpdateRequest> __Marshaller_PricingUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.PricingUpdateResponse> __Marshaller_PricingUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.PricingUpdateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.PricingDetailsRequest, global::HOLMS.Types.Supply.RPC.PricingDetailsResponse> __Method_AllForDates = new grpc::Method<global::HOLMS.Types.Supply.RPC.PricingDetailsRequest, global::HOLMS.Types.Supply.RPC.PricingDetailsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllForDates",
        __Marshaller_PricingDetailsRequest,
        __Marshaller_PricingDetailsResponse);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.PricingUpdateRequest, global::HOLMS.Types.Supply.RPC.PricingUpdateResponse> __Method_InsertOrUpdatePrices = new grpc::Method<global::HOLMS.Types.Supply.RPC.PricingUpdateRequest, global::HOLMS.Types.Supply.RPC.PricingUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertOrUpdatePrices",
        __Marshaller_PricingUpdateRequest,
        __Marshaller_PricingUpdateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Supply.RPC.PricingOverrideSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PricingOverrideSvc</summary>
    public abstract partial class PricingOverrideSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.PricingDetailsResponse> AllForDates(global::HOLMS.Types.Supply.RPC.PricingDetailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.PricingUpdateResponse> InsertOrUpdatePrices(global::HOLMS.Types.Supply.RPC.PricingUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PricingOverrideSvc</summary>
    public partial class PricingOverrideSvcClient : grpc::ClientBase<PricingOverrideSvcClient>
    {
      /// <summary>Creates a new client for PricingOverrideSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PricingOverrideSvcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PricingOverrideSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PricingOverrideSvcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PricingOverrideSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PricingOverrideSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Supply.RPC.PricingDetailsResponse AllForDates(global::HOLMS.Types.Supply.RPC.PricingDetailsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllForDates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.PricingDetailsResponse AllForDates(global::HOLMS.Types.Supply.RPC.PricingDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllForDates, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingDetailsResponse> AllForDatesAsync(global::HOLMS.Types.Supply.RPC.PricingDetailsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllForDatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingDetailsResponse> AllForDatesAsync(global::HOLMS.Types.Supply.RPC.PricingDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllForDates, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.PricingUpdateResponse InsertOrUpdatePrices(global::HOLMS.Types.Supply.RPC.PricingUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertOrUpdatePrices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.PricingUpdateResponse InsertOrUpdatePrices(global::HOLMS.Types.Supply.RPC.PricingUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertOrUpdatePrices, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingUpdateResponse> InsertOrUpdatePricesAsync(global::HOLMS.Types.Supply.RPC.PricingUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertOrUpdatePricesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.PricingUpdateResponse> InsertOrUpdatePricesAsync(global::HOLMS.Types.Supply.RPC.PricingUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertOrUpdatePrices, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PricingOverrideSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PricingOverrideSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PricingOverrideSvcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AllForDates, serviceImpl.AllForDates)
          .AddMethod(__Method_InsertOrUpdatePrices, serviceImpl.InsertOrUpdatePrices).Build();
    }

  }
}
#endregion

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/qualification_svc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HOLMS.Types.Supply.RPC {
  public static class QualificationSvc
  {
    static readonly string __ServiceName = "holms.types.supply.rpc.QualificationSvc";

    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> __Marshaller_QualificationSvcAllResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse.Parser.ParseFrom);
    static readonly Marshaller<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange> __Marshaller_PbInclusiveOpsdateRange = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange.Parser.ParseFrom);

    static readonly Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> __Method_All = new Method<global::Google.Protobuf.WellKnownTypes.Empty, global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "All",
        __Marshaller_Empty,
        __Marshaller_QualificationSvcAllResponse);

    static readonly Method<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange, global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> __Method_AllDuring = new Method<global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange, global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse>(
        MethodType.Unary,
        __ServiceName,
        "AllDuring",
        __Marshaller_PbInclusiveOpsdateRange,
        __Marshaller_QualificationSvcAllResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Supply.RPC.QualificationSvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QualificationSvc</summary>
    public abstract class QualificationSvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> All(global::Google.Protobuf.WellKnownTypes.Empty request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> AllDuring(global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QualificationSvc</summary>
    public class QualificationSvcClient : ClientBase<QualificationSvcClient>
    {
      /// <summary>Creates a new client for QualificationSvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QualificationSvcClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QualificationSvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QualificationSvcClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QualificationSvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QualificationSvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return All(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse All(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_All, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> AllAsync(global::Google.Protobuf.WellKnownTypes.Empty request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_All, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse AllDuring(global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllDuring(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse AllDuring(global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllDuring, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> AllDuringAsync(global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllDuringAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.QualificationSvcAllResponse> AllDuringAsync(global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllDuring, null, options, request);
      }
      protected override QualificationSvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QualificationSvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(QualificationSvcBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_All, serviceImpl.All)
          .AddMethod(__Method_AllDuring, serviceImpl.AllDuring).Build();
    }

  }
}
#endregion

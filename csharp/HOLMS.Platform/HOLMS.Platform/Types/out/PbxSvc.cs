// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/rpc/pbx_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Operations.RPC {

  /// <summary>Holder for reflection information generated from operations/rpc/pbx_svc.proto</summary>
  public static partial class PbxSvcReflection {

    #region Descriptor
    /// <summary>File descriptor for operations/rpc/pbx_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbxSvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxvcGVyYXRpb25zL3JwYy9wYnhfc3ZjLnByb3RvEhpob2xtcy50eXBlcy5v",
            "cGVyYXRpb25zLnJwYxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGiVv",
            "cGVyYXRpb25zL3BieF9ldmVudHMvcGJ4X2V2ZW50LnByb3RvIlQKEVBCWFN2",
            "Y0FsbFJlc3BvbnNlEj8KCnBieF9ldmVudHMYASADKAsyKy5ob2xtcy50eXBl",
            "cy5vcGVyYXRpb25zLnBieF9ldmVudHMuUEJYRXZlbnQiPwolUEJYU3ZjR2V0",
            "QWN0aXZlQ29ubmVjdG9yQ291bnRSZXNwb25zZRIWCg5waW5nX3Jlc3BvbnNl",
            "cxgBIAEoBTLVAQoGUEJYU3ZjElUKDEdldEFsbEV2ZW50cxIWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eRotLmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMucnBjLlBC",
            "WFN2Y0FsbFJlc3BvbnNlEnQKF0dldEFjdGl2ZUNvbm5lY3RvckNvdW50EhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5GkEuaG9sbXMudHlwZXMub3BlcmF0aW9u",
            "cy5ycGMuUEJYU3ZjR2V0QWN0aXZlQ29ubmVjdG9yQ291bnRSZXNwb25zZUIt",
            "Wg5vcGVyYXRpb25zL3JwY6oCGkhPTE1TLlR5cGVzLk9wZXJhdGlvbnMuUlBD",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::HOLMS.Types.Operations.PBXEvents.PbxEventReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse), global::HOLMS.Types.Operations.RPC.PBXSvcAllResponse.Parser, new[]{ "PbxEvents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse), global::HOLMS.Types.Operations.RPC.PBXSvcGetActiveConnectorCountResponse.Parser, new[]{ "PingResponses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PBXSvcAllResponse : pb::IMessage<PBXSvcAllResponse> {
    private static readonly pb::MessageParser<PBXSvcAllResponse> _parser = new pb::MessageParser<PBXSvcAllResponse>(() => new PBXSvcAllResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBXSvcAllResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.PbxSvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBXSvcAllResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBXSvcAllResponse(PBXSvcAllResponse other) : this() {
      pbxEvents_ = other.pbxEvents_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBXSvcAllResponse Clone() {
      return new PBXSvcAllResponse(this);
    }

    /// <summary>Field number for the "pbx_events" field.</summary>
    public const int PbxEventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.PBXEvents.PBXEvent> _repeated_pbxEvents_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.PBXEvents.PBXEvent.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.PBXEvents.PBXEvent> pbxEvents_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.PBXEvents.PBXEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.PBXEvents.PBXEvent> PbxEvents {
      get { return pbxEvents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBXSvcAllResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBXSvcAllResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pbxEvents_.Equals(other.pbxEvents_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pbxEvents_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pbxEvents_.WriteTo(output, _repeated_pbxEvents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pbxEvents_.CalculateSize(_repeated_pbxEvents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBXSvcAllResponse other) {
      if (other == null) {
        return;
      }
      pbxEvents_.Add(other.pbxEvents_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pbxEvents_.AddEntriesFrom(input, _repeated_pbxEvents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PBXSvcGetActiveConnectorCountResponse : pb::IMessage<PBXSvcGetActiveConnectorCountResponse> {
    private static readonly pb::MessageParser<PBXSvcGetActiveConnectorCountResponse> _parser = new pb::MessageParser<PBXSvcGetActiveConnectorCountResponse>(() => new PBXSvcGetActiveConnectorCountResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBXSvcGetActiveConnectorCountResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.PbxSvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBXSvcGetActiveConnectorCountResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBXSvcGetActiveConnectorCountResponse(PBXSvcGetActiveConnectorCountResponse other) : this() {
      pingResponses_ = other.pingResponses_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBXSvcGetActiveConnectorCountResponse Clone() {
      return new PBXSvcGetActiveConnectorCountResponse(this);
    }

    /// <summary>Field number for the "ping_responses" field.</summary>
    public const int PingResponsesFieldNumber = 1;
    private int pingResponses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PingResponses {
      get { return pingResponses_; }
      set {
        pingResponses_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBXSvcGetActiveConnectorCountResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBXSvcGetActiveConnectorCountResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingResponses != other.PingResponses) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingResponses != 0) hash ^= PingResponses.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingResponses != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PingResponses);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingResponses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PingResponses);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBXSvcGetActiveConnectorCountResponse other) {
      if (other == null) {
        return;
      }
      if (other.PingResponses != 0) {
        PingResponses = other.PingResponses;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PingResponses = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

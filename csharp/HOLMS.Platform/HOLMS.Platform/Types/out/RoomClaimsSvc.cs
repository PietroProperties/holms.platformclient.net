// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operations/rpc/room_claims_svc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Operations.RPC {

  /// <summary>Holder for reflection information generated from operations/rpc/room_claims_svc.proto</summary>
  public static partial class RoomClaimsSvcReflection {

    #region Descriptor
    /// <summary>File descriptor for operations/rpc/room_claims_svc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomClaimsSvcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRvcGVyYXRpb25zL3JwYy9yb29tX2NsYWltc19zdmMucHJvdG8SGmhvbG1z",
            "LnR5cGVzLm9wZXJhdGlvbnMucnBjGi5ib29raW5nL2luZGljYXRvcnMvcmVz",
            "ZXJ2YXRpb25faW5kaWNhdG9yLnByb3RvGipwcmltaXRpdmUvcGJfaW5jbHVz",
            "aXZlX29wc2RhdGVfcmFuZ2UucHJvdG8aHXByaW1pdGl2ZS9wYl9sb2NhbF9k",
            "YXRlLnByb3RvGjJ0ZW5hbmN5X2NvbmZpZy9pbmRpY2F0b3JzL3Byb3BlcnR5",
            "X2luZGljYXRvci5wcm90bxo/b3BlcmF0aW9ucy9yb29tX2NsYWltcy9yZXNl",
            "cnZhdGlvbl9yb29tX2Fzc2lnbm1lbnRfcmVzdWx0LnByb3RvGjVvcGVyYXRp",
            "b25zL3Jvb21fY2xhaW1zL3Jvb21fYXNzaWdubWVudF9ieV9uaWdodC5wcm90",
            "bxonb3BlcmF0aW9ucy9yb29tX2NsYWltcy9yb29tX2NsYWltLnByb3RvGjJv",
            "cGVyYXRpb25zL3Jvb21fY2xhaW1zL2NvbnRpbnVvdXNfcm9vbV9jbGFpbS5w",
            "cm90bxobb3BlcmF0aW9ucy9yb29tcy9yb29tLnByb3RvGitvcGVyYXRpb25z",
            "L3Jvb21zL3Jvb21fd2l0aF9jbGFpbV9pbmZvLnByb3RvIqwBChpSb29tQ2xh",
            "aW1zU3ZjU2VhcmNoUmVxdWVzdBJKCghwcm9wZXJ0eRgBIAEoCzI4LmhvbG1z",
            "LnR5cGVzLnRlbmFuY3lfY29uZmlnLmluZGljYXRvcnMuUHJvcGVydHlJbmRp",
            "Y2F0b3ISQgoKZGF0ZV9yYW5nZRgCIAEoCzIuLmhvbG1zLnR5cGVzLnByaW1p",
            "dGl2ZS5QYkluY2x1c2l2ZU9wc2RhdGVSYW5nZSJcChtSb29tQ2xhaW1zU3Zj",
            "U2VhcmNoUmVzcG9uc2USPQoGY2xhaW1zGAEgAygLMi0uaG9sbXMudHlwZXMu",
            "b3BlcmF0aW9ucy5yb29tX2NsYWltcy5Sb29tQ2xhaW0icAolQ29udGludW91",
            "c1Jvb21DbGFpbXNTdmNTZWFyY2hSZXNwb25zZRJHCgZjbGFpbXMYASADKAsy",
            "Ny5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJvb21fY2xhaW1zLkNvbnRpbnVv",
            "dXNSb29tQ2xhaW0irQEKLVJvb21DbGFpbXNTdmNHZXRDbGFpbWFibGVCeVJl",
            "c2VydmF0aW9uUmVxdWVzdBJJCgtyZXNlcnZhdGlvbhgBIAEoCzI0LmhvbG1z",
            "LnR5cGVzLmJvb2tpbmcuaW5kaWNhdG9ycy5SZXNlcnZhdGlvbkluZGljYXRv",
            "chIxCgVkYXRlcxgCIAMoCzIiLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5QYkxv",
            "Y2FsRGF0ZSJjCi5Sb29tQ2xhaW1zU3ZjR2V0Q2xhaW1hYmxlQnlSZXNlcnZh",
            "dGlvblJlc3BvbnNlEjEKBXJvb21zGAEgAygLMiIuaG9sbXMudHlwZXMub3Bl",
            "cmF0aW9ucy5yb29tcy5Sb29tIskBCi9Sb29tQ2xhaW1zU3ZjVXBkYXRlUmVz",
            "ZXJ2YXRpb25Sb29tQ2xhaW1zUmVxdWVzdBJJCgtyZXNlcnZhdGlvbhgBIAEo",
            "CzI0LmhvbG1zLnR5cGVzLmJvb2tpbmcuaW5kaWNhdG9ycy5SZXNlcnZhdGlv",
            "bkluZGljYXRvchJLCghyZXF1ZXN0cxgCIAMoCzI5LmhvbG1zLnR5cGVzLm9w",
            "ZXJhdGlvbnMucm9vbV9jbGFpbXMuUm9vbUFzc2lnbm1lbnRCeU5pZ2h0IocB",
            "CjBSb29tQ2xhaW1zU3ZjVXBkYXRlUmVzZXJ2YXRpb25Sb29tQ2xhaW1zUmVz",
            "cG9uc2USUwoGcmVzdWx0GAEgASgOMkMuaG9sbXMudHlwZXMub3BlcmF0aW9u",
            "cy5yb29tX2NsYWltcy5SZXNlcnZhdGlvblJvb21Bc3NpZ25tZW50UmVzdWx0",
            "Il8KHUdldEFsbFJvb21zV2l0aENsYWltc1Jlc3BvbnNlEj4KBXJvb21zGAEg",
            "AygLMi8uaG9sbXMudHlwZXMub3BlcmF0aW9ucy5yb29tcy5Sb29tV2l0aENs",
            "YWltSW5mbyKcAQocR2V0QWxsUm9vbXNXaXRoQ2xhaW1zUmVxdWVzdBIxCgVk",
            "YXRlcxgBIAMoCzIiLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5QYkxvY2FsRGF0",
            "ZRJJCgtyZXNlcnZhdGlvbhgCIAEoCzI0LmhvbG1zLnR5cGVzLmJvb2tpbmcu",
            "aW5kaWNhdG9ycy5SZXNlcnZhdGlvbkluZGljYXRvcjKfBgoNUm9vbUNsYWlt",
            "c1N2YxJ5CgZTZWFyY2gSNi5ob2xtcy50eXBlcy5vcGVyYXRpb25zLnJwYy5S",
            "b29tQ2xhaW1zU3ZjU2VhcmNoUmVxdWVzdBo3LmhvbG1zLnR5cGVzLm9wZXJh",
            "dGlvbnMucnBjLlJvb21DbGFpbXNTdmNTZWFyY2hSZXNwb25zZRKTAQoWU2Vh",
            "cmNoQ29udGludW91c0NsYWltcxI2LmhvbG1zLnR5cGVzLm9wZXJhdGlvbnMu",
            "cnBjLlJvb21DbGFpbXNTdmNTZWFyY2hSZXF1ZXN0GkEuaG9sbXMudHlwZXMu",
            "b3BlcmF0aW9ucy5ycGMuQ29udGludW91c1Jvb21DbGFpbXNTdmNTZWFyY2hS",
            "ZXNwb25zZRKyAQoZR2V0Q2xhaW1hYmxlQnlSZXNlcnZhdGlvbhJJLmhvbG1z",
            "LnR5cGVzLm9wZXJhdGlvbnMucnBjLlJvb21DbGFpbXNTdmNHZXRDbGFpbWFi",
            "bGVCeVJlc2VydmF0aW9uUmVxdWVzdBpKLmhvbG1zLnR5cGVzLm9wZXJhdGlv",
            "bnMucnBjLlJvb21DbGFpbXNTdmNHZXRDbGFpbWFibGVCeVJlc2VydmF0aW9u",
            "UmVzcG9uc2USuAEKG1VwZGF0ZVJlc2VydmF0aW9uUm9vbUNsYWltcxJLLmhv",
            "bG1zLnR5cGVzLm9wZXJhdGlvbnMucnBjLlJvb21DbGFpbXNTdmNVcGRhdGVS",
            "ZXNlcnZhdGlvblJvb21DbGFpbXNSZXF1ZXN0GkwuaG9sbXMudHlwZXMub3Bl",
            "cmF0aW9ucy5ycGMuUm9vbUNsYWltc1N2Y1VwZGF0ZVJlc2VydmF0aW9uUm9v",
            "bUNsYWltc1Jlc3BvbnNlEowBChVHZXRBbGxSb29tc1dpdGhDbGFpbXMSOC5o",
            "b2xtcy50eXBlcy5vcGVyYXRpb25zLnJwYy5HZXRBbGxSb29tc1dpdGhDbGFp",
            "bXNSZXF1ZXN0GjkuaG9sbXMudHlwZXMub3BlcmF0aW9ucy5ycGMuR2V0QWxs",
            "Um9vbXNXaXRoQ2xhaW1zUmVzcG9uc2VCLVoOb3BlcmF0aW9ucy9ycGOqAhpI",
            "T0xNUy5UeXBlcy5PcGVyYXRpb25zLlJQQ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Booking.Indicators.ReservationIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.PbInclusiveOpsdateRangeReflection.Descriptor, global::HOLMS.Types.Primitive.PbLocalDateReflection.Descriptor, global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicatorReflection.Descriptor, global::HOLMS.Types.Operations.RoomClaims.ReservationRoomAssignmentResultReflection.Descriptor, global::HOLMS.Types.Operations.RoomClaims.RoomAssignmentByNightReflection.Descriptor, global::HOLMS.Types.Operations.RoomClaims.RoomClaimReflection.Descriptor, global::HOLMS.Types.Operations.RoomClaims.ContinuousRoomClaimReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomReflection.Descriptor, global::HOLMS.Types.Operations.Rooms.RoomWithClaimInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomClaimsSvcSearchRequest), global::HOLMS.Types.Operations.RPC.RoomClaimsSvcSearchRequest.Parser, new[]{ "Property", "DateRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomClaimsSvcSearchResponse), global::HOLMS.Types.Operations.RPC.RoomClaimsSvcSearchResponse.Parser, new[]{ "Claims" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.ContinuousRoomClaimsSvcSearchResponse), global::HOLMS.Types.Operations.RPC.ContinuousRoomClaimsSvcSearchResponse.Parser, new[]{ "Claims" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomClaimsSvcGetClaimableByReservationRequest), global::HOLMS.Types.Operations.RPC.RoomClaimsSvcGetClaimableByReservationRequest.Parser, new[]{ "Reservation", "Dates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomClaimsSvcGetClaimableByReservationResponse), global::HOLMS.Types.Operations.RPC.RoomClaimsSvcGetClaimableByReservationResponse.Parser, new[]{ "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomClaimsSvcUpdateReservationRoomClaimsRequest), global::HOLMS.Types.Operations.RPC.RoomClaimsSvcUpdateReservationRoomClaimsRequest.Parser, new[]{ "Reservation", "Requests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.RoomClaimsSvcUpdateReservationRoomClaimsResponse), global::HOLMS.Types.Operations.RPC.RoomClaimsSvcUpdateReservationRoomClaimsResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.GetAllRoomsWithClaimsResponse), global::HOLMS.Types.Operations.RPC.GetAllRoomsWithClaimsResponse.Parser, new[]{ "Rooms" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Operations.RPC.GetAllRoomsWithClaimsRequest), global::HOLMS.Types.Operations.RPC.GetAllRoomsWithClaimsRequest.Parser, new[]{ "Dates", "Reservation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RoomClaimsSvcSearchRequest : pb::IMessage<RoomClaimsSvcSearchRequest> {
    private static readonly pb::MessageParser<RoomClaimsSvcSearchRequest> _parser = new pb::MessageParser<RoomClaimsSvcSearchRequest>(() => new RoomClaimsSvcSearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaimsSvcSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcSearchRequest(RoomClaimsSvcSearchRequest other) : this() {
      Property = other.property_ != null ? other.Property.Clone() : null;
      DateRange = other.dateRange_ != null ? other.DateRange.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcSearchRequest Clone() {
      return new RoomClaimsSvcSearchRequest(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 2;
    private global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange dateRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaimsSvcSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaimsSvcSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DateRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaimsSvcSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (property_ == null) {
              property_ = new global::HOLMS.Types.TenancyConfig.Indicators.PropertyIndicator();
            }
            input.ReadMessage(property_);
            break;
          }
          case 18: {
            if (dateRange_ == null) {
              dateRange_ = new global::HOLMS.Types.Primitive.PbInclusiveOpsdateRange();
            }
            input.ReadMessage(dateRange_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomClaimsSvcSearchResponse : pb::IMessage<RoomClaimsSvcSearchResponse> {
    private static readonly pb::MessageParser<RoomClaimsSvcSearchResponse> _parser = new pb::MessageParser<RoomClaimsSvcSearchResponse>(() => new RoomClaimsSvcSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaimsSvcSearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcSearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcSearchResponse(RoomClaimsSvcSearchResponse other) : this() {
      claims_ = other.claims_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcSearchResponse Clone() {
      return new RoomClaimsSvcSearchResponse(this);
    }

    /// <summary>Field number for the "claims" field.</summary>
    public const int ClaimsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.RoomClaims.RoomClaim> _repeated_claims_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.RoomClaims.RoomClaim.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.RoomClaim> claims_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.RoomClaim>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.RoomClaim> Claims {
      get { return claims_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaimsSvcSearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaimsSvcSearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!claims_.Equals(other.claims_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= claims_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      claims_.WriteTo(output, _repeated_claims_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += claims_.CalculateSize(_repeated_claims_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaimsSvcSearchResponse other) {
      if (other == null) {
        return;
      }
      claims_.Add(other.claims_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            claims_.AddEntriesFrom(input, _repeated_claims_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContinuousRoomClaimsSvcSearchResponse : pb::IMessage<ContinuousRoomClaimsSvcSearchResponse> {
    private static readonly pb::MessageParser<ContinuousRoomClaimsSvcSearchResponse> _parser = new pb::MessageParser<ContinuousRoomClaimsSvcSearchResponse>(() => new ContinuousRoomClaimsSvcSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousRoomClaimsSvcSearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousRoomClaimsSvcSearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousRoomClaimsSvcSearchResponse(ContinuousRoomClaimsSvcSearchResponse other) : this() {
      claims_ = other.claims_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousRoomClaimsSvcSearchResponse Clone() {
      return new ContinuousRoomClaimsSvcSearchResponse(this);
    }

    /// <summary>Field number for the "claims" field.</summary>
    public const int ClaimsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.RoomClaims.ContinuousRoomClaim> _repeated_claims_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.RoomClaims.ContinuousRoomClaim.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.ContinuousRoomClaim> claims_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.ContinuousRoomClaim>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.ContinuousRoomClaim> Claims {
      get { return claims_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousRoomClaimsSvcSearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousRoomClaimsSvcSearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!claims_.Equals(other.claims_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= claims_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      claims_.WriteTo(output, _repeated_claims_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += claims_.CalculateSize(_repeated_claims_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousRoomClaimsSvcSearchResponse other) {
      if (other == null) {
        return;
      }
      claims_.Add(other.claims_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            claims_.AddEntriesFrom(input, _repeated_claims_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomClaimsSvcGetClaimableByReservationRequest : pb::IMessage<RoomClaimsSvcGetClaimableByReservationRequest> {
    private static readonly pb::MessageParser<RoomClaimsSvcGetClaimableByReservationRequest> _parser = new pb::MessageParser<RoomClaimsSvcGetClaimableByReservationRequest>(() => new RoomClaimsSvcGetClaimableByReservationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaimsSvcGetClaimableByReservationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcGetClaimableByReservationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcGetClaimableByReservationRequest(RoomClaimsSvcGetClaimableByReservationRequest other) : this() {
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
      dates_ = other.dates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcGetClaimableByReservationRequest Clone() {
      return new RoomClaimsSvcGetClaimableByReservationRequest(this);
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    /// <summary>Field number for the "dates" field.</summary>
    public const int DatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Primitive.PbLocalDate> _repeated_dates_codec
        = pb::FieldCodec.ForMessage(18, global::HOLMS.Types.Primitive.PbLocalDate.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Primitive.PbLocalDate> dates_ = new pbc::RepeatedField<global::HOLMS.Types.Primitive.PbLocalDate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Primitive.PbLocalDate> Dates {
      get { return dates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaimsSvcGetClaimableByReservationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaimsSvcGetClaimableByReservationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reservation, other.Reservation)) return false;
      if(!dates_.Equals(other.dates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      hash ^= dates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reservation);
      }
      dates_.WriteTo(output, _repeated_dates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      size += dates_.CalculateSize(_repeated_dates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaimsSvcGetClaimableByReservationRequest other) {
      if (other == null) {
        return;
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
      dates_.Add(other.dates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
          case 18: {
            dates_.AddEntriesFrom(input, _repeated_dates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomClaimsSvcGetClaimableByReservationResponse : pb::IMessage<RoomClaimsSvcGetClaimableByReservationResponse> {
    private static readonly pb::MessageParser<RoomClaimsSvcGetClaimableByReservationResponse> _parser = new pb::MessageParser<RoomClaimsSvcGetClaimableByReservationResponse>(() => new RoomClaimsSvcGetClaimableByReservationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaimsSvcGetClaimableByReservationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcGetClaimableByReservationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcGetClaimableByReservationResponse(RoomClaimsSvcGetClaimableByReservationResponse other) : this() {
      rooms_ = other.rooms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcGetClaimableByReservationResponse Clone() {
      return new RoomClaimsSvcGetClaimableByReservationResponse(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.Rooms.Room> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.Rooms.Room.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.Room> rooms_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.Room>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.Room> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaimsSvcGetClaimableByReservationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaimsSvcGetClaimableByReservationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaimsSvcGetClaimableByReservationResponse other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomClaimsSvcUpdateReservationRoomClaimsRequest : pb::IMessage<RoomClaimsSvcUpdateReservationRoomClaimsRequest> {
    private static readonly pb::MessageParser<RoomClaimsSvcUpdateReservationRoomClaimsRequest> _parser = new pb::MessageParser<RoomClaimsSvcUpdateReservationRoomClaimsRequest>(() => new RoomClaimsSvcUpdateReservationRoomClaimsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaimsSvcUpdateReservationRoomClaimsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcUpdateReservationRoomClaimsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcUpdateReservationRoomClaimsRequest(RoomClaimsSvcUpdateReservationRoomClaimsRequest other) : this() {
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
      requests_ = other.requests_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcUpdateReservationRoomClaimsRequest Clone() {
      return new RoomClaimsSvcUpdateReservationRoomClaimsRequest(this);
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 1;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.RoomClaims.RoomAssignmentByNight> _repeated_requests_codec
        = pb::FieldCodec.ForMessage(18, global::HOLMS.Types.Operations.RoomClaims.RoomAssignmentByNight.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.RoomAssignmentByNight> requests_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.RoomAssignmentByNight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.RoomClaims.RoomAssignmentByNight> Requests {
      get { return requests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaimsSvcUpdateReservationRoomClaimsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaimsSvcUpdateReservationRoomClaimsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reservation, other.Reservation)) return false;
      if(!requests_.Equals(other.requests_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      hash ^= requests_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reservation);
      }
      requests_.WriteTo(output, _repeated_requests_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      size += requests_.CalculateSize(_repeated_requests_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaimsSvcUpdateReservationRoomClaimsRequest other) {
      if (other == null) {
        return;
      }
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
      requests_.Add(other.requests_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
          case 18: {
            requests_.AddEntriesFrom(input, _repeated_requests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomClaimsSvcUpdateReservationRoomClaimsResponse : pb::IMessage<RoomClaimsSvcUpdateReservationRoomClaimsResponse> {
    private static readonly pb::MessageParser<RoomClaimsSvcUpdateReservationRoomClaimsResponse> _parser = new pb::MessageParser<RoomClaimsSvcUpdateReservationRoomClaimsResponse>(() => new RoomClaimsSvcUpdateReservationRoomClaimsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomClaimsSvcUpdateReservationRoomClaimsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcUpdateReservationRoomClaimsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcUpdateReservationRoomClaimsResponse(RoomClaimsSvcUpdateReservationRoomClaimsResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomClaimsSvcUpdateReservationRoomClaimsResponse Clone() {
      return new RoomClaimsSvcUpdateReservationRoomClaimsResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::HOLMS.Types.Operations.RoomClaims.ReservationRoomAssignmentResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Operations.RoomClaims.ReservationRoomAssignmentResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomClaimsSvcUpdateReservationRoomClaimsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomClaimsSvcUpdateReservationRoomClaimsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomClaimsSvcUpdateReservationRoomClaimsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::HOLMS.Types.Operations.RoomClaims.ReservationRoomAssignmentResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllRoomsWithClaimsResponse : pb::IMessage<GetAllRoomsWithClaimsResponse> {
    private static readonly pb::MessageParser<GetAllRoomsWithClaimsResponse> _parser = new pb::MessageParser<GetAllRoomsWithClaimsResponse>(() => new GetAllRoomsWithClaimsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllRoomsWithClaimsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllRoomsWithClaimsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllRoomsWithClaimsResponse(GetAllRoomsWithClaimsResponse other) : this() {
      rooms_ = other.rooms_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllRoomsWithClaimsResponse Clone() {
      return new GetAllRoomsWithClaimsResponse(this);
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Operations.Rooms.RoomWithClaimInfo> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Operations.Rooms.RoomWithClaimInfo.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.RoomWithClaimInfo> rooms_ = new pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.RoomWithClaimInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Operations.Rooms.RoomWithClaimInfo> Rooms {
      get { return rooms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllRoomsWithClaimsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllRoomsWithClaimsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllRoomsWithClaimsResponse other) {
      if (other == null) {
        return;
      }
      rooms_.Add(other.rooms_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllRoomsWithClaimsRequest : pb::IMessage<GetAllRoomsWithClaimsRequest> {
    private static readonly pb::MessageParser<GetAllRoomsWithClaimsRequest> _parser = new pb::MessageParser<GetAllRoomsWithClaimsRequest>(() => new GetAllRoomsWithClaimsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllRoomsWithClaimsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Operations.RPC.RoomClaimsSvcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllRoomsWithClaimsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllRoomsWithClaimsRequest(GetAllRoomsWithClaimsRequest other) : this() {
      dates_ = other.dates_.Clone();
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllRoomsWithClaimsRequest Clone() {
      return new GetAllRoomsWithClaimsRequest(this);
    }

    /// <summary>Field number for the "dates" field.</summary>
    public const int DatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HOLMS.Types.Primitive.PbLocalDate> _repeated_dates_codec
        = pb::FieldCodec.ForMessage(10, global::HOLMS.Types.Primitive.PbLocalDate.Parser);
    private readonly pbc::RepeatedField<global::HOLMS.Types.Primitive.PbLocalDate> dates_ = new pbc::RepeatedField<global::HOLMS.Types.Primitive.PbLocalDate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HOLMS.Types.Primitive.PbLocalDate> Dates {
      get { return dates_; }
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 2;
    private global::HOLMS.Types.Booking.Indicators.ReservationIndicator reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Booking.Indicators.ReservationIndicator Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllRoomsWithClaimsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllRoomsWithClaimsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dates_.Equals(other.dates_)) return false;
      if (!object.Equals(Reservation, other.Reservation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dates_.GetHashCode();
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dates_.WriteTo(output, _repeated_dates_codec);
      if (reservation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dates_.CalculateSize(_repeated_dates_codec);
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllRoomsWithClaimsRequest other) {
      if (other == null) {
        return;
      }
      dates_.Add(other.dates_);
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
        }
        Reservation.MergeFrom(other.Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dates_.AddEntriesFrom(input, _repeated_dates_codec);
            break;
          }
          case 18: {
            if (reservation_ == null) {
              reservation_ = new global::HOLMS.Types.Booking.Indicators.ReservationIndicator();
            }
            input.ReadMessage(reservation_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

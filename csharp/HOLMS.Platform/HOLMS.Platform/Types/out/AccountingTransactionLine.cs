// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money/accounting/accounting_transaction_line.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Money.Accounting {

  /// <summary>Holder for reflection information generated from money/accounting/accounting_transaction_line.proto</summary>
  public static partial class AccountingTransactionLineReflection {

    #region Descriptor
    /// <summary>File descriptor for money/accounting/accounting_transaction_line.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountingTransactionLineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJtb25leS9hY2NvdW50aW5nL2FjY291bnRpbmdfdHJhbnNhY3Rpb25fbGlu",
            "ZS5wcm90bxIcaG9sbXMudHlwZXMubW9uZXkuYWNjb3VudGluZxoobW9uZXkv",
            "YWNjb3VudGluZy9hY2NvdW50X2luZGljYXRvci5wcm90bxoubW9uZXkvYWNj",
            "b3VudGluZy9sZWRnZXJfYWNjb3VudF9jYXRlZ29yeS5wcm90bxo8bW9uZXkv",
            "YWNjb3VudGluZy9hY2NvdW50aW5nX3RyYW5zYWN0aW9uX2xpbmVfaW5kaWNh",
            "dG9yLnByb3RvGh9wcmltaXRpdmUvbW9uZXRhcnlfYW1vdW50LnByb3RvIqAD",
            "ChlBY2NvdW50aW5nVHJhbnNhY3Rpb25MaW5lEjsKDGRlYml0X2Ftb3VudBgB",
            "IAEoCzIlLmhvbG1zLnR5cGVzLnByaW1pdGl2ZS5Nb25ldGFyeUFtb3VudBI8",
            "Cg1jcmVkaXRfYW1vdW50GAIgASgLMiUuaG9sbXMudHlwZXMucHJpbWl0aXZl",
            "Lk1vbmV0YXJ5QW1vdW50EhEKCW5hcnJhdGlvbhgDIAEoCRI/CgdhY2NvdW50",
            "GAQgASgLMi4uaG9sbXMudHlwZXMubW9uZXkuYWNjb3VudGluZy5BY2NvdW50",
            "SW5kaWNhdG9yEhQKDGFjY291bnRfbmFtZRgFIAEoCRJJCgxhY2NvdW50X3R5",
            "cGUYBiABKA4yMy5ob2xtcy50eXBlcy5tb25leS5hY2NvdW50aW5nLkxlZGdl",
            "ckFjY291bnRDYXRlZ29yeRJTCgllbnRpdHlfaWQYByABKAsyQC5ob2xtcy50",
            "eXBlcy5tb25leS5hY2NvdW50aW5nLkFjY291bnRpbmdUcmFuc2FjdGlvbkxp",
            "bmVJbmRpY2F0b3JCMVoQbW9uZXkvYWNjb3VudGluZ6oCHEhPTE1TLlR5cGVz",
            "Lk1vbmV5LkFjY291bnRpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Money.Accounting.AccountIndicatorReflection.Descriptor, global::HOLMS.Types.Money.Accounting.LedgerAccountCategoryReflection.Descriptor, global::HOLMS.Types.Money.Accounting.AccountingTransactionLineIndicatorReflection.Descriptor, global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Money.Accounting.AccountingTransactionLine), global::HOLMS.Types.Money.Accounting.AccountingTransactionLine.Parser, new[]{ "DebitAmount", "CreditAmount", "Narration", "Account", "AccountName", "AccountType", "EntityId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AccountingTransactionLine : pb::IMessage<AccountingTransactionLine> {
    private static readonly pb::MessageParser<AccountingTransactionLine> _parser = new pb::MessageParser<AccountingTransactionLine>(() => new AccountingTransactionLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountingTransactionLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Money.Accounting.AccountingTransactionLineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountingTransactionLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountingTransactionLine(AccountingTransactionLine other) : this() {
      DebitAmount = other.debitAmount_ != null ? other.DebitAmount.Clone() : null;
      CreditAmount = other.creditAmount_ != null ? other.CreditAmount.Clone() : null;
      narration_ = other.narration_;
      Account = other.account_ != null ? other.Account.Clone() : null;
      accountName_ = other.accountName_;
      accountType_ = other.accountType_;
      EntityId = other.entityId_ != null ? other.EntityId.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountingTransactionLine Clone() {
      return new AccountingTransactionLine(this);
    }

    /// <summary>Field number for the "debit_amount" field.</summary>
    public const int DebitAmountFieldNumber = 1;
    private global::HOLMS.Types.Primitive.MonetaryAmount debitAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount DebitAmount {
      get { return debitAmount_; }
      set {
        debitAmount_ = value;
      }
    }

    /// <summary>Field number for the "credit_amount" field.</summary>
    public const int CreditAmountFieldNumber = 2;
    private global::HOLMS.Types.Primitive.MonetaryAmount creditAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount CreditAmount {
      get { return creditAmount_; }
      set {
        creditAmount_ = value;
      }
    }

    /// <summary>Field number for the "narration" field.</summary>
    public const int NarrationFieldNumber = 3;
    private string narration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Narration {
      get { return narration_; }
      set {
        narration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 4;
    private global::HOLMS.Types.Money.Accounting.AccountIndicator account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.AccountIndicator Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 5;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_type" field.</summary>
    public const int AccountTypeFieldNumber = 6;
    private global::HOLMS.Types.Money.Accounting.LedgerAccountCategory accountType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.LedgerAccountCategory AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 7;
    private global::HOLMS.Types.Money.Accounting.AccountingTransactionLineIndicator entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Money.Accounting.AccountingTransactionLineIndicator EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountingTransactionLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountingTransactionLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DebitAmount, other.DebitAmount)) return false;
      if (!object.Equals(CreditAmount, other.CreditAmount)) return false;
      if (Narration != other.Narration) return false;
      if (!object.Equals(Account, other.Account)) return false;
      if (AccountName != other.AccountName) return false;
      if (AccountType != other.AccountType) return false;
      if (!object.Equals(EntityId, other.EntityId)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (debitAmount_ != null) hash ^= DebitAmount.GetHashCode();
      if (creditAmount_ != null) hash ^= CreditAmount.GetHashCode();
      if (Narration.Length != 0) hash ^= Narration.GetHashCode();
      if (account_ != null) hash ^= Account.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (entityId_ != null) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (debitAmount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DebitAmount);
      }
      if (creditAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreditAmount);
      }
      if (Narration.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Narration);
      }
      if (account_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Account);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AccountName);
      }
      if (AccountType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AccountType);
      }
      if (entityId_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (debitAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebitAmount);
      }
      if (creditAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreditAmount);
      }
      if (Narration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Narration);
      }
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
      }
      if (entityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountingTransactionLine other) {
      if (other == null) {
        return;
      }
      if (other.debitAmount_ != null) {
        if (debitAmount_ == null) {
          debitAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        DebitAmount.MergeFrom(other.DebitAmount);
      }
      if (other.creditAmount_ != null) {
        if (creditAmount_ == null) {
          creditAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        CreditAmount.MergeFrom(other.CreditAmount);
      }
      if (other.Narration.Length != 0) {
        Narration = other.Narration;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::HOLMS.Types.Money.Accounting.AccountIndicator();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.entityId_ != null) {
        if (entityId_ == null) {
          entityId_ = new global::HOLMS.Types.Money.Accounting.AccountingTransactionLineIndicator();
        }
        EntityId.MergeFrom(other.EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (debitAmount_ == null) {
              debitAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(debitAmount_);
            break;
          }
          case 18: {
            if (creditAmount_ == null) {
              creditAmount_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(creditAmount_);
            break;
          }
          case 26: {
            Narration = input.ReadString();
            break;
          }
          case 34: {
            if (account_ == null) {
              account_ = new global::HOLMS.Types.Money.Accounting.AccountIndicator();
            }
            input.ReadMessage(account_);
            break;
          }
          case 42: {
            AccountName = input.ReadString();
            break;
          }
          case 48: {
            accountType_ = (global::HOLMS.Types.Money.Accounting.LedgerAccountCategory) input.ReadEnum();
            break;
          }
          case 58: {
            if (entityId_ == null) {
              entityId_ = new global::HOLMS.Types.Money.Accounting.AccountingTransactionLineIndicator();
            }
            input.ReadMessage(entityId_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

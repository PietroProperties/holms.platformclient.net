// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/rpc/ota_base_supply_svc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace HOLMS.Types.Supply.RPC {
  public static partial class OtaBaseSupplySvc
  {
    static readonly string __ServiceName = "holms.types.supply.rpc.OtaBaseSupplySvc";

    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest> __Marshaller_OtaSupplyDetailsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse> __Marshaller_OtaSupplyDetailsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest> __Marshaller_ChannelAllocationUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> __Marshaller_ChannelAllocationUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest> __Marshaller_ChannelStopSellUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest, global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse> __Method_AllForDates = new grpc::Method<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest, global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllForDates",
        __Marshaller_OtaSupplyDetailsRequest,
        __Marshaller_OtaSupplyDetailsResponse);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> __Method_InsertOrUpdateSupply = new grpc::Method<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertOrUpdateSupply",
        __Marshaller_ChannelAllocationUpdateRequest,
        __Marshaller_ChannelAllocationUpdateResponse);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> __Method_UpdateStopSell = new grpc::Method<global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateStopSell",
        __Marshaller_ChannelStopSellUpdateRequest,
        __Marshaller_ChannelAllocationUpdateResponse);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> __Method_UpdatePrice = new grpc::Method<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePrice",
        __Marshaller_ChannelAllocationUpdateRequest,
        __Marshaller_ChannelAllocationUpdateResponse);

    static readonly grpc::Method<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> __Method_SyncChannelRush = new grpc::Method<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest, global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SyncChannelRush",
        __Marshaller_OtaSupplyDetailsRequest,
        __Marshaller_ChannelAllocationUpdateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HOLMS.Types.Supply.RPC.OtaBaseSupplySvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OtaBaseSupplySvc</summary>
    public abstract partial class OtaBaseSupplySvcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse> AllForDates(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> InsertOrUpdateSupply(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> UpdateStopSell(global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> UpdatePrice(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> SyncChannelRush(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OtaBaseSupplySvc</summary>
    public partial class OtaBaseSupplySvcClient : grpc::ClientBase<OtaBaseSupplySvcClient>
    {
      /// <summary>Creates a new client for OtaBaseSupplySvc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OtaBaseSupplySvcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OtaBaseSupplySvc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OtaBaseSupplySvcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OtaBaseSupplySvcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OtaBaseSupplySvcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse AllForDates(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllForDates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse AllForDates(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllForDates, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse> AllForDatesAsync(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllForDatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsResponse> AllForDatesAsync(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllForDates, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse InsertOrUpdateSupply(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertOrUpdateSupply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse InsertOrUpdateSupply(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertOrUpdateSupply, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> InsertOrUpdateSupplyAsync(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return InsertOrUpdateSupplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> InsertOrUpdateSupplyAsync(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertOrUpdateSupply, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse UpdateStopSell(global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateStopSell(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse UpdateStopSell(global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateStopSell, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> UpdateStopSellAsync(global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateStopSellAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> UpdateStopSellAsync(global::HOLMS.Types.Supply.RPC.ChannelStopSellUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateStopSell, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse UpdatePrice(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdatePrice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse UpdatePrice(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePrice, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> UpdatePriceAsync(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdatePriceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> UpdatePriceAsync(global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePrice, null, options, request);
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse SyncChannelRush(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SyncChannelRush(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse SyncChannelRush(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SyncChannelRush, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> SyncChannelRushAsync(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SyncChannelRushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::HOLMS.Types.Supply.RPC.ChannelAllocationUpdateResponse> SyncChannelRushAsync(global::HOLMS.Types.Supply.RPC.OtaSupplyDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SyncChannelRush, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OtaBaseSupplySvcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OtaBaseSupplySvcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(OtaBaseSupplySvcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AllForDates, serviceImpl.AllForDates)
          .AddMethod(__Method_InsertOrUpdateSupply, serviceImpl.InsertOrUpdateSupply)
          .AddMethod(__Method_UpdateStopSell, serviceImpl.UpdateStopSell)
          .AddMethod(__Method_UpdatePrice, serviceImpl.UpdatePrice)
          .AddMethod(__Method_SyncChannelRush, serviceImpl.SyncChannelRush).Build();
    }

  }
}
#endregion

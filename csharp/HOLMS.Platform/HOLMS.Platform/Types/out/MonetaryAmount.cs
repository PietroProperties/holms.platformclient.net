// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitive/monetary_amount.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Primitive {

  /// <summary>Holder for reflection information generated from primitive/monetary_amount.proto</summary>
  public static partial class MonetaryAmountReflection {

    #region Descriptor
    /// <summary>File descriptor for primitive/monetary_amount.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonetaryAmountReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9wcmltaXRpdmUvbW9uZXRhcnlfYW1vdW50LnByb3RvEhVob2xtcy50eXBl",
            "cy5wcmltaXRpdmUiRQoOTW9uZXRhcnlBbW91bnQSDwoHZG9sbGFycxgBIAEo",
            "DRINCgVjZW50cxgCIAEoDRITCgtpc19uZWdhdGl2ZRgDIAEoCEIjWglwcmlt",
            "aXRpdmWqAhVIT0xNUy5UeXBlcy5QcmltaXRpdmViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Primitive.MonetaryAmount), global::HOLMS.Types.Primitive.MonetaryAmount.Parser, new[]{ "Dollars", "Cents", "IsNegative" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MonetaryAmount : pb::IMessage<MonetaryAmount> {
    private static readonly pb::MessageParser<MonetaryAmount> _parser = new pb::MessageParser<MonetaryAmount>(() => new MonetaryAmount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonetaryAmount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonetaryAmount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonetaryAmount(MonetaryAmount other) : this() {
      dollars_ = other.dollars_;
      cents_ = other.cents_;
      isNegative_ = other.isNegative_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonetaryAmount Clone() {
      return new MonetaryAmount(this);
    }

    /// <summary>Field number for the "dollars" field.</summary>
    public const int DollarsFieldNumber = 1;
    private uint dollars_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dollars {
      get { return dollars_; }
      set {
        dollars_ = value;
      }
    }

    /// <summary>Field number for the "cents" field.</summary>
    public const int CentsFieldNumber = 2;
    private uint cents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cents {
      get { return cents_; }
      set {
        cents_ = value;
      }
    }

    /// <summary>Field number for the "is_negative" field.</summary>
    public const int IsNegativeFieldNumber = 3;
    private bool isNegative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNegative {
      get { return isNegative_; }
      set {
        isNegative_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonetaryAmount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonetaryAmount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dollars != other.Dollars) return false;
      if (Cents != other.Cents) return false;
      if (IsNegative != other.IsNegative) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dollars != 0) hash ^= Dollars.GetHashCode();
      if (Cents != 0) hash ^= Cents.GetHashCode();
      if (IsNegative != false) hash ^= IsNegative.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dollars != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Dollars);
      }
      if (Cents != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cents);
      }
      if (IsNegative != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNegative);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dollars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dollars);
      }
      if (Cents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cents);
      }
      if (IsNegative != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonetaryAmount other) {
      if (other == null) {
        return;
      }
      if (other.Dollars != 0) {
        Dollars = other.Dollars;
      }
      if (other.Cents != 0) {
        Cents = other.Cents;
      }
      if (other.IsNegative != false) {
        IsNegative = other.IsNegative;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Dollars = input.ReadUInt32();
            break;
          }
          case 16: {
            Cents = input.ReadUInt32();
            break;
          }
          case 24: {
            IsNegative = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

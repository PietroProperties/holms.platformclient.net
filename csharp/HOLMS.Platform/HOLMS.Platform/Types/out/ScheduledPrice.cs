// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supply/scheduled_price.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HOLMS.Types.Supply {

  /// <summary>Holder for reflection information generated from supply/scheduled_price.proto</summary>
  public static partial class ScheduledPriceReflection {

    #region Descriptor
    /// <summary>File descriptor for supply/scheduled_price.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScheduledPriceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxzdXBwbHkvc2NoZWR1bGVkX3ByaWNlLnByb3RvEhJob2xtcy50eXBlcy5z",
            "dXBwbHkaIXN1cHBseS9yb29tX3R5cGVzL3Jvb21fdHlwZS5wcm90bxofcHJp",
            "bWl0aXZlL21vbmV0YXJ5X2Ftb3VudC5wcm90bxodcHJpbWl0aXZlL3BiX2xv",
            "Y2FsX2RhdGUucHJvdG8aGnN1cHBseS9yYXRlX3NjaGVkdWxlLnByb3RvIvUB",
            "Cg5TY2hlZHVsZWRQcmljZRIwCgRkYXRlGAEgASgLMiIuaG9sbXMudHlwZXMu",
            "cHJpbWl0aXZlLlBiTG9jYWxEYXRlEjcKDXJhdGVfc2NoZWR1bGUYAiABKAsy",
            "IC5ob2xtcy50eXBlcy5zdXBwbHkuUmF0ZVNjaGVkdWxlEjoKCXJvb21fdHlw",
            "ZRgDIAEoCzInLmhvbG1zLnR5cGVzLnN1cHBseS5yb29tX3R5cGVzLlJvb21U",
            "eXBlEjwKDW5pZ2h0bHlfcHJpY2UYBCABKAsyJS5ob2xtcy50eXBlcy5wcmlt",
            "aXRpdmUuTW9uZXRhcnlBbW91bnRCHVoGc3VwcGx5qgISSE9MTVMuVHlwZXMu",
            "U3VwcGx5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::HOLMS.Types.Supply.RoomTypes.RoomTypeReflection.Descriptor, global::HOLMS.Types.Primitive.MonetaryAmountReflection.Descriptor, global::HOLMS.Types.Primitive.PbLocalDateReflection.Descriptor, global::HOLMS.Types.Supply.RateScheduleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HOLMS.Types.Supply.ScheduledPrice), global::HOLMS.Types.Supply.ScheduledPrice.Parser, new[]{ "Date", "RateSchedule", "RoomType", "NightlyPrice" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ScheduledPrice : pb::IMessage<ScheduledPrice> {
    private static readonly pb::MessageParser<ScheduledPrice> _parser = new pb::MessageParser<ScheduledPrice>(() => new ScheduledPrice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScheduledPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HOLMS.Types.Supply.ScheduledPriceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduledPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduledPrice(ScheduledPrice other) : this() {
      Date = other.date_ != null ? other.Date.Clone() : null;
      RateSchedule = other.rateSchedule_ != null ? other.RateSchedule.Clone() : null;
      RoomType = other.roomType_ != null ? other.RoomType.Clone() : null;
      NightlyPrice = other.nightlyPrice_ != null ? other.NightlyPrice.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScheduledPrice Clone() {
      return new ScheduledPrice(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::HOLMS.Types.Primitive.PbLocalDate date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.PbLocalDate Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "rate_schedule" field.</summary>
    public const int RateScheduleFieldNumber = 2;
    private global::HOLMS.Types.Supply.RateSchedule rateSchedule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RateSchedule RateSchedule {
      get { return rateSchedule_; }
      set {
        rateSchedule_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 3;
    private global::HOLMS.Types.Supply.RoomTypes.RoomType roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Supply.RoomTypes.RoomType RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "nightly_price" field.</summary>
    public const int NightlyPriceFieldNumber = 4;
    private global::HOLMS.Types.Primitive.MonetaryAmount nightlyPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HOLMS.Types.Primitive.MonetaryAmount NightlyPrice {
      get { return nightlyPrice_; }
      set {
        nightlyPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScheduledPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScheduledPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(RateSchedule, other.RateSchedule)) return false;
      if (!object.Equals(RoomType, other.RoomType)) return false;
      if (!object.Equals(NightlyPrice, other.NightlyPrice)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (rateSchedule_ != null) hash ^= RateSchedule.GetHashCode();
      if (roomType_ != null) hash ^= RoomType.GetHashCode();
      if (nightlyPrice_ != null) hash ^= NightlyPrice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (rateSchedule_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RateSchedule);
      }
      if (roomType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomType);
      }
      if (nightlyPrice_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NightlyPrice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (rateSchedule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateSchedule);
      }
      if (roomType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomType);
      }
      if (nightlyPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NightlyPrice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScheduledPrice other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          date_ = new global::HOLMS.Types.Primitive.PbLocalDate();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.rateSchedule_ != null) {
        if (rateSchedule_ == null) {
          rateSchedule_ = new global::HOLMS.Types.Supply.RateSchedule();
        }
        RateSchedule.MergeFrom(other.RateSchedule);
      }
      if (other.roomType_ != null) {
        if (roomType_ == null) {
          roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomType();
        }
        RoomType.MergeFrom(other.RoomType);
      }
      if (other.nightlyPrice_ != null) {
        if (nightlyPrice_ == null) {
          nightlyPrice_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
        }
        NightlyPrice.MergeFrom(other.NightlyPrice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (date_ == null) {
              date_ = new global::HOLMS.Types.Primitive.PbLocalDate();
            }
            input.ReadMessage(date_);
            break;
          }
          case 18: {
            if (rateSchedule_ == null) {
              rateSchedule_ = new global::HOLMS.Types.Supply.RateSchedule();
            }
            input.ReadMessage(rateSchedule_);
            break;
          }
          case 26: {
            if (roomType_ == null) {
              roomType_ = new global::HOLMS.Types.Supply.RoomTypes.RoomType();
            }
            input.ReadMessage(roomType_);
            break;
          }
          case 34: {
            if (nightlyPrice_ == null) {
              nightlyPrice_ = new global::HOLMS.Types.Primitive.MonetaryAmount();
            }
            input.ReadMessage(nightlyPrice_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
